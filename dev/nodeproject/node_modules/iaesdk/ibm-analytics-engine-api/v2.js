"use strict";
/**
 * (C) Copyright IBM Corp. 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * With IBM Analytics Engine you can create Apache Spark and Apache Hadoop clusters and customize these clusters by
 * using scripts. You can work with data in IBM Cloud Object Storage, as well as integrate other Watson Data Platform
 * services like IBM Watson Studio and Machine Learning.
 */
var IbmAnalyticsEngineApiV2 = /** @class */ (function (_super) {
    __extends(IbmAnalyticsEngineApiV2, _super);
    /**
     * Construct a IbmAnalyticsEngineApiV2 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://gateway.watsonplatform.net'). The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {IbmAnalyticsEngineApiV2}
     */
    function IbmAnalyticsEngineApiV2(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of IbmAnalyticsEngineApiV2 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {IbmAnalyticsEngineApiV2}
     */
    IbmAnalyticsEngineApiV2.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        var service = new IbmAnalyticsEngineApiV2(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * analyticsEngines
     ************************/
    /**
     * List all Analytics Engines.
     *
     * Currently, you cannot fetch the list of all IBM Analytics Engine service instances through this REST API. You
     * should use the IBM Cloud CLI instead.  For example, ```ibmcloud resource service-instances --service-name
     * ibmanalyticsengine```.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.Empty>>}
     */
    IbmAnalyticsEngineApiV2.prototype.getAllAnalyticsEngines = function (params) {
        var _this = this;
        var _params = extend({}, params);
        return new Promise(function (resolve, reject) {
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'getAllAnalyticsEngines');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines',
                    method: 'GET',
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {}, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    /**
     * Get details of Analytics Engine.
     *
     * Retrieves the following details of the IBM Analytics Engine service instance:
     * * Hardware size and software package
     *  * Timestamps at which the cluster was created, deleted or updated
     *  * Service endpoint URLs
     *
     *  **NOTE:** No credentials are returned. You can get the IBM Analytics Engine service instance credentials by
     * invoking the reset_password REST API.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceGuid - GUID of the service instance.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.AnalyticsEngine>>}
     */
    IbmAnalyticsEngineApiV2.prototype.getAnalyticsEngineById = function (params) {
        var _this = this;
        var _params = extend({}, params);
        var requiredParams = ['instanceGuid'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                return reject(missingParams);
            }
            var path = {
                'instance_guid': _params.instanceGuid
            };
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'getAnalyticsEngineById');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines/{instance_guid}',
                    method: 'GET',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    /**
     * Get state of Analytics Engine.
     *
     * Returns the state of the Analytics Engine cluster. The following states exist:
     * * Preparing : A cluster is being created.
     * * Active : The cluster is created and running.
     * * Deleted : The cluster was deleted.
     * * Failed : A cluster couldn't be created.
     * * Expired : The service instance has expired. The cluster has been deleted.
     * * ResizeFailed : The cluster couldn't be resized. The cluster will be reactivated based on the old settings.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceGuid - GUID of the service instance.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.AnalyticsEngineState>>}
     */
    IbmAnalyticsEngineApiV2.prototype.getAnalyticsEngineStateById = function (params) {
        var _this = this;
        var _params = extend({}, params);
        var requiredParams = ['instanceGuid'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                return reject(missingParams);
            }
            var path = {
                'instance_guid': _params.instanceGuid
            };
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'getAnalyticsEngineStateById');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines/{instance_guid}/state',
                    method: 'GET',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    /**
     * Create an adhoc customization request.
     *
     * Creates a new adhoc customization request. Adhoc customization scripts can be run only once. They are not persisted
     * with the cluster and are not run automatically when more nodes are added to the cluster.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceGuid - GUID of the service instance.
     * @param {string} params.target - Type of nodes to target for this customization.
     * @param {AnalyticsEngineCustomAction[]} params.customActions - List of custom actions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.AnalyticsEngineCreateCustomizationResponse>>}
     */
    IbmAnalyticsEngineApiV2.prototype.createCustomizationRequest = function (params) {
        var _this = this;
        var _params = extend({}, params);
        var requiredParams = ['instanceGuid', 'target', 'customActions'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                return reject(missingParams);
            }
            var body = {
                'target': _params.target,
                'custom_actions': _params.customActions
            };
            var path = {
                'instance_guid': _params.instanceGuid
            };
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'createCustomizationRequest');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines/{instance_guid}/customization_requests',
                    method: 'POST',
                    body: body,
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    /**
     * Get all customization requests run on an Analytics Engine cluster.
     *
     * Retrieves the request_id of all customization requests submitted to the specified Analytics Engine cluster.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceGuid - service instance GUID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.AnalyticsEngineCustomizationRequestCollectionItem[]>>}
     */
    IbmAnalyticsEngineApiV2.prototype.getAllCustomizationRequests = function (params) {
        var _this = this;
        var _params = extend({}, params);
        var requiredParams = ['instanceGuid'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                return reject(missingParams);
            }
            var path = {
                'instance_guid': _params.instanceGuid
            };
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'getAllCustomizationRequests');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines/{instance_guid}/customization_requests',
                    method: 'GET',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    /**
     * Retrieve details of specified customization request ID.
     *
     * Retrieves the status of the specified customization request, along with pointers to log files generated during the
     * run.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceGuid - Service instance GUID.
     * @param {string} params.requestId - customization request ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.AnalyticsEngineCustomizationRunDetails>>}
     */
    IbmAnalyticsEngineApiV2.prototype.getCustomizationRequestById = function (params) {
        var _this = this;
        var _params = extend({}, params);
        var requiredParams = ['instanceGuid', 'requestId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                return reject(missingParams);
            }
            var path = {
                'instance_guid': _params.instanceGuid,
                'request_id': _params.requestId
            };
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'getCustomizationRequestById');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines/{instance_guid}/customization_requests/{request_id}',
                    method: 'GET',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    /**
     * Add nodes to the cluster.
     *
     * Resizes the cluster by adding compute nodes.
     *
     * **Note:** You can't resize the cluster if the software package on the cluster is deprecated or if the software
     * package doesn't permit cluster resizing. See
     * [here](https://cloud.ibm.com/docs/AnalyticsEngine?topic=AnalyticsEngine-unsupported-operations).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceGuid - Service instance GUID.
     * @param {number} [params.computeNodesCount] - Expected number of nodes in the cluster after the resize operation.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.AnalyticsEngineResizeClusterResponse>>}
     */
    IbmAnalyticsEngineApiV2.prototype.resizeCluster = function (params) {
        var _this = this;
        var _params = extend({}, params);
        var requiredParams = ['instanceGuid'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                return reject(missingParams);
            }
            var body = {
                'compute_nodes_count': _params.computeNodesCount
            };
            var path = {
                'instance_guid': _params.instanceGuid
            };
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'resizeCluster');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines/{instance_guid}/resize',
                    method: 'POST',
                    body: body,
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    /**
     * Reset cluster password.
     *
     * Resets the cluster's password to a new system-generated crytographically strong value.  The new password is
     * included in the response and you should make a note of it.  This password is displayed only once here and cannot be
     * retrieved later.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceGuid - Service instance GUID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.AnalyticsEngineResetClusterPasswordResponse>>}
     */
    IbmAnalyticsEngineApiV2.prototype.resetClusterPassword = function (params) {
        var _this = this;
        var _params = extend({}, params);
        var requiredParams = ['instanceGuid'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                return reject(missingParams);
            }
            var path = {
                'instance_guid': _params.instanceGuid
            };
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'resetClusterPassword');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines/{instance_guid}/reset_password',
                    method: 'POST',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    /**
     * Configure log aggregation.
     *
     * Collects the logs for the following components in an IBM Analytics Engine cluster:
     * * IBM Analytics Engine daemon logs, for example those for Spark, Hive, Yarn, and Knox on the management and data
     * nodes
     * * Yarn application job logs.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceGuid - GUID of the service instance.
     * @param {AnalyticsEngineLoggingNodeSpec[]} params.logSpecs - Logging specifications on each node.
     * @param {AnalyticsEngineLoggingServer} params.logServer - Logging server configuration.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.Empty>>}
     */
    IbmAnalyticsEngineApiV2.prototype.configureLogging = function (params) {
        var _this = this;
        var _params = extend({}, params);
        var requiredParams = ['instanceGuid', 'logSpecs', 'logServer'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                return reject(missingParams);
            }
            var body = {
                'log_specs': _params.logSpecs,
                'log_server': _params.logServer
            };
            var path = {
                'instance_guid': _params.instanceGuid
            };
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'configureLogging');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines/{instance_guid}/log_config',
                    method: 'PUT',
                    body: body,
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Content-Type': 'application/json',
                    }, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    /**
     * Retrieve the status of log configuration.
     *
     * Retrieves the status and details of the log configuration for your cluster.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceGuid - Service instance GUID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.AnalyticsEngineLoggingConfigDetails>>}
     */
    IbmAnalyticsEngineApiV2.prototype.getLoggingConfig = function (params) {
        var _this = this;
        var _params = extend({}, params);
        var requiredParams = ['instanceGuid'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                return reject(missingParams);
            }
            var path = {
                'instance_guid': _params.instanceGuid
            };
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'getLoggingConfig');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines/{instance_guid}/log_config',
                    method: 'GET',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    /**
     * Delete the log configuration.
     *
     * Deletes the log configuration. This operation stops sending logs to the centralized log server.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceGuid - Service instance GUID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.Empty>>}
     */
    IbmAnalyticsEngineApiV2.prototype.deleteLoggingConfig = function (params) {
        var _this = this;
        var _params = extend({}, params);
        var requiredParams = ['instanceGuid'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                return reject(missingParams);
            }
            var path = {
                'instance_guid': _params.instanceGuid
            };
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteLoggingConfig');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines/{instance_guid}/log_config',
                    method: 'DELETE',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {}, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    /**
     * Update private endpoint whitelist.
     *
     * Updates the list of whitelisted private endpoints. This operation either adds ip ranges to the whitelist or deletes
     * them.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceGuid - GUID of the service instance.
     * @param {string[]} params.ipRanges - List of IP ranges to add to or remove from the whitelist.
     * @param {string} params.action - Update Whitelist IP ranges. Add (or) Delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV2.Response<IbmAnalyticsEngineApiV2.AnalyticsEngineWhitelistResponse>>}
     */
    IbmAnalyticsEngineApiV2.prototype.updatePrivateEndpointWhitelist = function (params) {
        var _this = this;
        var _params = extend({}, params);
        var requiredParams = ['instanceGuid', 'ipRanges', 'action'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                return reject(missingParams);
            }
            var body = {
                'ip_ranges': _params.ipRanges,
                'action': _params.action
            };
            var path = {
                'instance_guid': _params.instanceGuid
            };
            var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME, 'v2', 'updatePrivateEndpointWhitelist');
            var parameters = {
                options: {
                    url: '/v2/analytics_engines/{instance_guid}/private_endpoint_whitelist',
                    method: 'PATCH',
                    body: body,
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }, _params.headers),
                }),
            };
            return resolve(_this.createRequest(parameters));
        });
    };
    ;
    IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_URL = 'https://api.us-south.ae.cloud.ibm.com';
    IbmAnalyticsEngineApiV2.DEFAULT_SERVICE_NAME = 'ibm_analytics_engine_api';
    return IbmAnalyticsEngineApiV2;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (IbmAnalyticsEngineApiV2) {
    /** Constants for the `createCustomizationRequest` operation. */
    var CreateCustomizationRequestConstants;
    (function (CreateCustomizationRequestConstants) {
        /** Type of nodes to target for this customization. */
        var Target;
        (function (Target) {
            Target["ALL"] = "all";
            Target["MASTER_MANAGEMENT"] = "master-management";
            Target["DATA"] = "data";
        })(Target = CreateCustomizationRequestConstants.Target || (CreateCustomizationRequestConstants.Target = {}));
    })(CreateCustomizationRequestConstants = IbmAnalyticsEngineApiV2.CreateCustomizationRequestConstants || (IbmAnalyticsEngineApiV2.CreateCustomizationRequestConstants = {}));
    /** Constants for the `updatePrivateEndpointWhitelist` operation. */
    var UpdatePrivateEndpointWhitelistConstants;
    (function (UpdatePrivateEndpointWhitelistConstants) {
        /** Update Whitelist IP ranges. Add (or) Delete. */
        var Action;
        (function (Action) {
            Action["ADD"] = "add";
            Action["DELETE"] = "delete";
        })(Action = UpdatePrivateEndpointWhitelistConstants.Action || (UpdatePrivateEndpointWhitelistConstants.Action = {}));
    })(UpdatePrivateEndpointWhitelistConstants = IbmAnalyticsEngineApiV2.UpdatePrivateEndpointWhitelistConstants || (IbmAnalyticsEngineApiV2.UpdatePrivateEndpointWhitelistConstants = {}));
})(IbmAnalyticsEngineApiV2 || (IbmAnalyticsEngineApiV2 = {}));
module.exports = IbmAnalyticsEngineApiV2;
//# sourceMappingURL=v2.js.map