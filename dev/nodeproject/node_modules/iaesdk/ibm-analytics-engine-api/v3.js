"use strict";
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 3.38.0-07189efd-20210827-205025
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * Manage serverless Spark instances and run applications.
 *
 * API Version: 3.0.0
 */
var IbmAnalyticsEngineApiV3 = /** @class */ (function (_super) {
    __extends(IbmAnalyticsEngineApiV3, _super);
    /**
     * Construct a IbmAnalyticsEngineApiV3 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {IbmAnalyticsEngineApiV3}
     */
    function IbmAnalyticsEngineApiV3(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(IbmAnalyticsEngineApiV3.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of IbmAnalyticsEngineApiV3 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {IbmAnalyticsEngineApiV3}
     */
    IbmAnalyticsEngineApiV3.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        var service = new IbmAnalyticsEngineApiV3(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * analyticsEnginesV3
     ************************/
    /**
     * Find Analytics Engine by id.
     *
     * Retrieve the details of a single Analytics Engine instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - GUID of the Analytics Engine service instance to retrieve.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.Instance>>}
     */
    IbmAnalyticsEngineApiV3.prototype.getInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['instanceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'instance_id': _params.instanceId,
        };
        var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV3.DEFAULT_SERVICE_NAME, 'v3', 'getInstance');
        var parameters = {
            options: {
                url: '/v3/analytics_engines/{instance_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Deploy a Spark application.
     *
     * Deploys a Spark application on a given serverless Spark instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - The identifier of the instance where the Spark application is submitted.
     * @param {ApplicationRequestApplicationDetails} [params.applicationDetails] - Application details.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationResponse>>}
     */
    IbmAnalyticsEngineApiV3.prototype.createApplication = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['instanceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'application_details': _params.applicationDetails,
        };
        var path = {
            'instance_id': _params.instanceId,
        };
        var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV3.DEFAULT_SERVICE_NAME, 'v3', 'createApplication');
        var parameters = {
            options: {
                url: '/v3/analytics_engines/{instance_id}/spark_applications',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve all Spark applications.
     *
     * Gets all applications submitted in an instance with a specified inst_id.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - Identifier of the instance where the applications run.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationCollection>>}
     */
    IbmAnalyticsEngineApiV3.prototype.listApplications = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['instanceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'instance_id': _params.instanceId,
        };
        var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV3.DEFAULT_SERVICE_NAME, 'v3', 'listApplications');
        var parameters = {
            options: {
                url: '/v3/analytics_engines/{instance_id}/spark_applications',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve the details of a given Spark application.
     *
     * Gets the details of the given Spark application.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - Identifier of the instance to which the application belongs.
     * @param {string} params.applicationId - Identifier of the application for which details are requested.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationGetResponse>>}
     */
    IbmAnalyticsEngineApiV3.prototype.getApplication = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['instanceId', 'applicationId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'instance_id': _params.instanceId,
            'application_id': _params.applicationId,
        };
        var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV3.DEFAULT_SERVICE_NAME, 'v3', 'getApplication');
        var parameters = {
            options: {
                url: '/v3/analytics_engines/{instance_id}/spark_applications/{application_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Stop application.
     *
     * Stops a running application identified by the app_id identifier. This is an idempotent operation. Performs no
     * action if the requested application is already stopped or completed.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - Identifier of the instance to which the application belongs.
     * @param {string} params.applicationId - Identifier of the application that needs to be stopped.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.Empty>>}
     */
    IbmAnalyticsEngineApiV3.prototype.deleteApplication = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['instanceId', 'applicationId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'instance_id': _params.instanceId,
            'application_id': _params.applicationId,
        };
        var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV3.DEFAULT_SERVICE_NAME, 'v3', 'deleteApplication');
        var parameters = {
            options: {
                url: '/v3/analytics_engines/{instance_id}/spark_applications/{application_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get the status of the application.
     *
     * Returns the status of the given Spark application.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - Identifier of the instance to which the applications belongs.
     * @param {string} params.applicationId - Identifier of the application for which details are requested.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationGetStateResponse>>}
     */
    IbmAnalyticsEngineApiV3.prototype.getApplicationState = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['instanceId', 'applicationId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'instance_id': _params.instanceId,
            'application_id': _params.applicationId,
        };
        var sdkHeaders = common_1.getSdkHeaders(IbmAnalyticsEngineApiV3.DEFAULT_SERVICE_NAME, 'v3', 'getApplicationState');
        var parameters = {
            options: {
                url: '/v3/analytics_engines/{instance_id}/spark_applications/{application_id}/state',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    IbmAnalyticsEngineApiV3.DEFAULT_SERVICE_URL = 'https://api.us-south.ae.cloud.ibm.com';
    IbmAnalyticsEngineApiV3.DEFAULT_SERVICE_NAME = 'ibm_analytics_engine_api';
    return IbmAnalyticsEngineApiV3;
}(ibm_cloud_sdk_core_1.BaseService));
module.exports = IbmAnalyticsEngineApiV3;
//# sourceMappingURL=v3.js.map