# -*- coding: utf-8 -*-
# (C) Copyright IBM Corp. 2021.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Unit Tests for Schematics20ApiV2
"""

from datetime import datetime, timezone
from ibm_cloud_sdk_core.authenticators.no_auth_authenticator import NoAuthAuthenticator
import base64
import inspect
import io
import json
import pytest
import re
import requests
import responses
import tempfile
import urllib
from com.ibm.cloud.schematics_2_0_api_v2 import *


service = Schematics20ApiV2(
    authenticator=NoAuthAuthenticator()
    )

base_url = 'https://schematics-dev.containers.appdomain.cloud'
service.set_service_url(base_url)

##############################################################################
# Start of Service: Utils
##############################################################################
# region

class TestGetSchematicsInfo():
    """
    Test Class for get_schematics_info
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_schematics_info_all_params(self):
        """
        get_schematics_info()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/info')
        mock_response = '{"schematics_version": "schematics_version", "schematics_build": "schematics_build", "supported_locations": ["us-south"], "supported_templates": {"mapKey": ["terraform_v0_11"]}, "supported_runtimes": {"mapKey": [{"runtime_image": "runtime_image", "runtime_properties": {"mapKey": ["inner"]}}]}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.get_schematics_info()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestListSchematicsAccessRules():
    """
    Test Class for list_schematics_access_rules
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_schematics_access_rules_all_params(self):
        """
        list_schematics_access_rules()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/access')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "access_rules": [{"effect": "allow", "command_name": "workspace_plan", "command_parameter": "command_parameter", "principal": "principal", "origin": "workspaces"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_schematics_access_rules()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestGetSchematicsAccessRulesForResource():
    """
    Test Class for get_schematics_access_rules_for_resource
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_schematics_access_rules_for_resource_all_params(self):
        """
        get_schematics_access_rules_for_resource()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/access/testString')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "access_rules": [{"effect": "allow", "command_name": "workspace_plan", "command_parameter": "command_parameter", "principal": "principal", "origin": "workspaces"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        resource_name = 'testString'
        command_name = 'testString'
        command_parameter = 'testString'

        # Invoke method
        response = service.get_schematics_access_rules_for_resource(
            resource_name,
            command_name=command_name,
            command_parameter=command_parameter,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'command_name={}'.format(command_name) in query_string
        assert 'command_parameter={}'.format(command_parameter) in query_string


    @responses.activate
    def test_get_schematics_access_rules_for_resource_required_params(self):
        """
        test_get_schematics_access_rules_for_resource_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/access/testString')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "access_rules": [{"effect": "allow", "command_name": "workspace_plan", "command_parameter": "command_parameter", "principal": "principal", "origin": "workspaces"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        resource_name = 'testString'

        # Invoke method
        response = service.get_schematics_access_rules_for_resource(
            resource_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_schematics_access_rules_for_resource_value_error(self):
        """
        test_get_schematics_access_rules_for_resource_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/access/testString')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "access_rules": [{"effect": "allow", "command_name": "workspace_plan", "command_parameter": "command_parameter", "principal": "principal", "origin": "workspaces"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        resource_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "resource_name": resource_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_schematics_access_rules_for_resource(**req_copy)



class TestGetSchematicsCommandNames():
    """
    Test Class for get_schematics_command_names
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_schematics_command_names_all_params(self):
        """
        get_schematics_command_names()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/commands/testString')
        mock_response = '{"commands": [{"command_name": "workspace_plan", "command_parameter": "command_parameter"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        resource_name = 'testString'

        # Invoke method
        response = service.get_schematics_command_names(
            resource_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_schematics_command_names_value_error(self):
        """
        test_get_schematics_command_names_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/commands/testString')
        mock_response = '{"commands": [{"command_name": "workspace_plan", "command_parameter": "command_parameter"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        resource_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "resource_name": resource_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_schematics_command_names(**req_copy)



# endregion
##############################################################################
# End of Service: Utils
##############################################################################

##############################################################################
# Start of Service: Workspaces
##############################################################################
# region

class TestListWorkspaces():
    """
    Test Class for list_workspaces
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_workspaces_all_params(self):
        """
        list_workspaces()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "workspaces": [{"name": "name", "description": "description", "id": "id", "crn": "crn", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.list_workspaces(
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_list_workspaces_required_params(self):
        """
        test_list_workspaces_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "workspaces": [{"name": "name", "description": "description", "id": "id", "crn": "crn", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_workspaces()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateWorkspace():
    """
    Test Class for create_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_workspace_all_params(self):
        """
        create_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkspaceLiteState model
        workspace_lite_state_model = {}
        workspace_lite_state_model['status_code'] = 'normal'
        workspace_lite_state_model['status_message'] = 'testString'
        workspace_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Workspace model
        workspace_model = {}
        workspace_model['name'] = 'My Workspace'
        workspace_model['description'] = 'This workspace manages front-end micro service for production environment'
        workspace_model['resource_group'] = 'testString'
        workspace_model['tags'] = ['testString']
        workspace_model['destroy_resources_on_delete'] = True
        workspace_model['location'] = 'us-south'
        workspace_model['user_state'] = user_state_model
        workspace_model['command_parameter'] = 'testString'
        workspace_model['inputs'] = [variable_data_model]
        workspace_model['outputs'] = [variable_data_model]
        workspace_model['settings'] = [variable_data_model]
        workspace_model['state'] = workspace_lite_state_model
        workspace_model['sys_lock'] = system_lock_model
        workspace_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace = workspace_model

        # Invoke method
        response = service.create_workspace(
            workspace,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == workspace


    @responses.activate
    def test_create_workspace_value_error(self):
        """
        test_create_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkspaceLiteState model
        workspace_lite_state_model = {}
        workspace_lite_state_model['status_code'] = 'normal'
        workspace_lite_state_model['status_message'] = 'testString'
        workspace_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Workspace model
        workspace_model = {}
        workspace_model['name'] = 'My Workspace'
        workspace_model['description'] = 'This workspace manages front-end micro service for production environment'
        workspace_model['resource_group'] = 'testString'
        workspace_model['tags'] = ['testString']
        workspace_model['destroy_resources_on_delete'] = True
        workspace_model['location'] = 'us-south'
        workspace_model['user_state'] = user_state_model
        workspace_model['command_parameter'] = 'testString'
        workspace_model['inputs'] = [variable_data_model]
        workspace_model['outputs'] = [variable_data_model]
        workspace_model['settings'] = [variable_data_model]
        workspace_model['state'] = workspace_lite_state_model
        workspace_model['sys_lock'] = system_lock_model
        workspace_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace = workspace_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace": workspace,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_workspace(**req_copy)



class TestGetWorkspace():
    """
    Test Class for get_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_workspace_all_params(self):
        """
        get_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        profile = 'summary'

        # Invoke method
        response = service.get_workspace(
            workspace_id,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_get_workspace_required_params(self):
        """
        test_get_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'

        # Invoke method
        response = service.get_workspace(
            workspace_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_workspace_value_error(self):
        """
        test_get_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_workspace(**req_copy)



class TestReplaceWorkspace():
    """
    Test Class for replace_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_workspace_all_params(self):
        """
        replace_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkspaceLiteState model
        workspace_lite_state_model = {}
        workspace_lite_state_model['status_code'] = 'normal'
        workspace_lite_state_model['status_message'] = 'testString'
        workspace_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Workspace model
        workspace_model = {}
        workspace_model['name'] = 'My Workspace'
        workspace_model['description'] = 'This workspace manages front-end micro service for production environment'
        workspace_model['resource_group'] = 'testString'
        workspace_model['tags'] = ['testString']
        workspace_model['destroy_resources_on_delete'] = True
        workspace_model['location'] = 'us-south'
        workspace_model['user_state'] = user_state_model
        workspace_model['command_parameter'] = 'testString'
        workspace_model['inputs'] = [variable_data_model]
        workspace_model['outputs'] = [variable_data_model]
        workspace_model['settings'] = [variable_data_model]
        workspace_model['state'] = workspace_lite_state_model
        workspace_model['sys_lock'] = system_lock_model
        workspace_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        workspace = workspace_model

        # Invoke method
        response = service.replace_workspace(
            workspace_id,
            workspace,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == workspace


    @responses.activate
    def test_replace_workspace_value_error(self):
        """
        test_replace_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkspaceLiteState model
        workspace_lite_state_model = {}
        workspace_lite_state_model['status_code'] = 'normal'
        workspace_lite_state_model['status_message'] = 'testString'
        workspace_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Workspace model
        workspace_model = {}
        workspace_model['name'] = 'My Workspace'
        workspace_model['description'] = 'This workspace manages front-end micro service for production environment'
        workspace_model['resource_group'] = 'testString'
        workspace_model['tags'] = ['testString']
        workspace_model['destroy_resources_on_delete'] = True
        workspace_model['location'] = 'us-south'
        workspace_model['user_state'] = user_state_model
        workspace_model['command_parameter'] = 'testString'
        workspace_model['inputs'] = [variable_data_model]
        workspace_model['outputs'] = [variable_data_model]
        workspace_model['settings'] = [variable_data_model]
        workspace_model['state'] = workspace_lite_state_model
        workspace_model['sys_lock'] = system_lock_model
        workspace_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        workspace = workspace_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "workspace": workspace,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_workspace(**req_copy)



class TestDeleteWorkspace():
    """
    Test Class for delete_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_workspace_all_params(self):
        """
        delete_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        workspace_id = 'testString'
        force = True
        propagate = True

        # Invoke method
        response = service.delete_workspace(
            workspace_id,
            force=force,
            propagate=propagate,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_workspace_required_params(self):
        """
        test_delete_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        workspace_id = 'testString'

        # Invoke method
        response = service.delete_workspace(
            workspace_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_workspace_value_error(self):
        """
        test_delete_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        workspace_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_workspace(**req_copy)



class TestUpdateWorkspace():
    """
    Test Class for update_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_workspace_all_params(self):
        """
        update_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkspaceLiteState model
        workspace_lite_state_model = {}
        workspace_lite_state_model['status_code'] = 'normal'
        workspace_lite_state_model['status_message'] = 'testString'
        workspace_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Workspace model
        workspace_model = {}
        workspace_model['name'] = 'My Workspace'
        workspace_model['description'] = 'This workspace manages front-end micro service for production environment'
        workspace_model['resource_group'] = 'testString'
        workspace_model['tags'] = ['testString']
        workspace_model['destroy_resources_on_delete'] = True
        workspace_model['location'] = 'us-south'
        workspace_model['user_state'] = user_state_model
        workspace_model['command_parameter'] = 'testString'
        workspace_model['inputs'] = [variable_data_model]
        workspace_model['outputs'] = [variable_data_model]
        workspace_model['settings'] = [variable_data_model]
        workspace_model['state'] = workspace_lite_state_model
        workspace_model['sys_lock'] = system_lock_model
        workspace_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        workspace = workspace_model

        # Invoke method
        response = service.update_workspace(
            workspace_id,
            workspace,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == workspace


    @responses.activate
    def test_update_workspace_value_error(self):
        """
        test_update_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkspaceLiteState model
        workspace_lite_state_model = {}
        workspace_lite_state_model['status_code'] = 'normal'
        workspace_lite_state_model['status_message'] = 'testString'
        workspace_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Workspace model
        workspace_model = {}
        workspace_model['name'] = 'My Workspace'
        workspace_model['description'] = 'This workspace manages front-end micro service for production environment'
        workspace_model['resource_group'] = 'testString'
        workspace_model['tags'] = ['testString']
        workspace_model['destroy_resources_on_delete'] = True
        workspace_model['location'] = 'us-south'
        workspace_model['user_state'] = user_state_model
        workspace_model['command_parameter'] = 'testString'
        workspace_model['inputs'] = [variable_data_model]
        workspace_model['outputs'] = [variable_data_model]
        workspace_model['settings'] = [variable_data_model]
        workspace_model['state'] = workspace_lite_state_model
        workspace_model['sys_lock'] = system_lock_model
        workspace_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        workspace = workspace_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "workspace": workspace,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_workspace(**req_copy)



class TestListWorkspaceInputs():
    """
    Test Class for list_workspace_inputs
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_workspace_inputs_all_params(self):
        """
        list_workspace_inputs()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/inputs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.list_workspace_inputs(
            workspace_id,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_list_workspace_inputs_required_params(self):
        """
        test_list_workspace_inputs_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/inputs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'

        # Invoke method
        response = service.list_workspace_inputs(
            workspace_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_workspace_inputs_value_error(self):
        """
        test_list_workspace_inputs_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/inputs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_workspace_inputs(**req_copy)



class TestListWorkspaceOutputs():
    """
    Test Class for list_workspace_outputs
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_workspace_outputs_all_params(self):
        """
        list_workspace_outputs()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/outputs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.list_workspace_outputs(
            workspace_id,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_list_workspace_outputs_required_params(self):
        """
        test_list_workspace_outputs_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/outputs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'

        # Invoke method
        response = service.list_workspace_outputs(
            workspace_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_workspace_outputs_value_error(self):
        """
        test_list_workspace_outputs_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/outputs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_workspace_outputs(**req_copy)



# endregion
##############################################################################
# End of Service: Workspaces
##############################################################################

##############################################################################
# Start of Service: WorkspaceTemplate
##############################################################################
# region

class TestCreateWorkspaceTemplates():
    """
    Test Class for create_workspace_templates
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_workspace_templates_all_params(self):
        """
        create_workspace_templates()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/templates')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Template model
        template_model = {}
        template_model['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_model['description'] = 'This template provisions clusters in production environment'
        template_model['type'] = 'testString'
        template_model['user_state'] = user_state_model
        template_model['source_type'] = 'local'
        template_model['source'] = external_source_model
        template_model['source_readme_url'] = 'testString'
        template_model['inputs'] = [variable_data_model]
        template_model['outputs'] = [variable_data_model]
        template_model['settings'] = [variable_data_model]
        template_model['inventory'] = 'testString'
        template_model['status'] = job_status_template_model
        template_model['sys_lock'] = system_lock_model
        template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateListRequest model
        template_list_request_model = {}
        template_list_request_model['templates'] = [template_model]
        template_list_request_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        template_list_request = template_list_request_model
        x_github_token = 'testString'

        # Invoke method
        response = service.create_workspace_templates(
            template_list_request,
            x_github_token=x_github_token,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == template_list_request


    @responses.activate
    def test_create_workspace_templates_required_params(self):
        """
        test_create_workspace_templates_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/templates')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Template model
        template_model = {}
        template_model['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_model['description'] = 'This template provisions clusters in production environment'
        template_model['type'] = 'testString'
        template_model['user_state'] = user_state_model
        template_model['source_type'] = 'local'
        template_model['source'] = external_source_model
        template_model['source_readme_url'] = 'testString'
        template_model['inputs'] = [variable_data_model]
        template_model['outputs'] = [variable_data_model]
        template_model['settings'] = [variable_data_model]
        template_model['inventory'] = 'testString'
        template_model['status'] = job_status_template_model
        template_model['sys_lock'] = system_lock_model
        template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateListRequest model
        template_list_request_model = {}
        template_list_request_model['templates'] = [template_model]
        template_list_request_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        template_list_request = template_list_request_model

        # Invoke method
        response = service.create_workspace_templates(
            template_list_request,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == template_list_request


    @responses.activate
    def test_create_workspace_templates_value_error(self):
        """
        test_create_workspace_templates_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/templates')
        mock_response = '{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "resource_group", "tags": ["tags"], "destroy_resources_on_delete": false, "location": "us-south", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "command_parameter", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Template model
        template_model = {}
        template_model['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_model['description'] = 'This template provisions clusters in production environment'
        template_model['type'] = 'testString'
        template_model['user_state'] = user_state_model
        template_model['source_type'] = 'local'
        template_model['source'] = external_source_model
        template_model['source_readme_url'] = 'testString'
        template_model['inputs'] = [variable_data_model]
        template_model['outputs'] = [variable_data_model]
        template_model['settings'] = [variable_data_model]
        template_model['inventory'] = 'testString'
        template_model['status'] = job_status_template_model
        template_model['sys_lock'] = system_lock_model
        template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateListRequest model
        template_list_request_model = {}
        template_list_request_model['templates'] = [template_model]
        template_list_request_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        template_list_request = template_list_request_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "template_list_request": template_list_request,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_workspace_templates(**req_copy)



class TestListTemplatesInWorkspace():
    """
    Test Class for list_templates_in_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_templates_in_workspace_all_params(self):
        """
        list_templates_in_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "templates": [{"id": "id", "name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.list_templates_in_workspace(
            workspace_id,
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_list_templates_in_workspace_required_params(self):
        """
        test_list_templates_in_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "templates": [{"id": "id", "name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'

        # Invoke method
        response = service.list_templates_in_workspace(
            workspace_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_templates_in_workspace_value_error(self):
        """
        test_list_templates_in_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "templates": [{"id": "id", "name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_templates_in_workspace(**req_copy)



class TestAddTemplatesToWorkspace():
    """
    Test Class for add_templates_to_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_add_templates_to_workspace_all_params(self):
        """
        add_templates_to_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Template model
        template_model = {}
        template_model['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_model['description'] = 'This template provisions clusters in production environment'
        template_model['type'] = 'testString'
        template_model['user_state'] = user_state_model
        template_model['source_type'] = 'local'
        template_model['source'] = external_source_model
        template_model['source_readme_url'] = 'testString'
        template_model['inputs'] = [variable_data_model]
        template_model['outputs'] = [variable_data_model]
        template_model['settings'] = [variable_data_model]
        template_model['inventory'] = 'testString'
        template_model['status'] = job_status_template_model
        template_model['sys_lock'] = system_lock_model
        template_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        template = template_model
        x_github_token = 'testString'

        # Invoke method
        response = service.add_templates_to_workspace(
            workspace_id,
            template,
            x_github_token=x_github_token,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == template


    @responses.activate
    def test_add_templates_to_workspace_required_params(self):
        """
        test_add_templates_to_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Template model
        template_model = {}
        template_model['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_model['description'] = 'This template provisions clusters in production environment'
        template_model['type'] = 'testString'
        template_model['user_state'] = user_state_model
        template_model['source_type'] = 'local'
        template_model['source'] = external_source_model
        template_model['source_readme_url'] = 'testString'
        template_model['inputs'] = [variable_data_model]
        template_model['outputs'] = [variable_data_model]
        template_model['settings'] = [variable_data_model]
        template_model['inventory'] = 'testString'
        template_model['status'] = job_status_template_model
        template_model['sys_lock'] = system_lock_model
        template_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        template = template_model

        # Invoke method
        response = service.add_templates_to_workspace(
            workspace_id,
            template,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == template


    @responses.activate
    def test_add_templates_to_workspace_value_error(self):
        """
        test_add_templates_to_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Template model
        template_model = {}
        template_model['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_model['description'] = 'This template provisions clusters in production environment'
        template_model['type'] = 'testString'
        template_model['user_state'] = user_state_model
        template_model['source_type'] = 'local'
        template_model['source'] = external_source_model
        template_model['source_readme_url'] = 'testString'
        template_model['inputs'] = [variable_data_model]
        template_model['outputs'] = [variable_data_model]
        template_model['settings'] = [variable_data_model]
        template_model['inventory'] = 'testString'
        template_model['status'] = job_status_template_model
        template_model['sys_lock'] = system_lock_model
        template_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        template = template_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template": template,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.add_templates_to_workspace(**req_copy)



class TestGetTemplateInWorkspace():
    """
    Test Class for get_template_in_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_template_in_workspace_all_params(self):
        """
        get_template_in_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        profile = 'summary'

        # Invoke method
        response = service.get_template_in_workspace(
            workspace_id,
            template_id,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_get_template_in_workspace_required_params(self):
        """
        test_get_template_in_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Invoke method
        response = service.get_template_in_workspace(
            workspace_id,
            template_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_template_in_workspace_value_error(self):
        """
        test_get_template_in_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_template_in_workspace(**req_copy)



class TestReplaceTemplateInWorkspace():
    """
    Test Class for replace_template_in_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_template_in_workspace_all_params(self):
        """
        replace_template_in_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Template model
        template_model = {}
        template_model['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_model['description'] = 'This template provisions clusters in production environment'
        template_model['type'] = 'testString'
        template_model['user_state'] = user_state_model
        template_model['source_type'] = 'local'
        template_model['source'] = external_source_model
        template_model['source_readme_url'] = 'testString'
        template_model['inputs'] = [variable_data_model]
        template_model['outputs'] = [variable_data_model]
        template_model['settings'] = [variable_data_model]
        template_model['inventory'] = 'testString'
        template_model['status'] = job_status_template_model
        template_model['sys_lock'] = system_lock_model
        template_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        template = template_model
        x_github_token = 'testString'

        # Invoke method
        response = service.replace_template_in_workspace(
            workspace_id,
            template_id,
            template=template,
            x_github_token=x_github_token,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == template


    @responses.activate
    def test_replace_template_in_workspace_required_params(self):
        """
        test_replace_template_in_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Invoke method
        response = service.replace_template_in_workspace(
            workspace_id,
            template_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_replace_template_in_workspace_value_error(self):
        """
        test_replace_template_in_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_template_in_workspace(**req_copy)



class TestDeleteTemplateFromWorkspace():
    """
    Test Class for delete_template_from_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_template_from_workspace_all_params(self):
        """
        delete_template_from_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        force = True
        propagate = True

        # Invoke method
        response = service.delete_template_from_workspace(
            workspace_id,
            template_id,
            force=force,
            propagate=propagate,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_template_from_workspace_required_params(self):
        """
        test_delete_template_from_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Invoke method
        response = service.delete_template_from_workspace(
            workspace_id,
            template_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_template_from_workspace_value_error(self):
        """
        test_delete_template_from_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_template_from_workspace(**req_copy)



class TestUpdateTemplateInWorkspace():
    """
    Test Class for update_template_in_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_template_in_workspace_all_params(self):
        """
        update_template_in_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Template model
        template_model = {}
        template_model['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_model['description'] = 'This template provisions clusters in production environment'
        template_model['type'] = 'testString'
        template_model['user_state'] = user_state_model
        template_model['source_type'] = 'local'
        template_model['source'] = external_source_model
        template_model['source_readme_url'] = 'testString'
        template_model['inputs'] = [variable_data_model]
        template_model['outputs'] = [variable_data_model]
        template_model['settings'] = [variable_data_model]
        template_model['inventory'] = 'testString'
        template_model['status'] = job_status_template_model
        template_model['sys_lock'] = system_lock_model
        template_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        template = template_model
        x_github_token = 'testString'

        # Invoke method
        response = service.update_template_in_workspace(
            workspace_id,
            template_id,
            template=template,
            x_github_token=x_github_token,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == template


    @responses.activate
    def test_update_template_in_workspace_required_params(self):
        """
        test_update_template_in_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Invoke method
        response = service.update_template_in_workspace(
            workspace_id,
            template_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_update_template_in_workspace_value_error(self):
        """
        test_update_template_in_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_template_in_workspace(**req_copy)



class TestUploadTemplateTarInWorkspace():
    """
    Test Class for upload_template_tar_in_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_upload_template_tar_in_workspace_all_params(self):
        """
        upload_template_tar_in_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/content')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        tar_file = io.BytesIO(b'This is a mock file.').getvalue()
        tar_file_content_type = 'testString'
        x_github_token = 'testString'

        # Invoke method
        response = service.upload_template_tar_in_workspace(
            workspace_id,
            template_id,
            tar_file=tar_file,
            tar_file_content_type=tar_file_content_type,
            x_github_token=x_github_token,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_upload_template_tar_in_workspace_required_params(self):
        """
        test_upload_template_tar_in_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/content')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Invoke method
        response = service.upload_template_tar_in_workspace(
            workspace_id,
            template_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_upload_template_tar_in_workspace_value_error(self):
        """
        test_upload_template_tar_in_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/content')
        mock_response = '{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_readme_url": "source_readme_url", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "inventory": "inventory", "id": "id", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.upload_template_tar_in_workspace(**req_copy)



class TestGetTemplateReadme():
    """
    Test Class for get_template_readme
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_template_readme_all_params(self):
        """
        get_template_readme()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/readme')
        mock_response = '"operation_response"'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='text/markdown',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        accept = 'text/markdown'

        # Invoke method
        response = service.get_template_readme(
            workspace_id,
            template_id,
            accept=accept,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_template_readme_required_params(self):
        """
        test_get_template_readme_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/readme')
        mock_response = '"operation_response"'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='text/markdown',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Invoke method
        response = service.get_template_readme(
            workspace_id,
            template_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_template_readme_value_error(self):
        """
        test_get_template_readme_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/readme')
        mock_response = '"operation_response"'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='text/markdown',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_template_readme(**req_copy)



class TestGetTemplateSource():
    """
    Test Class for get_template_source
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_template_source_all_params(self):
        """
        get_template_source()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/source')
        mock_response = '{"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Invoke method
        response = service.get_template_source(
            workspace_id,
            template_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_template_source_value_error(self):
        """
        test_get_template_source_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/source')
        mock_response = '{"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_template_source(**req_copy)



class TestListTemplateInputs():
    """
    Test Class for list_template_inputs
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_template_inputs_all_params(self):
        """
        list_template_inputs()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/inputs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "variables": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Invoke method
        response = service.list_template_inputs(
            workspace_id,
            template_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_template_inputs_value_error(self):
        """
        test_list_template_inputs_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/inputs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "variables": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_template_inputs(**req_copy)



class TestListTemplateOutputs():
    """
    Test Class for list_template_outputs
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_template_outputs_all_params(self):
        """
        list_template_outputs()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/outputs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "variables": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Invoke method
        response = service.list_template_outputs(
            workspace_id,
            template_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_template_outputs_value_error(self):
        """
        test_list_template_outputs_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/outputs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "variables": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_template_outputs(**req_copy)



# endregion
##############################################################################
# End of Service: WorkspaceTemplate
##############################################################################

##############################################################################
# Start of Service: WorkspaceFlows
##############################################################################
# region

class TestListFlowsInWorkspace():
    """
    Test Class for list_flows_in_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_flows_in_workspace_all_params(self):
        """
        list_flows_in_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "flows": [{"id": "id", "name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.list_flows_in_workspace(
            workspace_id,
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_list_flows_in_workspace_required_params(self):
        """
        test_list_flows_in_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "flows": [{"id": "id", "name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'

        # Invoke method
        response = service.list_flows_in_workspace(
            workspace_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_flows_in_workspace_value_error(self):
        """
        test_list_flows_in_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "flows": [{"id": "id", "name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_flows_in_workspace(**req_copy)



class TestAddFlowToWorkspace():
    """
    Test Class for add_flow_to_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_add_flow_to_workspace_all_params(self):
        """
        add_flow_to_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows')
        mock_response = '{"name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "id", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "pre_condition", "template_id": "template_id", "override_command": {"command": "workspace_plan", "command_options": ["command_options"]}, "post_condition": "post_condition", "on_error": "on_error"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "id", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 13, "error_count": 11}, "validation_logs": [{"flow_index": 10, "inputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}], "outputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}]}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateCommand model
        template_command_model = {}
        template_command_model['command'] = 'workspace_plan'
        template_command_model['command_options'] = ['testString']
        template_command_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinitionTemplateOperation model
        template_flow_definition_template_operation_model = {}
        template_flow_definition_template_operation_model['pre_condition'] = 'testString'
        template_flow_definition_template_operation_model['template_id'] = 'testString'
        template_flow_definition_template_operation_model['override_command'] = template_command_model
        template_flow_definition_template_operation_model['post_condition'] = 'testString'
        template_flow_definition_template_operation_model['on_error'] = 'testString'
        template_flow_definition_template_operation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinitionSimpleFlow model
        template_flow_definition_simple_flow_model = {}
        template_flow_definition_simple_flow_model['index'] = 38
        template_flow_definition_simple_flow_model['control'] = 'do'
        template_flow_definition_simple_flow_model['template_operation'] = template_flow_definition_template_operation_model
        template_flow_definition_simple_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinition model
        template_flow_definition_model = {}
        template_flow_definition_model['flow_type'] = 'simple'
        template_flow_definition_model['id'] = 'testString'
        template_flow_definition_model['simple_flow'] = [template_flow_definition_simple_flow_model]
        template_flow_definition_model['custom_flow'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        template_flow_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspaceTemplateFlow model
        job_status_workspace_template_flow_model = {}
        job_status_workspace_template_flow_model['flow_id'] = 'testString'
        job_status_workspace_template_flow_model['flow_name'] = 'testString'
        job_status_workspace_template_flow_model['status_code'] = 'job_pending'
        job_status_workspace_template_flow_model['status_message'] = 'testString'
        job_status_workspace_template_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_template_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowValidationSummary model
        template_flow_validation_summary_model = {}
        template_flow_validation_summary_model['warning_count'] = 72.5
        template_flow_validation_summary_model['error_count'] = 72.5
        template_flow_validation_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlow model
        template_flow_model = {}
        template_flow_model['name'] = 'testString'
        template_flow_model['version'] = 'testString'
        template_flow_model['type'] = 'simple_flow'
        template_flow_model['user_state'] = user_state_model
        template_flow_model['definition'] = template_flow_definition_model
        template_flow_model['sys_lock'] = system_lock_model
        template_flow_model['status'] = job_status_workspace_template_flow_model
        template_flow_model['validation_summary'] = template_flow_validation_summary_model
        template_flow_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        template_flow = template_flow_model

        # Invoke method
        response = service.add_flow_to_workspace(
            workspace_id,
            template_flow,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == template_flow


    @responses.activate
    def test_add_flow_to_workspace_value_error(self):
        """
        test_add_flow_to_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows')
        mock_response = '{"name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "id", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "pre_condition", "template_id": "template_id", "override_command": {"command": "workspace_plan", "command_options": ["command_options"]}, "post_condition": "post_condition", "on_error": "on_error"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "id", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 13, "error_count": 11}, "validation_logs": [{"flow_index": 10, "inputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}], "outputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}]}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateCommand model
        template_command_model = {}
        template_command_model['command'] = 'workspace_plan'
        template_command_model['command_options'] = ['testString']
        template_command_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinitionTemplateOperation model
        template_flow_definition_template_operation_model = {}
        template_flow_definition_template_operation_model['pre_condition'] = 'testString'
        template_flow_definition_template_operation_model['template_id'] = 'testString'
        template_flow_definition_template_operation_model['override_command'] = template_command_model
        template_flow_definition_template_operation_model['post_condition'] = 'testString'
        template_flow_definition_template_operation_model['on_error'] = 'testString'
        template_flow_definition_template_operation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinitionSimpleFlow model
        template_flow_definition_simple_flow_model = {}
        template_flow_definition_simple_flow_model['index'] = 38
        template_flow_definition_simple_flow_model['control'] = 'do'
        template_flow_definition_simple_flow_model['template_operation'] = template_flow_definition_template_operation_model
        template_flow_definition_simple_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinition model
        template_flow_definition_model = {}
        template_flow_definition_model['flow_type'] = 'simple'
        template_flow_definition_model['id'] = 'testString'
        template_flow_definition_model['simple_flow'] = [template_flow_definition_simple_flow_model]
        template_flow_definition_model['custom_flow'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        template_flow_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspaceTemplateFlow model
        job_status_workspace_template_flow_model = {}
        job_status_workspace_template_flow_model['flow_id'] = 'testString'
        job_status_workspace_template_flow_model['flow_name'] = 'testString'
        job_status_workspace_template_flow_model['status_code'] = 'job_pending'
        job_status_workspace_template_flow_model['status_message'] = 'testString'
        job_status_workspace_template_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_template_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowValidationSummary model
        template_flow_validation_summary_model = {}
        template_flow_validation_summary_model['warning_count'] = 72.5
        template_flow_validation_summary_model['error_count'] = 72.5
        template_flow_validation_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlow model
        template_flow_model = {}
        template_flow_model['name'] = 'testString'
        template_flow_model['version'] = 'testString'
        template_flow_model['type'] = 'simple_flow'
        template_flow_model['user_state'] = user_state_model
        template_flow_model['definition'] = template_flow_definition_model
        template_flow_model['sys_lock'] = system_lock_model
        template_flow_model['status'] = job_status_workspace_template_flow_model
        template_flow_model['validation_summary'] = template_flow_validation_summary_model
        template_flow_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        template_flow = template_flow_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_flow": template_flow,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.add_flow_to_workspace(**req_copy)



class TestGetFlowInWorkspace():
    """
    Test Class for get_flow_in_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_flow_in_workspace_all_params(self):
        """
        get_flow_in_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        mock_response = '{"name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "id", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "pre_condition", "template_id": "template_id", "override_command": {"command": "workspace_plan", "command_options": ["command_options"]}, "post_condition": "post_condition", "on_error": "on_error"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "id", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 13, "error_count": 11}, "validation_logs": [{"flow_index": 10, "inputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}], "outputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'
        profile = 'summary'

        # Invoke method
        response = service.get_flow_in_workspace(
            workspace_id,
            flow_id,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_get_flow_in_workspace_required_params(self):
        """
        test_get_flow_in_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        mock_response = '{"name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "id", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "pre_condition", "template_id": "template_id", "override_command": {"command": "workspace_plan", "command_options": ["command_options"]}, "post_condition": "post_condition", "on_error": "on_error"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "id", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 13, "error_count": 11}, "validation_logs": [{"flow_index": 10, "inputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}], "outputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'

        # Invoke method
        response = service.get_flow_in_workspace(
            workspace_id,
            flow_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_flow_in_workspace_value_error(self):
        """
        test_get_flow_in_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        mock_response = '{"name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "id", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "pre_condition", "template_id": "template_id", "override_command": {"command": "workspace_plan", "command_options": ["command_options"]}, "post_condition": "post_condition", "on_error": "on_error"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "id", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 13, "error_count": 11}, "validation_logs": [{"flow_index": 10, "inputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}], "outputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "flow_id": flow_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_flow_in_workspace(**req_copy)



class TestReplaceFlowInWorkspace():
    """
    Test Class for replace_flow_in_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_flow_in_workspace_all_params(self):
        """
        replace_flow_in_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        mock_response = '{"name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "id", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "pre_condition", "template_id": "template_id", "override_command": {"command": "workspace_plan", "command_options": ["command_options"]}, "post_condition": "post_condition", "on_error": "on_error"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "id", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 13, "error_count": 11}, "validation_logs": [{"flow_index": 10, "inputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}], "outputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}]}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateCommand model
        template_command_model = {}
        template_command_model['command'] = 'workspace_plan'
        template_command_model['command_options'] = ['testString']
        template_command_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinitionTemplateOperation model
        template_flow_definition_template_operation_model = {}
        template_flow_definition_template_operation_model['pre_condition'] = 'testString'
        template_flow_definition_template_operation_model['template_id'] = 'testString'
        template_flow_definition_template_operation_model['override_command'] = template_command_model
        template_flow_definition_template_operation_model['post_condition'] = 'testString'
        template_flow_definition_template_operation_model['on_error'] = 'testString'
        template_flow_definition_template_operation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinitionSimpleFlow model
        template_flow_definition_simple_flow_model = {}
        template_flow_definition_simple_flow_model['index'] = 38
        template_flow_definition_simple_flow_model['control'] = 'do'
        template_flow_definition_simple_flow_model['template_operation'] = template_flow_definition_template_operation_model
        template_flow_definition_simple_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinition model
        template_flow_definition_model = {}
        template_flow_definition_model['flow_type'] = 'simple'
        template_flow_definition_model['id'] = 'testString'
        template_flow_definition_model['simple_flow'] = [template_flow_definition_simple_flow_model]
        template_flow_definition_model['custom_flow'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        template_flow_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspaceTemplateFlow model
        job_status_workspace_template_flow_model = {}
        job_status_workspace_template_flow_model['flow_id'] = 'testString'
        job_status_workspace_template_flow_model['flow_name'] = 'testString'
        job_status_workspace_template_flow_model['status_code'] = 'job_pending'
        job_status_workspace_template_flow_model['status_message'] = 'testString'
        job_status_workspace_template_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_template_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowValidationSummary model
        template_flow_validation_summary_model = {}
        template_flow_validation_summary_model['warning_count'] = 72.5
        template_flow_validation_summary_model['error_count'] = 72.5
        template_flow_validation_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlow model
        template_flow_model = {}
        template_flow_model['name'] = 'testString'
        template_flow_model['version'] = 'testString'
        template_flow_model['type'] = 'simple_flow'
        template_flow_model['user_state'] = user_state_model
        template_flow_model['definition'] = template_flow_definition_model
        template_flow_model['sys_lock'] = system_lock_model
        template_flow_model['status'] = job_status_workspace_template_flow_model
        template_flow_model['validation_summary'] = template_flow_validation_summary_model
        template_flow_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'
        template_flow = template_flow_model

        # Invoke method
        response = service.replace_flow_in_workspace(
            workspace_id,
            flow_id,
            template_flow=template_flow,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == template_flow


    @responses.activate
    def test_replace_flow_in_workspace_required_params(self):
        """
        test_replace_flow_in_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        mock_response = '{"name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "id", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "pre_condition", "template_id": "template_id", "override_command": {"command": "workspace_plan", "command_options": ["command_options"]}, "post_condition": "post_condition", "on_error": "on_error"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "id", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 13, "error_count": 11}, "validation_logs": [{"flow_index": 10, "inputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}], "outputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}]}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'

        # Invoke method
        response = service.replace_flow_in_workspace(
            workspace_id,
            flow_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_replace_flow_in_workspace_value_error(self):
        """
        test_replace_flow_in_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        mock_response = '{"name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "id", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "pre_condition", "template_id": "template_id", "override_command": {"command": "workspace_plan", "command_options": ["command_options"]}, "post_condition": "post_condition", "on_error": "on_error"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "id", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 13, "error_count": 11}, "validation_logs": [{"flow_index": 10, "inputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}], "outputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}]}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "flow_id": flow_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_flow_in_workspace(**req_copy)



class TestDeleteFlowFromWorkspace():
    """
    Test Class for delete_flow_from_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_flow_from_workspace_all_params(self):
        """
        delete_flow_from_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'
        propagate = True
        force = True

        # Invoke method
        response = service.delete_flow_from_workspace(
            workspace_id,
            flow_id,
            propagate=propagate,
            force=force,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_flow_from_workspace_required_params(self):
        """
        test_delete_flow_from_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'

        # Invoke method
        response = service.delete_flow_from_workspace(
            workspace_id,
            flow_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_flow_from_workspace_value_error(self):
        """
        test_delete_flow_from_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "flow_id": flow_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_flow_from_workspace(**req_copy)



class TestUpdateFlowInWorkspace():
    """
    Test Class for update_flow_in_workspace
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_flow_in_workspace_all_params(self):
        """
        update_flow_in_workspace()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        mock_response = '{"name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "id", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "pre_condition", "template_id": "template_id", "override_command": {"command": "workspace_plan", "command_options": ["command_options"]}, "post_condition": "post_condition", "on_error": "on_error"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "id", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 13, "error_count": 11}, "validation_logs": [{"flow_index": 10, "inputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}], "outputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}]}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateCommand model
        template_command_model = {}
        template_command_model['command'] = 'workspace_plan'
        template_command_model['command_options'] = ['testString']
        template_command_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinitionTemplateOperation model
        template_flow_definition_template_operation_model = {}
        template_flow_definition_template_operation_model['pre_condition'] = 'testString'
        template_flow_definition_template_operation_model['template_id'] = 'testString'
        template_flow_definition_template_operation_model['override_command'] = template_command_model
        template_flow_definition_template_operation_model['post_condition'] = 'testString'
        template_flow_definition_template_operation_model['on_error'] = 'testString'
        template_flow_definition_template_operation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinitionSimpleFlow model
        template_flow_definition_simple_flow_model = {}
        template_flow_definition_simple_flow_model['index'] = 38
        template_flow_definition_simple_flow_model['control'] = 'do'
        template_flow_definition_simple_flow_model['template_operation'] = template_flow_definition_template_operation_model
        template_flow_definition_simple_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowDefinition model
        template_flow_definition_model = {}
        template_flow_definition_model['flow_type'] = 'simple'
        template_flow_definition_model['id'] = 'testString'
        template_flow_definition_model['simple_flow'] = [template_flow_definition_simple_flow_model]
        template_flow_definition_model['custom_flow'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        template_flow_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspaceTemplateFlow model
        job_status_workspace_template_flow_model = {}
        job_status_workspace_template_flow_model['flow_id'] = 'testString'
        job_status_workspace_template_flow_model['flow_name'] = 'testString'
        job_status_workspace_template_flow_model['status_code'] = 'job_pending'
        job_status_workspace_template_flow_model['status_message'] = 'testString'
        job_status_workspace_template_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_template_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlowValidationSummary model
        template_flow_validation_summary_model = {}
        template_flow_validation_summary_model['warning_count'] = 72.5
        template_flow_validation_summary_model['error_count'] = 72.5
        template_flow_validation_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateFlow model
        template_flow_model = {}
        template_flow_model['name'] = 'testString'
        template_flow_model['version'] = 'testString'
        template_flow_model['type'] = 'simple_flow'
        template_flow_model['user_state'] = user_state_model
        template_flow_model['definition'] = template_flow_definition_model
        template_flow_model['sys_lock'] = system_lock_model
        template_flow_model['status'] = job_status_workspace_template_flow_model
        template_flow_model['validation_summary'] = template_flow_validation_summary_model
        template_flow_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'
        template_flow = template_flow_model

        # Invoke method
        response = service.update_flow_in_workspace(
            workspace_id,
            flow_id,
            template_flow=template_flow,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == template_flow


    @responses.activate
    def test_update_flow_in_workspace_required_params(self):
        """
        test_update_flow_in_workspace_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        mock_response = '{"name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "id", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "pre_condition", "template_id": "template_id", "override_command": {"command": "workspace_plan", "command_options": ["command_options"]}, "post_condition": "post_condition", "on_error": "on_error"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "id", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 13, "error_count": 11}, "validation_logs": [{"flow_index": 10, "inputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}], "outputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}]}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'

        # Invoke method
        response = service.update_flow_in_workspace(
            workspace_id,
            flow_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_update_flow_in_workspace_value_error(self):
        """
        test_update_flow_in_workspace_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/flows/testString')
        mock_response = '{"name": "name", "version": "version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "id", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "pre_condition", "template_id": "template_id", "override_command": {"command": "workspace_plan", "command_options": ["command_options"]}, "post_condition": "post_condition", "on_error": "on_error"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "id", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 13, "error_count": 11}, "validation_logs": [{"flow_index": 10, "inputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}], "outputs_status": [{"log_level": "info", "var_name": "var_name", "var_status": "var_status"}]}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        flow_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "flow_id": flow_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_flow_in_workspace(**req_copy)



# endregion
##############################################################################
# End of Service: WorkspaceFlows
##############################################################################

##############################################################################
# Start of Service: Actions
##############################################################################
# region

class TestListActions():
    """
    Test Class for list_actions
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_actions_all_params(self):
        """
        list_actions()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "actions": [{"name": "Stop Action", "description": "This Action can be used to Stop the targets", "id": "id", "crn": "crn", "location": "us-south", "resource_group": "resource_group", "namespace": "namespace", "tags": ["tags"], "playbook_name": "playbook_name", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.list_actions(
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_list_actions_required_params(self):
        """
        test_list_actions_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "actions": [{"name": "Stop Action", "description": "This Action can be used to Stop the targets", "id": "id", "crn": "crn", "location": "us-south", "resource_group": "resource_group", "namespace": "namespace", "tags": ["tags"], "playbook_name": "playbook_name", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_actions()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateAction():
    """
    Test Class for create_action
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_action_all_params(self):
        """
        create_action()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions')
        mock_response = '{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "command_parameter": "command_parameter", "inventory": "inventory", "credentials": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "bastion": {"name": "name", "host": "host"}, "bastion_credential": {"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}, "targets_ini": "targets_ini", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_job_id": "status_job_id", "status_message": "status_message"}, "playbook_names": ["playbook_names"], "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ActionState model
        action_state_model = {}
        action_state_model['status_code'] = 'normal'
        action_state_model['status_job_id'] = 'testString'
        action_state_model['status_message'] = 'testString'
        action_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Action model
        action_model = {}
        action_model['name'] = 'Stop Action'
        action_model['description'] = 'The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.'
        action_model['location'] = 'us-south'
        action_model['resource_group'] = 'testString'
        action_model['tags'] = ['testString']
        action_model['user_state'] = user_state_model
        action_model['source_readme_url'] = 'testString'
        action_model['source'] = external_source_model
        action_model['source_type'] = 'local'
        action_model['command_parameter'] = 'testString'
        action_model['inventory'] = 'testString'
        action_model['credentials'] = [variable_data_model]
        action_model['bastion'] = bastion_resource_definition_model
        action_model['bastion_credential'] = variable_data_model
        action_model['targets_ini'] = 'testString'
        action_model['inputs'] = [variable_data_model]
        action_model['outputs'] = [variable_data_model]
        action_model['settings'] = [variable_data_model]
        action_model['state'] = action_state_model
        action_model['sys_lock'] = system_lock_model
        action_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        action = action_model
        x_github_token = 'testString'

        # Invoke method
        response = service.create_action(
            action,
            x_github_token=x_github_token,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == action


    @responses.activate
    def test_create_action_required_params(self):
        """
        test_create_action_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions')
        mock_response = '{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "command_parameter": "command_parameter", "inventory": "inventory", "credentials": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "bastion": {"name": "name", "host": "host"}, "bastion_credential": {"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}, "targets_ini": "targets_ini", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_job_id": "status_job_id", "status_message": "status_message"}, "playbook_names": ["playbook_names"], "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ActionState model
        action_state_model = {}
        action_state_model['status_code'] = 'normal'
        action_state_model['status_job_id'] = 'testString'
        action_state_model['status_message'] = 'testString'
        action_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Action model
        action_model = {}
        action_model['name'] = 'Stop Action'
        action_model['description'] = 'The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.'
        action_model['location'] = 'us-south'
        action_model['resource_group'] = 'testString'
        action_model['tags'] = ['testString']
        action_model['user_state'] = user_state_model
        action_model['source_readme_url'] = 'testString'
        action_model['source'] = external_source_model
        action_model['source_type'] = 'local'
        action_model['command_parameter'] = 'testString'
        action_model['inventory'] = 'testString'
        action_model['credentials'] = [variable_data_model]
        action_model['bastion'] = bastion_resource_definition_model
        action_model['bastion_credential'] = variable_data_model
        action_model['targets_ini'] = 'testString'
        action_model['inputs'] = [variable_data_model]
        action_model['outputs'] = [variable_data_model]
        action_model['settings'] = [variable_data_model]
        action_model['state'] = action_state_model
        action_model['sys_lock'] = system_lock_model
        action_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        action = action_model

        # Invoke method
        response = service.create_action(
            action,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == action


    @responses.activate
    def test_create_action_value_error(self):
        """
        test_create_action_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions')
        mock_response = '{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "command_parameter": "command_parameter", "inventory": "inventory", "credentials": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "bastion": {"name": "name", "host": "host"}, "bastion_credential": {"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}, "targets_ini": "targets_ini", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_job_id": "status_job_id", "status_message": "status_message"}, "playbook_names": ["playbook_names"], "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ActionState model
        action_state_model = {}
        action_state_model['status_code'] = 'normal'
        action_state_model['status_job_id'] = 'testString'
        action_state_model['status_message'] = 'testString'
        action_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Action model
        action_model = {}
        action_model['name'] = 'Stop Action'
        action_model['description'] = 'The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.'
        action_model['location'] = 'us-south'
        action_model['resource_group'] = 'testString'
        action_model['tags'] = ['testString']
        action_model['user_state'] = user_state_model
        action_model['source_readme_url'] = 'testString'
        action_model['source'] = external_source_model
        action_model['source_type'] = 'local'
        action_model['command_parameter'] = 'testString'
        action_model['inventory'] = 'testString'
        action_model['credentials'] = [variable_data_model]
        action_model['bastion'] = bastion_resource_definition_model
        action_model['bastion_credential'] = variable_data_model
        action_model['targets_ini'] = 'testString'
        action_model['inputs'] = [variable_data_model]
        action_model['outputs'] = [variable_data_model]
        action_model['settings'] = [variable_data_model]
        action_model['state'] = action_state_model
        action_model['sys_lock'] = system_lock_model
        action_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        action = action_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "action": action,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_action(**req_copy)



class TestGetAction():
    """
    Test Class for get_action
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_action_all_params(self):
        """
        get_action()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString')
        mock_response = '{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "command_parameter": "command_parameter", "inventory": "inventory", "credentials": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "bastion": {"name": "name", "host": "host"}, "bastion_credential": {"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}, "targets_ini": "targets_ini", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_job_id": "status_job_id", "status_message": "status_message"}, "playbook_names": ["playbook_names"], "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        action_id = 'testString'
        profile = 'summary'

        # Invoke method
        response = service.get_action(
            action_id,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_get_action_required_params(self):
        """
        test_get_action_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString')
        mock_response = '{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "command_parameter": "command_parameter", "inventory": "inventory", "credentials": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "bastion": {"name": "name", "host": "host"}, "bastion_credential": {"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}, "targets_ini": "targets_ini", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_job_id": "status_job_id", "status_message": "status_message"}, "playbook_names": ["playbook_names"], "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        action_id = 'testString'

        # Invoke method
        response = service.get_action(
            action_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_action_value_error(self):
        """
        test_get_action_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString')
        mock_response = '{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "command_parameter": "command_parameter", "inventory": "inventory", "credentials": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "bastion": {"name": "name", "host": "host"}, "bastion_credential": {"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}, "targets_ini": "targets_ini", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_job_id": "status_job_id", "status_message": "status_message"}, "playbook_names": ["playbook_names"], "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        action_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "action_id": action_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_action(**req_copy)



class TestDeleteAction():
    """
    Test Class for delete_action
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_action_all_params(self):
        """
        delete_action()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        action_id = 'testString'
        force = True
        propagate = True

        # Invoke method
        response = service.delete_action(
            action_id,
            force=force,
            propagate=propagate,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_action_required_params(self):
        """
        test_delete_action_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        action_id = 'testString'

        # Invoke method
        response = service.delete_action(
            action_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_action_value_error(self):
        """
        test_delete_action_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        action_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "action_id": action_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_action(**req_copy)



class TestUpdateAction():
    """
    Test Class for update_action
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_action_all_params(self):
        """
        update_action()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString')
        mock_response = '{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "command_parameter": "command_parameter", "inventory": "inventory", "credentials": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "bastion": {"name": "name", "host": "host"}, "bastion_credential": {"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}, "targets_ini": "targets_ini", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_job_id": "status_job_id", "status_message": "status_message"}, "playbook_names": ["playbook_names"], "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ActionState model
        action_state_model = {}
        action_state_model['status_code'] = 'normal'
        action_state_model['status_job_id'] = 'testString'
        action_state_model['status_message'] = 'testString'
        action_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Action model
        action_model = {}
        action_model['name'] = 'Stop Action'
        action_model['description'] = 'The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.'
        action_model['location'] = 'us-south'
        action_model['resource_group'] = 'testString'
        action_model['tags'] = ['testString']
        action_model['user_state'] = user_state_model
        action_model['source_readme_url'] = 'testString'
        action_model['source'] = external_source_model
        action_model['source_type'] = 'local'
        action_model['command_parameter'] = 'testString'
        action_model['inventory'] = 'testString'
        action_model['credentials'] = [variable_data_model]
        action_model['bastion'] = bastion_resource_definition_model
        action_model['bastion_credential'] = variable_data_model
        action_model['targets_ini'] = 'testString'
        action_model['inputs'] = [variable_data_model]
        action_model['outputs'] = [variable_data_model]
        action_model['settings'] = [variable_data_model]
        action_model['state'] = action_state_model
        action_model['sys_lock'] = system_lock_model
        action_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        action_id = 'testString'
        action = action_model
        x_github_token = 'testString'

        # Invoke method
        response = service.update_action(
            action_id,
            action,
            x_github_token=x_github_token,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == action


    @responses.activate
    def test_update_action_required_params(self):
        """
        test_update_action_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString')
        mock_response = '{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "command_parameter": "command_parameter", "inventory": "inventory", "credentials": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "bastion": {"name": "name", "host": "host"}, "bastion_credential": {"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}, "targets_ini": "targets_ini", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_job_id": "status_job_id", "status_message": "status_message"}, "playbook_names": ["playbook_names"], "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ActionState model
        action_state_model = {}
        action_state_model['status_code'] = 'normal'
        action_state_model['status_job_id'] = 'testString'
        action_state_model['status_message'] = 'testString'
        action_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Action model
        action_model = {}
        action_model['name'] = 'Stop Action'
        action_model['description'] = 'The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.'
        action_model['location'] = 'us-south'
        action_model['resource_group'] = 'testString'
        action_model['tags'] = ['testString']
        action_model['user_state'] = user_state_model
        action_model['source_readme_url'] = 'testString'
        action_model['source'] = external_source_model
        action_model['source_type'] = 'local'
        action_model['command_parameter'] = 'testString'
        action_model['inventory'] = 'testString'
        action_model['credentials'] = [variable_data_model]
        action_model['bastion'] = bastion_resource_definition_model
        action_model['bastion_credential'] = variable_data_model
        action_model['targets_ini'] = 'testString'
        action_model['inputs'] = [variable_data_model]
        action_model['outputs'] = [variable_data_model]
        action_model['settings'] = [variable_data_model]
        action_model['state'] = action_state_model
        action_model['sys_lock'] = system_lock_model
        action_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        action_id = 'testString'
        action = action_model

        # Invoke method
        response = service.update_action(
            action_id,
            action,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == action


    @responses.activate
    def test_update_action_value_error(self):
        """
        test_update_action_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString')
        mock_response = '{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "command_parameter": "command_parameter", "inventory": "inventory", "credentials": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "bastion": {"name": "name", "host": "host"}, "bastion_credential": {"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}, "targets_ini": "targets_ini", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "id": "id", "crn": "crn", "account": "account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_job_id": "status_job_id", "status_message": "status_message"}, "playbook_names": ["playbook_names"], "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ActionState model
        action_state_model = {}
        action_state_model['status_code'] = 'normal'
        action_state_model['status_job_id'] = 'testString'
        action_state_model['status_message'] = 'testString'
        action_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Action model
        action_model = {}
        action_model['name'] = 'Stop Action'
        action_model['description'] = 'The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.'
        action_model['location'] = 'us-south'
        action_model['resource_group'] = 'testString'
        action_model['tags'] = ['testString']
        action_model['user_state'] = user_state_model
        action_model['source_readme_url'] = 'testString'
        action_model['source'] = external_source_model
        action_model['source_type'] = 'local'
        action_model['command_parameter'] = 'testString'
        action_model['inventory'] = 'testString'
        action_model['credentials'] = [variable_data_model]
        action_model['bastion'] = bastion_resource_definition_model
        action_model['bastion_credential'] = variable_data_model
        action_model['targets_ini'] = 'testString'
        action_model['inputs'] = [variable_data_model]
        action_model['outputs'] = [variable_data_model]
        action_model['settings'] = [variable_data_model]
        action_model['state'] = action_state_model
        action_model['sys_lock'] = system_lock_model
        action_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        action_id = 'testString'
        action = action_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "action_id": action_id,
            "action": action,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_action(**req_copy)



class TestUploadTemplateTarAction():
    """
    Test Class for upload_template_tar_action
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_upload_template_tar_action_all_params(self):
        """
        upload_template_tar_action()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString/template_repo_upload')
        mock_response = '{"file_value": "file_value", "has_received_file": false, "id": "id"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        action_id = 'testString'
        file = io.BytesIO(b'This is a mock file.').getvalue()
        file_content_type = 'testString'

        # Invoke method
        response = service.upload_template_tar_action(
            action_id,
            file=file,
            file_content_type=file_content_type,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_upload_template_tar_action_required_params(self):
        """
        test_upload_template_tar_action_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString/template_repo_upload')
        mock_response = '{"file_value": "file_value", "has_received_file": false, "id": "id"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        action_id = 'testString'

        # Invoke method
        response = service.upload_template_tar_action(
            action_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_upload_template_tar_action_value_error(self):
        """
        test_upload_template_tar_action_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/actions/testString/template_repo_upload')
        mock_response = '{"file_value": "file_value", "has_received_file": false, "id": "id"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        action_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "action_id": action_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.upload_template_tar_action(**req_copy)



# endregion
##############################################################################
# End of Service: Actions
##############################################################################

##############################################################################
# Start of Service: Jobs
##############################################################################
# region

class TestListJobs():
    """
    Test Class for list_jobs
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_jobs_all_params(self):
        """
        list_jobs()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "jobs": [{"id": "id", "name": "name", "description": "description", "command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "tags": ["tags"], "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "duration": "duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'
        resource = 'workspace'
        resource_id = 'testString'
        action_id = 'testString'
        list = 'all'

        # Invoke method
        response = service.list_jobs(
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            resource=resource,
            resource_id=resource_id,
            action_id=action_id,
            list=list,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string
        assert 'resource={}'.format(resource) in query_string
        assert 'resource_id={}'.format(resource_id) in query_string
        assert 'action_id={}'.format(action_id) in query_string
        assert 'list={}'.format(list) in query_string


    @responses.activate
    def test_list_jobs_required_params(self):
        """
        test_list_jobs_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "jobs": [{"id": "id", "name": "name", "description": "description", "command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "tags": ["tags"], "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "duration": "duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_jobs()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateJob():
    """
    Test Class for create_job
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_job_all_params(self):
        """
        create_job()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs')
        mock_response = '{"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        refresh_token = 'testString'
        job = job_model

        # Invoke method
        response = service.create_job(
            refresh_token,
            job,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == job


    @responses.activate
    def test_create_job_value_error(self):
        """
        test_create_job_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs')
        mock_response = '{"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        refresh_token = 'testString'
        job = job_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "refresh_token": refresh_token,
            "job": job,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_job(**req_copy)



class TestGetJob():
    """
    Test Class for get_job
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_job_all_params(self):
        """
        get_job()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString')
        mock_response = '{"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'
        profile = 'summary'

        # Invoke method
        response = service.get_job(
            job_id,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_get_job_required_params(self):
        """
        test_get_job_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString')
        mock_response = '{"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'

        # Invoke method
        response = service.get_job(
            job_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_job_value_error(self):
        """
        test_get_job_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString')
        mock_response = '{"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "job_id": job_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_job(**req_copy)



class TestUpdateJob():
    """
    Test Class for update_job
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_job_all_params(self):
        """
        update_job()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString')
        mock_response = '{"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        job_id = 'testString'
        refresh_token = 'testString'
        job = job_model

        # Invoke method
        response = service.update_job(
            job_id,
            refresh_token,
            job,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == job


    @responses.activate
    def test_update_job_value_error(self):
        """
        test_update_job_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString')
        mock_response = '{"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        job_id = 'testString'
        refresh_token = 'testString'
        job = job_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "job_id": job_id,
            "refresh_token": refresh_token,
            "job": job,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_job(**req_copy)



class TestDeleteJob():
    """
    Test Class for delete_job
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_job_all_params(self):
        """
        delete_job()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        job_id = 'testString'
        refresh_token = 'testString'
        force = True
        propagate = True

        # Invoke method
        response = service.delete_job(
            job_id,
            refresh_token,
            force=force,
            propagate=propagate,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_job_required_params(self):
        """
        test_delete_job_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        job_id = 'testString'
        refresh_token = 'testString'

        # Invoke method
        response = service.delete_job(
            job_id,
            refresh_token,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_job_value_error(self):
        """
        test_delete_job_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        job_id = 'testString'
        refresh_token = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "job_id": job_id,
            "refresh_token": refresh_token,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_job(**req_copy)



class TestListJobLogs():
    """
    Test Class for list_job_logs
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_job_logs_all_params(self):
        """
        list_job_logs()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/logs')
        mock_response = '{"job_id": "job_id", "job_name": "job_name", "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'

        # Invoke method
        response = service.list_job_logs(
            job_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_job_logs_value_error(self):
        """
        test_list_job_logs_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/logs')
        mock_response = '{"job_id": "job_id", "job_name": "job_name", "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "job_id": job_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_job_logs(**req_copy)



class TestListJobStates():
    """
    Test Class for list_job_states
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_job_states_all_params(self):
        """
        list_job_states()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/states')
        mock_response = '{"job_id": "job_id", "job_name": "job_name", "summary": [{"name": "name", "type": "number", "value": "value"}], "format": "format", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=202)

        # Set up parameter values
        job_id = 'testString'

        # Invoke method
        response = service.list_job_states(
            job_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 202


    @responses.activate
    def test_list_job_states_value_error(self):
        """
        test_list_job_states_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/states')
        mock_response = '{"job_id": "job_id", "job_name": "job_name", "summary": [{"name": "name", "type": "number", "value": "value"}], "format": "format", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=202)

        # Set up parameter values
        job_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "job_id": job_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_job_states(**req_copy)



# endregion
##############################################################################
# End of Service: Jobs
##############################################################################

##############################################################################
# Start of Service: Controls
##############################################################################
# region

class TestListControls():
    """
    Test Class for list_controls
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_controls_all_params(self):
        """
        list_controls()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "controls": [{"name": "name", "description": "This Controls can be used to Stop the targets", "id": "id", "crn": "crn", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.list_controls(
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_list_controls_required_params(self):
        """
        test_list_controls_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "controls": [{"name": "name", "description": "This Controls can be used to Stop the targets", "id": "id", "crn": "crn", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_controls()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateControls():
    """
    Test Class for create_controls
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_controls_all_params(self):
        """
        create_controls()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls')
        mock_response = '{"name": "name", "type": "it_controls", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "id", "crn": "crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsDecision model
        controls_decision_model = {}
        controls_decision_model['rule'] = 'testString'
        controls_decision_model['pass_value'] = 'before'
        controls_decision_model['pass_expr'] = '== OR != OR <= OR >= OR > OR <'
        controls_decision_model['evidence_found_in'] = 'rule emitting details'
        controls_decision_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsEscalation model
        controls_escalation_model = {}
        controls_escalation_model['action_id'] = 'testString'
        controls_escalation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsLiteState model
        controls_lite_state_model = {}
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultResources model
        capsule_result_resources_model = {}
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultEvidences model
        capsule_result_evidences_model = {}
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobResultCapsule model
        job_result_capsule_model = {}
        job_result_capsule_model['job_id'] = 'testString'
        job_result_capsule_model['job_name'] = 'testString'
        job_result_capsule_model['policy'] = 'testString'
        job_result_capsule_model['severity'] = 1
        job_result_capsule_model['job_state'] = 'success'
        job_result_capsule_model['failures'] = ['testString']
        job_result_capsule_model['passed'] = ['testString']
        job_result_capsule_model['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataCapsule model
        job_data_capsule_model = {}
        job_data_capsule_model['capsule_id'] = 'testString'
        job_data_capsule_model['calsule_name'] = 'testString'
        job_data_capsule_model['inputs'] = [variable_data_model]
        job_data_capsule_model['results'] = [job_result_capsule_model]
        job_data_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Capsule model
        capsule_model = {}
        capsule_model['name'] = 'testString'
        capsule_model['description'] = 'testString'
        capsule_model['type'] = 'testString'
        capsule_model['user_state'] = user_state_model
        capsule_model['package'] = 'Policy package path'
        capsule_model['severity'] = 1
        capsule_model['inventory'] = 'testString'
        capsule_model['trigger_record_id'] = 'testString'
        capsule_model['job_triggers'] = [trigger_job_model]
        capsule_model['scheduled_triggers'] = [trigger_scheduled_model]
        capsule_model['inputs'] = [variable_data_model]
        capsule_model['decisions'] = [controls_decision_model]
        capsule_model['escalations'] = [controls_escalation_model]
        capsule_model['id'] = 'testString'
        capsule_model['status'] = 'testString'
        capsule_model['controls_id'] = 'testString'
        capsule_model['controls_name'] = 'testString'
        capsule_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['created_by'] = 'testString'
        capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['updated_by'] = 'testString'
        capsule_model['state'] = controls_lite_state_model
        capsule_model['last_job_data'] = job_data_capsule_model
        capsule_model['sys_lock'] = system_lock_model
        capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Controls model
        controls_model = {}
        controls_model['name'] = 'testString'
        controls_model['type'] = 'it_controls'
        controls_model['description'] = 'testString'
        controls_model['resource_group'] = 'testString'
        controls_model['location'] = 'us-south'
        controls_model['tags'] = ['testString']
        controls_model['source_readme_url'] = 'testString'
        controls_model['source'] = external_source_model
        controls_model['source_type'] = 'local'
        controls_model['inputs'] = [variable_data_model]
        controls_model['user_state'] = user_state_model
        controls_model['sys_lock'] = system_lock_model
        controls_model['capsules'] = [capsule_model]
        controls_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        controls = controls_model

        # Invoke method
        response = service.create_controls(
            controls,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == controls


    @responses.activate
    def test_create_controls_value_error(self):
        """
        test_create_controls_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls')
        mock_response = '{"name": "name", "type": "it_controls", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "id", "crn": "crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsDecision model
        controls_decision_model = {}
        controls_decision_model['rule'] = 'testString'
        controls_decision_model['pass_value'] = 'before'
        controls_decision_model['pass_expr'] = '== OR != OR <= OR >= OR > OR <'
        controls_decision_model['evidence_found_in'] = 'rule emitting details'
        controls_decision_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsEscalation model
        controls_escalation_model = {}
        controls_escalation_model['action_id'] = 'testString'
        controls_escalation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsLiteState model
        controls_lite_state_model = {}
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultResources model
        capsule_result_resources_model = {}
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultEvidences model
        capsule_result_evidences_model = {}
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobResultCapsule model
        job_result_capsule_model = {}
        job_result_capsule_model['job_id'] = 'testString'
        job_result_capsule_model['job_name'] = 'testString'
        job_result_capsule_model['policy'] = 'testString'
        job_result_capsule_model['severity'] = 1
        job_result_capsule_model['job_state'] = 'success'
        job_result_capsule_model['failures'] = ['testString']
        job_result_capsule_model['passed'] = ['testString']
        job_result_capsule_model['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataCapsule model
        job_data_capsule_model = {}
        job_data_capsule_model['capsule_id'] = 'testString'
        job_data_capsule_model['calsule_name'] = 'testString'
        job_data_capsule_model['inputs'] = [variable_data_model]
        job_data_capsule_model['results'] = [job_result_capsule_model]
        job_data_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Capsule model
        capsule_model = {}
        capsule_model['name'] = 'testString'
        capsule_model['description'] = 'testString'
        capsule_model['type'] = 'testString'
        capsule_model['user_state'] = user_state_model
        capsule_model['package'] = 'Policy package path'
        capsule_model['severity'] = 1
        capsule_model['inventory'] = 'testString'
        capsule_model['trigger_record_id'] = 'testString'
        capsule_model['job_triggers'] = [trigger_job_model]
        capsule_model['scheduled_triggers'] = [trigger_scheduled_model]
        capsule_model['inputs'] = [variable_data_model]
        capsule_model['decisions'] = [controls_decision_model]
        capsule_model['escalations'] = [controls_escalation_model]
        capsule_model['id'] = 'testString'
        capsule_model['status'] = 'testString'
        capsule_model['controls_id'] = 'testString'
        capsule_model['controls_name'] = 'testString'
        capsule_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['created_by'] = 'testString'
        capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['updated_by'] = 'testString'
        capsule_model['state'] = controls_lite_state_model
        capsule_model['last_job_data'] = job_data_capsule_model
        capsule_model['sys_lock'] = system_lock_model
        capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Controls model
        controls_model = {}
        controls_model['name'] = 'testString'
        controls_model['type'] = 'it_controls'
        controls_model['description'] = 'testString'
        controls_model['resource_group'] = 'testString'
        controls_model['location'] = 'us-south'
        controls_model['tags'] = ['testString']
        controls_model['source_readme_url'] = 'testString'
        controls_model['source'] = external_source_model
        controls_model['source_type'] = 'local'
        controls_model['inputs'] = [variable_data_model]
        controls_model['user_state'] = user_state_model
        controls_model['sys_lock'] = system_lock_model
        controls_model['capsules'] = [capsule_model]
        controls_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        controls = controls_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "controls": controls,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_controls(**req_copy)



class TestGetControls():
    """
    Test Class for get_controls
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_controls_all_params(self):
        """
        get_controls()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString')
        mock_response = '{"name": "name", "type": "it_controls", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "id", "crn": "crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        controls_id = 'testString'
        profile = 'summary'

        # Invoke method
        response = service.get_controls(
            controls_id,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_get_controls_required_params(self):
        """
        test_get_controls_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString')
        mock_response = '{"name": "name", "type": "it_controls", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "id", "crn": "crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        controls_id = 'testString'

        # Invoke method
        response = service.get_controls(
            controls_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_controls_value_error(self):
        """
        test_get_controls_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString')
        mock_response = '{"name": "name", "type": "it_controls", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "id", "crn": "crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        controls_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "controls_id": controls_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_controls(**req_copy)



class TestDeleteControls():
    """
    Test Class for delete_controls
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_controls_all_params(self):
        """
        delete_controls()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        controls_id = 'testString'
        force = True
        propagate = True

        # Invoke method
        response = service.delete_controls(
            controls_id,
            force=force,
            propagate=propagate,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_controls_required_params(self):
        """
        test_delete_controls_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        controls_id = 'testString'

        # Invoke method
        response = service.delete_controls(
            controls_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_controls_value_error(self):
        """
        test_delete_controls_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        controls_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "controls_id": controls_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_controls(**req_copy)



class TestUpdateControls():
    """
    Test Class for update_controls
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_controls_all_params(self):
        """
        update_controls()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString')
        mock_response = '{"name": "name", "type": "it_controls", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "id", "crn": "crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsDecision model
        controls_decision_model = {}
        controls_decision_model['rule'] = 'testString'
        controls_decision_model['pass_value'] = 'before'
        controls_decision_model['pass_expr'] = '== OR != OR <= OR >= OR > OR <'
        controls_decision_model['evidence_found_in'] = 'rule emitting details'
        controls_decision_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsEscalation model
        controls_escalation_model = {}
        controls_escalation_model['action_id'] = 'testString'
        controls_escalation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsLiteState model
        controls_lite_state_model = {}
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultResources model
        capsule_result_resources_model = {}
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultEvidences model
        capsule_result_evidences_model = {}
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobResultCapsule model
        job_result_capsule_model = {}
        job_result_capsule_model['job_id'] = 'testString'
        job_result_capsule_model['job_name'] = 'testString'
        job_result_capsule_model['policy'] = 'testString'
        job_result_capsule_model['severity'] = 1
        job_result_capsule_model['job_state'] = 'success'
        job_result_capsule_model['failures'] = ['testString']
        job_result_capsule_model['passed'] = ['testString']
        job_result_capsule_model['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataCapsule model
        job_data_capsule_model = {}
        job_data_capsule_model['capsule_id'] = 'testString'
        job_data_capsule_model['calsule_name'] = 'testString'
        job_data_capsule_model['inputs'] = [variable_data_model]
        job_data_capsule_model['results'] = [job_result_capsule_model]
        job_data_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Capsule model
        capsule_model = {}
        capsule_model['name'] = 'testString'
        capsule_model['description'] = 'testString'
        capsule_model['type'] = 'testString'
        capsule_model['user_state'] = user_state_model
        capsule_model['package'] = 'Policy package path'
        capsule_model['severity'] = 1
        capsule_model['inventory'] = 'testString'
        capsule_model['trigger_record_id'] = 'testString'
        capsule_model['job_triggers'] = [trigger_job_model]
        capsule_model['scheduled_triggers'] = [trigger_scheduled_model]
        capsule_model['inputs'] = [variable_data_model]
        capsule_model['decisions'] = [controls_decision_model]
        capsule_model['escalations'] = [controls_escalation_model]
        capsule_model['id'] = 'testString'
        capsule_model['status'] = 'testString'
        capsule_model['controls_id'] = 'testString'
        capsule_model['controls_name'] = 'testString'
        capsule_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['created_by'] = 'testString'
        capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['updated_by'] = 'testString'
        capsule_model['state'] = controls_lite_state_model
        capsule_model['last_job_data'] = job_data_capsule_model
        capsule_model['sys_lock'] = system_lock_model
        capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Controls model
        controls_model = {}
        controls_model['name'] = 'testString'
        controls_model['type'] = 'it_controls'
        controls_model['description'] = 'testString'
        controls_model['resource_group'] = 'testString'
        controls_model['location'] = 'us-south'
        controls_model['tags'] = ['testString']
        controls_model['source_readme_url'] = 'testString'
        controls_model['source'] = external_source_model
        controls_model['source_type'] = 'local'
        controls_model['inputs'] = [variable_data_model]
        controls_model['user_state'] = user_state_model
        controls_model['sys_lock'] = system_lock_model
        controls_model['capsules'] = [capsule_model]
        controls_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        controls_id = 'testString'
        controls = controls_model

        # Invoke method
        response = service.update_controls(
            controls_id,
            controls,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == controls


    @responses.activate
    def test_update_controls_value_error(self):
        """
        test_update_controls_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString')
        mock_response = '{"name": "name", "type": "it_controls", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "source_readme_url": "source_readme_url", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "id", "crn": "crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "source_created_by", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "source_updated_by", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsDecision model
        controls_decision_model = {}
        controls_decision_model['rule'] = 'testString'
        controls_decision_model['pass_value'] = 'before'
        controls_decision_model['pass_expr'] = '== OR != OR <= OR >= OR > OR <'
        controls_decision_model['evidence_found_in'] = 'rule emitting details'
        controls_decision_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsEscalation model
        controls_escalation_model = {}
        controls_escalation_model['action_id'] = 'testString'
        controls_escalation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsLiteState model
        controls_lite_state_model = {}
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultResources model
        capsule_result_resources_model = {}
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultEvidences model
        capsule_result_evidences_model = {}
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobResultCapsule model
        job_result_capsule_model = {}
        job_result_capsule_model['job_id'] = 'testString'
        job_result_capsule_model['job_name'] = 'testString'
        job_result_capsule_model['policy'] = 'testString'
        job_result_capsule_model['severity'] = 1
        job_result_capsule_model['job_state'] = 'success'
        job_result_capsule_model['failures'] = ['testString']
        job_result_capsule_model['passed'] = ['testString']
        job_result_capsule_model['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataCapsule model
        job_data_capsule_model = {}
        job_data_capsule_model['capsule_id'] = 'testString'
        job_data_capsule_model['calsule_name'] = 'testString'
        job_data_capsule_model['inputs'] = [variable_data_model]
        job_data_capsule_model['results'] = [job_result_capsule_model]
        job_data_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Capsule model
        capsule_model = {}
        capsule_model['name'] = 'testString'
        capsule_model['description'] = 'testString'
        capsule_model['type'] = 'testString'
        capsule_model['user_state'] = user_state_model
        capsule_model['package'] = 'Policy package path'
        capsule_model['severity'] = 1
        capsule_model['inventory'] = 'testString'
        capsule_model['trigger_record_id'] = 'testString'
        capsule_model['job_triggers'] = [trigger_job_model]
        capsule_model['scheduled_triggers'] = [trigger_scheduled_model]
        capsule_model['inputs'] = [variable_data_model]
        capsule_model['decisions'] = [controls_decision_model]
        capsule_model['escalations'] = [controls_escalation_model]
        capsule_model['id'] = 'testString'
        capsule_model['status'] = 'testString'
        capsule_model['controls_id'] = 'testString'
        capsule_model['controls_name'] = 'testString'
        capsule_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['created_by'] = 'testString'
        capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['updated_by'] = 'testString'
        capsule_model['state'] = controls_lite_state_model
        capsule_model['last_job_data'] = job_data_capsule_model
        capsule_model['sys_lock'] = system_lock_model
        capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Controls model
        controls_model = {}
        controls_model['name'] = 'testString'
        controls_model['type'] = 'it_controls'
        controls_model['description'] = 'testString'
        controls_model['resource_group'] = 'testString'
        controls_model['location'] = 'us-south'
        controls_model['tags'] = ['testString']
        controls_model['source_readme_url'] = 'testString'
        controls_model['source'] = external_source_model
        controls_model['source_type'] = 'local'
        controls_model['inputs'] = [variable_data_model]
        controls_model['user_state'] = user_state_model
        controls_model['sys_lock'] = system_lock_model
        controls_model['capsules'] = [capsule_model]
        controls_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        controls_id = 'testString'
        controls = controls_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "controls_id": controls_id,
            "controls": controls,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_controls(**req_copy)



class TestListCapsules():
    """
    Test Class for list_capsules
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_capsules_all_params(self):
        """
        list_capsules()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "capsules": [{"name": "name", "description": "This Capsule can be used to Stop the targets", "id": "id", "crn": "crn", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        controls_id = 'testString'
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.list_capsules(
            controls_id,
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_list_capsules_required_params(self):
        """
        test_list_capsules_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "capsules": [{"name": "name", "description": "This Capsule can be used to Stop the targets", "id": "id", "crn": "crn", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        controls_id = 'testString'

        # Invoke method
        response = service.list_capsules(
            controls_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_capsules_value_error(self):
        """
        test_list_capsules_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "capsules": [{"name": "name", "description": "This Capsule can be used to Stop the targets", "id": "id", "crn": "crn", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        controls_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "controls_id": controls_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_capsules(**req_copy)



class TestCreateCapsule():
    """
    Test Class for create_capsule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_capsule_all_params(self):
        """
        create_capsule()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "capsules": [{"name": "name", "description": "This Capsule can be used to Stop the targets", "id": "id", "crn": "crn", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsDecision model
        controls_decision_model = {}
        controls_decision_model['rule'] = 'testString'
        controls_decision_model['pass_value'] = 'before'
        controls_decision_model['pass_expr'] = '== OR != OR <= OR >= OR > OR <'
        controls_decision_model['evidence_found_in'] = 'rule emitting details'
        controls_decision_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsEscalation model
        controls_escalation_model = {}
        controls_escalation_model['action_id'] = 'testString'
        controls_escalation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsLiteState model
        controls_lite_state_model = {}
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultResources model
        capsule_result_resources_model = {}
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultEvidences model
        capsule_result_evidences_model = {}
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobResultCapsule model
        job_result_capsule_model = {}
        job_result_capsule_model['job_id'] = 'testString'
        job_result_capsule_model['job_name'] = 'testString'
        job_result_capsule_model['policy'] = 'testString'
        job_result_capsule_model['severity'] = 1
        job_result_capsule_model['job_state'] = 'success'
        job_result_capsule_model['failures'] = ['testString']
        job_result_capsule_model['passed'] = ['testString']
        job_result_capsule_model['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataCapsule model
        job_data_capsule_model = {}
        job_data_capsule_model['capsule_id'] = 'testString'
        job_data_capsule_model['calsule_name'] = 'testString'
        job_data_capsule_model['inputs'] = [variable_data_model]
        job_data_capsule_model['results'] = [job_result_capsule_model]
        job_data_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Capsule model
        capsule_model = {}
        capsule_model['name'] = 'testString'
        capsule_model['description'] = 'testString'
        capsule_model['type'] = 'testString'
        capsule_model['user_state'] = user_state_model
        capsule_model['package'] = 'Policy package path'
        capsule_model['severity'] = 1
        capsule_model['inventory'] = 'testString'
        capsule_model['trigger_record_id'] = 'testString'
        capsule_model['job_triggers'] = [trigger_job_model]
        capsule_model['scheduled_triggers'] = [trigger_scheduled_model]
        capsule_model['inputs'] = [variable_data_model]
        capsule_model['decisions'] = [controls_decision_model]
        capsule_model['escalations'] = [controls_escalation_model]
        capsule_model['id'] = 'testString'
        capsule_model['status'] = 'testString'
        capsule_model['controls_id'] = 'testString'
        capsule_model['controls_name'] = 'testString'
        capsule_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['created_by'] = 'testString'
        capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['updated_by'] = 'testString'
        capsule_model['state'] = controls_lite_state_model
        capsule_model['last_job_data'] = job_data_capsule_model
        capsule_model['sys_lock'] = system_lock_model
        capsule_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        controls_id = 'testString'
        capsule = capsule_model

        # Invoke method
        response = service.create_capsule(
            controls_id,
            capsule,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == capsule


    @responses.activate
    def test_create_capsule_value_error(self):
        """
        test_create_capsule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "capsules": [{"name": "name", "description": "This Capsule can be used to Stop the targets", "id": "id", "crn": "crn", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsDecision model
        controls_decision_model = {}
        controls_decision_model['rule'] = 'testString'
        controls_decision_model['pass_value'] = 'before'
        controls_decision_model['pass_expr'] = '== OR != OR <= OR >= OR > OR <'
        controls_decision_model['evidence_found_in'] = 'rule emitting details'
        controls_decision_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsEscalation model
        controls_escalation_model = {}
        controls_escalation_model['action_id'] = 'testString'
        controls_escalation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsLiteState model
        controls_lite_state_model = {}
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultResources model
        capsule_result_resources_model = {}
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultEvidences model
        capsule_result_evidences_model = {}
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobResultCapsule model
        job_result_capsule_model = {}
        job_result_capsule_model['job_id'] = 'testString'
        job_result_capsule_model['job_name'] = 'testString'
        job_result_capsule_model['policy'] = 'testString'
        job_result_capsule_model['severity'] = 1
        job_result_capsule_model['job_state'] = 'success'
        job_result_capsule_model['failures'] = ['testString']
        job_result_capsule_model['passed'] = ['testString']
        job_result_capsule_model['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataCapsule model
        job_data_capsule_model = {}
        job_data_capsule_model['capsule_id'] = 'testString'
        job_data_capsule_model['calsule_name'] = 'testString'
        job_data_capsule_model['inputs'] = [variable_data_model]
        job_data_capsule_model['results'] = [job_result_capsule_model]
        job_data_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Capsule model
        capsule_model = {}
        capsule_model['name'] = 'testString'
        capsule_model['description'] = 'testString'
        capsule_model['type'] = 'testString'
        capsule_model['user_state'] = user_state_model
        capsule_model['package'] = 'Policy package path'
        capsule_model['severity'] = 1
        capsule_model['inventory'] = 'testString'
        capsule_model['trigger_record_id'] = 'testString'
        capsule_model['job_triggers'] = [trigger_job_model]
        capsule_model['scheduled_triggers'] = [trigger_scheduled_model]
        capsule_model['inputs'] = [variable_data_model]
        capsule_model['decisions'] = [controls_decision_model]
        capsule_model['escalations'] = [controls_escalation_model]
        capsule_model['id'] = 'testString'
        capsule_model['status'] = 'testString'
        capsule_model['controls_id'] = 'testString'
        capsule_model['controls_name'] = 'testString'
        capsule_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['created_by'] = 'testString'
        capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['updated_by'] = 'testString'
        capsule_model['state'] = controls_lite_state_model
        capsule_model['last_job_data'] = job_data_capsule_model
        capsule_model['sys_lock'] = system_lock_model
        capsule_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        controls_id = 'testString'
        capsule = capsule_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "controls_id": controls_id,
            "capsule": capsule,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_capsule(**req_copy)



class TestGetCapsule():
    """
    Test Class for get_capsule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_capsule_all_params(self):
        """
        get_capsule()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules/testString')
        mock_response = '{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        controls_id = 'testString'
        capsule_id = 'testString'
        profile = 'summary'

        # Invoke method
        response = service.get_capsule(
            controls_id,
            capsule_id,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_get_capsule_required_params(self):
        """
        test_get_capsule_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules/testString')
        mock_response = '{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        controls_id = 'testString'
        capsule_id = 'testString'

        # Invoke method
        response = service.get_capsule(
            controls_id,
            capsule_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_capsule_value_error(self):
        """
        test_get_capsule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules/testString')
        mock_response = '{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        controls_id = 'testString'
        capsule_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "controls_id": controls_id,
            "capsule_id": capsule_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_capsule(**req_copy)



class TestDeleteCapsule():
    """
    Test Class for delete_capsule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_capsule_all_params(self):
        """
        delete_capsule()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        controls_id = 'testString'
        capsule_id = 'testString'

        # Invoke method
        response = service.delete_capsule(
            controls_id,
            capsule_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_capsule_value_error(self):
        """
        test_delete_capsule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        controls_id = 'testString'
        capsule_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "controls_id": controls_id,
            "capsule_id": capsule_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_capsule(**req_copy)



class TestUpdateCapsule():
    """
    Test Class for update_capsule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_capsule_all_params(self):
        """
        update_capsule()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules/testString')
        mock_response = '{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsDecision model
        controls_decision_model = {}
        controls_decision_model['rule'] = 'testString'
        controls_decision_model['pass_value'] = 'before'
        controls_decision_model['pass_expr'] = '== OR != OR <= OR >= OR > OR <'
        controls_decision_model['evidence_found_in'] = 'rule emitting details'
        controls_decision_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsEscalation model
        controls_escalation_model = {}
        controls_escalation_model['action_id'] = 'testString'
        controls_escalation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsLiteState model
        controls_lite_state_model = {}
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultResources model
        capsule_result_resources_model = {}
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultEvidences model
        capsule_result_evidences_model = {}
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobResultCapsule model
        job_result_capsule_model = {}
        job_result_capsule_model['job_id'] = 'testString'
        job_result_capsule_model['job_name'] = 'testString'
        job_result_capsule_model['policy'] = 'testString'
        job_result_capsule_model['severity'] = 1
        job_result_capsule_model['job_state'] = 'success'
        job_result_capsule_model['failures'] = ['testString']
        job_result_capsule_model['passed'] = ['testString']
        job_result_capsule_model['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataCapsule model
        job_data_capsule_model = {}
        job_data_capsule_model['capsule_id'] = 'testString'
        job_data_capsule_model['calsule_name'] = 'testString'
        job_data_capsule_model['inputs'] = [variable_data_model]
        job_data_capsule_model['results'] = [job_result_capsule_model]
        job_data_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Capsule model
        capsule_model = {}
        capsule_model['name'] = 'testString'
        capsule_model['description'] = 'testString'
        capsule_model['type'] = 'testString'
        capsule_model['user_state'] = user_state_model
        capsule_model['package'] = 'Policy package path'
        capsule_model['severity'] = 1
        capsule_model['inventory'] = 'testString'
        capsule_model['trigger_record_id'] = 'testString'
        capsule_model['job_triggers'] = [trigger_job_model]
        capsule_model['scheduled_triggers'] = [trigger_scheduled_model]
        capsule_model['inputs'] = [variable_data_model]
        capsule_model['decisions'] = [controls_decision_model]
        capsule_model['escalations'] = [controls_escalation_model]
        capsule_model['id'] = 'testString'
        capsule_model['status'] = 'testString'
        capsule_model['controls_id'] = 'testString'
        capsule_model['controls_name'] = 'testString'
        capsule_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['created_by'] = 'testString'
        capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['updated_by'] = 'testString'
        capsule_model['state'] = controls_lite_state_model
        capsule_model['last_job_data'] = job_data_capsule_model
        capsule_model['sys_lock'] = system_lock_model
        capsule_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        controls_id = 'testString'
        capsule_id = 'testString'
        capsule = capsule_model

        # Invoke method
        response = service.update_capsule(
            controls_id,
            capsule_id,
            capsule,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == capsule


    @responses.activate
    def test_update_capsule_value_error(self):
        """
        test_update_capsule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/controls/testString/capsules/testString')
        mock_response = '{"name": "name", "description": "description", "type": "type", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "inventory", "trigger_record_id": "trigger_record_id", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "decisions": [{"rule": "rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "action_id"}], "id": "id", "status": "status", "controls_id": "controls_id", "controls_name": "controls_name", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "state": {"status_code": "normal", "status_message": "status_message"}, "last_job_data": {"capsule_id": "capsule_id", "calsule_name": "calsule_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "results": [{"job_id": "job_id", "job_name": "job_name", "policy": "policy", "severity": 1, "job_state": "success", "failures": ["failures"], "passed": ["passed"], "evidences": [{"resources": [{"name": "name", "type": "type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsDecision model
        controls_decision_model = {}
        controls_decision_model['rule'] = 'testString'
        controls_decision_model['pass_value'] = 'before'
        controls_decision_model['pass_expr'] = '== OR != OR <= OR >= OR > OR <'
        controls_decision_model['evidence_found_in'] = 'rule emitting details'
        controls_decision_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsEscalation model
        controls_escalation_model = {}
        controls_escalation_model['action_id'] = 'testString'
        controls_escalation_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ControlsLiteState model
        controls_lite_state_model = {}
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultResources model
        capsule_result_resources_model = {}
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CapsuleResultEvidences model
        capsule_result_evidences_model = {}
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobResultCapsule model
        job_result_capsule_model = {}
        job_result_capsule_model['job_id'] = 'testString'
        job_result_capsule_model['job_name'] = 'testString'
        job_result_capsule_model['policy'] = 'testString'
        job_result_capsule_model['severity'] = 1
        job_result_capsule_model['job_state'] = 'success'
        job_result_capsule_model['failures'] = ['testString']
        job_result_capsule_model['passed'] = ['testString']
        job_result_capsule_model['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataCapsule model
        job_data_capsule_model = {}
        job_data_capsule_model['capsule_id'] = 'testString'
        job_data_capsule_model['calsule_name'] = 'testString'
        job_data_capsule_model['inputs'] = [variable_data_model]
        job_data_capsule_model['results'] = [job_result_capsule_model]
        job_data_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Capsule model
        capsule_model = {}
        capsule_model['name'] = 'testString'
        capsule_model['description'] = 'testString'
        capsule_model['type'] = 'testString'
        capsule_model['user_state'] = user_state_model
        capsule_model['package'] = 'Policy package path'
        capsule_model['severity'] = 1
        capsule_model['inventory'] = 'testString'
        capsule_model['trigger_record_id'] = 'testString'
        capsule_model['job_triggers'] = [trigger_job_model]
        capsule_model['scheduled_triggers'] = [trigger_scheduled_model]
        capsule_model['inputs'] = [variable_data_model]
        capsule_model['decisions'] = [controls_decision_model]
        capsule_model['escalations'] = [controls_escalation_model]
        capsule_model['id'] = 'testString'
        capsule_model['status'] = 'testString'
        capsule_model['controls_id'] = 'testString'
        capsule_model['controls_name'] = 'testString'
        capsule_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['created_by'] = 'testString'
        capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['updated_by'] = 'testString'
        capsule_model['state'] = controls_lite_state_model
        capsule_model['last_job_data'] = job_data_capsule_model
        capsule_model['sys_lock'] = system_lock_model
        capsule_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        controls_id = 'testString'
        capsule_id = 'testString'
        capsule = capsule_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "controls_id": controls_id,
            "capsule_id": capsule_id,
            "capsule": capsule,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_capsule(**req_copy)



# endregion
##############################################################################
# End of Service: Controls
##############################################################################

##############################################################################
# Start of Service: SettingsDatasets
##############################################################################
# region

class TestListDatasets():
    """
    Test Class for list_datasets
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_datasets_all_params(self):
        """
        list_datasets()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "datasets": [{"name": "name", "dataset_id": "dataset_id", "type": "credential", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "source_type": "local", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.list_datasets(
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_list_datasets_required_params(self):
        """
        test_list_datasets_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "datasets": [{"name": "name", "dataset_id": "dataset_id", "type": "credential", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "source_type": "local", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_datasets()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateDataset():
    """
    Test Class for create_dataset
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_dataset_all_params(self):
        """
        create_dataset()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets')
        mock_response = '{"name": "name", "type": "credential", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "source_readme_url": "source_readme_url", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "dataset_id": "dataset_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Dataset model
        dataset_model = {}
        dataset_model['name'] = 'testString'
        dataset_model['type'] = 'credential'
        dataset_model['description'] = 'testString'
        dataset_model['resource_group'] = 'testString'
        dataset_model['location'] = 'us-south'
        dataset_model['tags'] = ['testString']
        dataset_model['data'] = [variable_data_model]
        dataset_model['source'] = external_source_model
        dataset_model['source_type'] = 'local'
        dataset_model['source_link'] = 'static'
        dataset_model['source_readme_url'] = 'testString'
        dataset_model['user_state'] = user_state_model
        dataset_model['auto_propagate_change'] = True
        dataset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        dataset = dataset_model

        # Invoke method
        response = service.create_dataset(
            dataset,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == dataset


    @responses.activate
    def test_create_dataset_value_error(self):
        """
        test_create_dataset_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets')
        mock_response = '{"name": "name", "type": "credential", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "source_readme_url": "source_readme_url", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "dataset_id": "dataset_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Dataset model
        dataset_model = {}
        dataset_model['name'] = 'testString'
        dataset_model['type'] = 'credential'
        dataset_model['description'] = 'testString'
        dataset_model['resource_group'] = 'testString'
        dataset_model['location'] = 'us-south'
        dataset_model['tags'] = ['testString']
        dataset_model['data'] = [variable_data_model]
        dataset_model['source'] = external_source_model
        dataset_model['source_type'] = 'local'
        dataset_model['source_link'] = 'static'
        dataset_model['source_readme_url'] = 'testString'
        dataset_model['user_state'] = user_state_model
        dataset_model['auto_propagate_change'] = True
        dataset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        dataset = dataset_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "dataset": dataset,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_dataset(**req_copy)



class TestGetDataset():
    """
    Test Class for get_dataset
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_dataset_all_params(self):
        """
        get_dataset()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString')
        mock_response = '{"name": "name", "type": "credential", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "source_readme_url": "source_readme_url", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "dataset_id": "dataset_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        dataset_id = 'testString'

        # Invoke method
        response = service.get_dataset(
            dataset_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_dataset_value_error(self):
        """
        test_get_dataset_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString')
        mock_response = '{"name": "name", "type": "credential", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "source_readme_url": "source_readme_url", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "dataset_id": "dataset_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        dataset_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "dataset_id": dataset_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_dataset(**req_copy)



class TestReplaceDataset():
    """
    Test Class for replace_dataset
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_dataset_all_params(self):
        """
        replace_dataset()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString')
        mock_response = '{"name": "name", "type": "credential", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "source_readme_url": "source_readme_url", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "dataset_id": "dataset_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Dataset model
        dataset_model = {}
        dataset_model['name'] = 'testString'
        dataset_model['type'] = 'credential'
        dataset_model['description'] = 'testString'
        dataset_model['resource_group'] = 'testString'
        dataset_model['location'] = 'us-south'
        dataset_model['tags'] = ['testString']
        dataset_model['data'] = [variable_data_model]
        dataset_model['source'] = external_source_model
        dataset_model['source_type'] = 'local'
        dataset_model['source_link'] = 'static'
        dataset_model['source_readme_url'] = 'testString'
        dataset_model['user_state'] = user_state_model
        dataset_model['auto_propagate_change'] = True
        dataset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        dataset_id = 'testString'
        dataset = dataset_model

        # Invoke method
        response = service.replace_dataset(
            dataset_id,
            dataset,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == dataset


    @responses.activate
    def test_replace_dataset_value_error(self):
        """
        test_replace_dataset_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString')
        mock_response = '{"name": "name", "type": "credential", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "source_readme_url": "source_readme_url", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "dataset_id": "dataset_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Dataset model
        dataset_model = {}
        dataset_model['name'] = 'testString'
        dataset_model['type'] = 'credential'
        dataset_model['description'] = 'testString'
        dataset_model['resource_group'] = 'testString'
        dataset_model['location'] = 'us-south'
        dataset_model['tags'] = ['testString']
        dataset_model['data'] = [variable_data_model]
        dataset_model['source'] = external_source_model
        dataset_model['source_type'] = 'local'
        dataset_model['source_link'] = 'static'
        dataset_model['source_readme_url'] = 'testString'
        dataset_model['user_state'] = user_state_model
        dataset_model['auto_propagate_change'] = True
        dataset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        dataset_id = 'testString'
        dataset = dataset_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "dataset_id": dataset_id,
            "dataset": dataset,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_dataset(**req_copy)



class TestDeleteDataset():
    """
    Test Class for delete_dataset
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_dataset_all_params(self):
        """
        delete_dataset()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        dataset_id = 'testString'
        force = True
        propagate = True

        # Invoke method
        response = service.delete_dataset(
            dataset_id,
            force=force,
            propagate=propagate,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_dataset_required_params(self):
        """
        test_delete_dataset_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        dataset_id = 'testString'

        # Invoke method
        response = service.delete_dataset(
            dataset_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_dataset_value_error(self):
        """
        test_delete_dataset_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        dataset_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "dataset_id": dataset_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_dataset(**req_copy)



class TestUpdateAtaset():
    """
    Test Class for update_ataset
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_ataset_all_params(self):
        """
        update_ataset()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString')
        mock_response = '{"name": "name", "type": "credential", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "source_readme_url": "source_readme_url", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "dataset_id": "dataset_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Dataset model
        dataset_model = {}
        dataset_model['name'] = 'testString'
        dataset_model['type'] = 'credential'
        dataset_model['description'] = 'testString'
        dataset_model['resource_group'] = 'testString'
        dataset_model['location'] = 'us-south'
        dataset_model['tags'] = ['testString']
        dataset_model['data'] = [variable_data_model]
        dataset_model['source'] = external_source_model
        dataset_model['source_type'] = 'local'
        dataset_model['source_link'] = 'static'
        dataset_model['source_readme_url'] = 'testString'
        dataset_model['user_state'] = user_state_model
        dataset_model['auto_propagate_change'] = True
        dataset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        dataset_id = 'testString'
        dataset = dataset_model

        # Invoke method
        response = service.update_ataset(
            dataset_id,
            dataset,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == dataset


    @responses.activate
    def test_update_ataset_value_error(self):
        """
        test_update_ataset_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString')
        mock_response = '{"name": "name", "type": "credential", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "source_readme_url": "source_readme_url", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "dataset_id": "dataset_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Dataset model
        dataset_model = {}
        dataset_model['name'] = 'testString'
        dataset_model['type'] = 'credential'
        dataset_model['description'] = 'testString'
        dataset_model['resource_group'] = 'testString'
        dataset_model['location'] = 'us-south'
        dataset_model['tags'] = ['testString']
        dataset_model['data'] = [variable_data_model]
        dataset_model['source'] = external_source_model
        dataset_model['source_type'] = 'local'
        dataset_model['source_link'] = 'static'
        dataset_model['source_readme_url'] = 'testString'
        dataset_model['user_state'] = user_state_model
        dataset_model['auto_propagate_change'] = True
        dataset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        dataset_id = 'testString'
        dataset = dataset_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "dataset_id": dataset_id,
            "dataset": dataset,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_ataset(**req_copy)



class TestListDatasetVariables():
    """
    Test Class for list_dataset_variables
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_dataset_variables_all_params(self):
        """
        list_dataset_variables()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString/variables')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "variables": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        dataset_id = 'testString'

        # Invoke method
        response = service.list_dataset_variables(
            dataset_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_dataset_variables_value_error(self):
        """
        test_list_dataset_variables_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString/variables')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "variables": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        dataset_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "dataset_id": dataset_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_dataset_variables(**req_copy)



class TestGetDatasetVariable():
    """
    Test Class for get_dataset_variable
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_dataset_variable_all_params(self):
        """
        get_dataset_variable()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString/values/testString')
        mock_response = '{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        dataset_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_dataset_variable(
            dataset_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_dataset_variable_value_error(self):
        """
        test_get_dataset_variable_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString/values/testString')
        mock_response = '{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        dataset_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "dataset_id": dataset_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_dataset_variable(**req_copy)



# endregion
##############################################################################
# End of Service: SettingsDatasets
##############################################################################

##############################################################################
# Start of Service: SettingsCredentials
##############################################################################
# region

class TestListCredentials():
    """
    Test Class for list_credentials
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_credentials_all_params(self):
        """
        list_credentials()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "credentials": [{"name": "name", "description": "description", "credential_id": "credential_id", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "source_type": "local", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.list_credentials(
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_list_credentials_required_params(self):
        """
        test_list_credentials_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "credentials": [{"name": "name", "description": "description", "credential_id": "credential_id", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "source_type": "local", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_credentials()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateCredential():
    """
    Test Class for create_credential
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_credential_all_params(self):
        """
        create_credential()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source_connection": "source_connection", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "replica_enabled": false, "replica_invalidation_frequency": "hourly", "credential_id": "credential_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Credentialset model
        credentialset_model = {}
        credentialset_model['name'] = 'testString'
        credentialset_model['description'] = 'testString'
        credentialset_model['resource_group'] = 'testString'
        credentialset_model['location'] = 'us-south'
        credentialset_model['tags'] = ['testString']
        credentialset_model['data'] = [variable_data_model]
        credentialset_model['source_connection'] = 'testString'
        credentialset_model['source'] = external_source_model
        credentialset_model['source_type'] = 'local'
        credentialset_model['source_link'] = 'static'
        credentialset_model['user_state'] = user_state_model
        credentialset_model['auto_propagate_change'] = True
        credentialset_model['replica_enabled'] = True
        credentialset_model['replica_invalidation_frequency'] = 'hourly'
        credentialset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        credentialset = credentialset_model

        # Invoke method
        response = service.create_credential(
            credentialset,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == credentialset


    @responses.activate
    def test_create_credential_value_error(self):
        """
        test_create_credential_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source_connection": "source_connection", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "replica_enabled": false, "replica_invalidation_frequency": "hourly", "credential_id": "credential_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Credentialset model
        credentialset_model = {}
        credentialset_model['name'] = 'testString'
        credentialset_model['description'] = 'testString'
        credentialset_model['resource_group'] = 'testString'
        credentialset_model['location'] = 'us-south'
        credentialset_model['tags'] = ['testString']
        credentialset_model['data'] = [variable_data_model]
        credentialset_model['source_connection'] = 'testString'
        credentialset_model['source'] = external_source_model
        credentialset_model['source_type'] = 'local'
        credentialset_model['source_link'] = 'static'
        credentialset_model['user_state'] = user_state_model
        credentialset_model['auto_propagate_change'] = True
        credentialset_model['replica_enabled'] = True
        credentialset_model['replica_invalidation_frequency'] = 'hourly'
        credentialset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        credentialset = credentialset_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "credentialset": credentialset,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_credential(**req_copy)



class TestGetCredential():
    """
    Test Class for get_credential
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_credential_all_params(self):
        """
        get_credential()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source_connection": "source_connection", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "replica_enabled": false, "replica_invalidation_frequency": "hourly", "credential_id": "credential_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        creds_id = 'testString'

        # Invoke method
        response = service.get_credential(
            creds_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_credential_value_error(self):
        """
        test_get_credential_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source_connection": "source_connection", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "replica_enabled": false, "replica_invalidation_frequency": "hourly", "credential_id": "credential_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        creds_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "creds_id": creds_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_credential(**req_copy)



class TestReplaceCredential():
    """
    Test Class for replace_credential
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_credential_all_params(self):
        """
        replace_credential()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source_connection": "source_connection", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "replica_enabled": false, "replica_invalidation_frequency": "hourly", "credential_id": "credential_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Credentialset model
        credentialset_model = {}
        credentialset_model['name'] = 'testString'
        credentialset_model['description'] = 'testString'
        credentialset_model['resource_group'] = 'testString'
        credentialset_model['location'] = 'us-south'
        credentialset_model['tags'] = ['testString']
        credentialset_model['data'] = [variable_data_model]
        credentialset_model['source_connection'] = 'testString'
        credentialset_model['source'] = external_source_model
        credentialset_model['source_type'] = 'local'
        credentialset_model['source_link'] = 'static'
        credentialset_model['user_state'] = user_state_model
        credentialset_model['auto_propagate_change'] = True
        credentialset_model['replica_enabled'] = True
        credentialset_model['replica_invalidation_frequency'] = 'hourly'
        credentialset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        creds_id = 'testString'
        credentialset = credentialset_model

        # Invoke method
        response = service.replace_credential(
            creds_id,
            credentialset,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == credentialset


    @responses.activate
    def test_replace_credential_value_error(self):
        """
        test_replace_credential_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source_connection": "source_connection", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "replica_enabled": false, "replica_invalidation_frequency": "hourly", "credential_id": "credential_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Credentialset model
        credentialset_model = {}
        credentialset_model['name'] = 'testString'
        credentialset_model['description'] = 'testString'
        credentialset_model['resource_group'] = 'testString'
        credentialset_model['location'] = 'us-south'
        credentialset_model['tags'] = ['testString']
        credentialset_model['data'] = [variable_data_model]
        credentialset_model['source_connection'] = 'testString'
        credentialset_model['source'] = external_source_model
        credentialset_model['source_type'] = 'local'
        credentialset_model['source_link'] = 'static'
        credentialset_model['user_state'] = user_state_model
        credentialset_model['auto_propagate_change'] = True
        credentialset_model['replica_enabled'] = True
        credentialset_model['replica_invalidation_frequency'] = 'hourly'
        credentialset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        creds_id = 'testString'
        credentialset = credentialset_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "creds_id": creds_id,
            "credentialset": credentialset,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_credential(**req_copy)



class TestDeleteCredential():
    """
    Test Class for delete_credential
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_credential_all_params(self):
        """
        delete_credential()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        creds_id = 'testString'
        force = True
        propagate = True

        # Invoke method
        response = service.delete_credential(
            creds_id,
            force=force,
            propagate=propagate,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_credential_required_params(self):
        """
        test_delete_credential_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        creds_id = 'testString'

        # Invoke method
        response = service.delete_credential(
            creds_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_credential_value_error(self):
        """
        test_delete_credential_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        creds_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "creds_id": creds_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_credential(**req_copy)



class TestUpdateCredential():
    """
    Test Class for update_credential
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_credential_all_params(self):
        """
        update_credential()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source_connection": "source_connection", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "replica_enabled": false, "replica_invalidation_frequency": "hourly", "credential_id": "credential_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Credentialset model
        credentialset_model = {}
        credentialset_model['name'] = 'testString'
        credentialset_model['description'] = 'testString'
        credentialset_model['resource_group'] = 'testString'
        credentialset_model['location'] = 'us-south'
        credentialset_model['tags'] = ['testString']
        credentialset_model['data'] = [variable_data_model]
        credentialset_model['source_connection'] = 'testString'
        credentialset_model['source'] = external_source_model
        credentialset_model['source_type'] = 'local'
        credentialset_model['source_link'] = 'static'
        credentialset_model['user_state'] = user_state_model
        credentialset_model['auto_propagate_change'] = True
        credentialset_model['replica_enabled'] = True
        credentialset_model['replica_invalidation_frequency'] = 'hourly'
        credentialset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        creds_id = 'testString'
        credentialset = credentialset_model

        # Invoke method
        response = service.update_credential(
            creds_id,
            credentialset,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == credentialset


    @responses.activate
    def test_update_credential_value_error(self):
        """
        test_update_credential_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "location": "us-south", "tags": ["tags"], "data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "source_connection": "source_connection", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "source_type": "local", "source_link": "static", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "auto_propagate_change": false, "replica_enabled": false, "replica_invalidation_frequency": "hourly", "credential_id": "credential_id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "affected_resource_ids": ["affected_resource_ids"]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Credentialset model
        credentialset_model = {}
        credentialset_model['name'] = 'testString'
        credentialset_model['description'] = 'testString'
        credentialset_model['resource_group'] = 'testString'
        credentialset_model['location'] = 'us-south'
        credentialset_model['tags'] = ['testString']
        credentialset_model['data'] = [variable_data_model]
        credentialset_model['source_connection'] = 'testString'
        credentialset_model['source'] = external_source_model
        credentialset_model['source_type'] = 'local'
        credentialset_model['source_link'] = 'static'
        credentialset_model['user_state'] = user_state_model
        credentialset_model['auto_propagate_change'] = True
        credentialset_model['replica_enabled'] = True
        credentialset_model['replica_invalidation_frequency'] = 'hourly'
        credentialset_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        creds_id = 'testString'
        credentialset = credentialset_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "creds_id": creds_id,
            "credentialset": credentialset,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_credential(**req_copy)



class TestListCredentialValues():
    """
    Test Class for list_credential_values
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_credential_values_all_params(self):
        """
        list_credential_values()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString/variables')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "variables": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        creds_id = 'testString'

        # Invoke method
        response = service.list_credential_values(
            creds_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_credential_values_value_error(self):
        """
        test_list_credential_values_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString/variables')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "variables": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        creds_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "creds_id": creds_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_credential_values(**req_copy)



class TestGetCredentialValue():
    """
    Test Class for get_credential_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_credential_value_all_params(self):
        """
        get_credential_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString/variables/testString')
        mock_response = '{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        creds_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_credential_value(
            creds_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_credential_value_value_error(self):
        """
        test_get_credential_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString/variables/testString')
        mock_response = '{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        creds_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "creds_id": creds_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_credential_value(**req_copy)



# endregion
##############################################################################
# End of Service: SettingsCredentials
##############################################################################

##############################################################################
# Start of Service: Inventory
##############################################################################
# region

class TestListInventories():
    """
    Test Class for list_inventories
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_inventories_all_params(self):
        """
        list_inventories()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "inventories": [{"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.list_inventories(
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_list_inventories_required_params(self):
        """
        test_list_inventories_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "inventories": [{"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_inventories()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateInventory():
    """
    Test Class for create_inventory
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_inventory_all_params(self):
        """
        create_inventory()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories')
        mock_response = '{"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InventoryResourceDefinition model
        inventory_resource_definition_model = {}
        inventory_resource_definition_model['name'] = 'testString'
        inventory_resource_definition_model['description'] = 'testString'
        inventory_resource_definition_model['location'] = 'us-south'
        inventory_resource_definition_model['resource_group'] = 'testString'
        inventory_resource_definition_model['inventories_ini'] = 'testString'
        inventory_resource_definition_model['resource_queries'] = ['testString']
        inventory_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        inventory_resource_definition = inventory_resource_definition_model

        # Invoke method
        response = service.create_inventory(
            inventory_resource_definition,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == inventory_resource_definition


    @responses.activate
    def test_create_inventory_value_error(self):
        """
        test_create_inventory_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories')
        mock_response = '{"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InventoryResourceDefinition model
        inventory_resource_definition_model = {}
        inventory_resource_definition_model['name'] = 'testString'
        inventory_resource_definition_model['description'] = 'testString'
        inventory_resource_definition_model['location'] = 'us-south'
        inventory_resource_definition_model['resource_group'] = 'testString'
        inventory_resource_definition_model['inventories_ini'] = 'testString'
        inventory_resource_definition_model['resource_queries'] = ['testString']
        inventory_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        inventory_resource_definition = inventory_resource_definition_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "inventory_resource_definition": inventory_resource_definition,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_inventory(**req_copy)



class TestGetInventory():
    """
    Test Class for get_inventory
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_inventory_all_params(self):
        """
        get_inventory()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories/testString')
        mock_response = '{"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        inventory_id = 'testString'

        # Invoke method
        response = service.get_inventory(
            inventory_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_inventory_value_error(self):
        """
        test_get_inventory_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories/testString')
        mock_response = '{"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        inventory_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "inventory_id": inventory_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_inventory(**req_copy)



class TestReplaceInventory():
    """
    Test Class for replace_inventory
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_inventory_all_params(self):
        """
        replace_inventory()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories/testString')
        mock_response = '{"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InventoryResourceDefinition model
        inventory_resource_definition_model = {}
        inventory_resource_definition_model['name'] = 'testString'
        inventory_resource_definition_model['description'] = 'testString'
        inventory_resource_definition_model['location'] = 'us-south'
        inventory_resource_definition_model['resource_group'] = 'testString'
        inventory_resource_definition_model['inventories_ini'] = 'testString'
        inventory_resource_definition_model['resource_queries'] = ['testString']
        inventory_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        inventory_id = 'testString'
        inventory_resource_definition = inventory_resource_definition_model

        # Invoke method
        response = service.replace_inventory(
            inventory_id,
            inventory_resource_definition,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == inventory_resource_definition


    @responses.activate
    def test_replace_inventory_value_error(self):
        """
        test_replace_inventory_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories/testString')
        mock_response = '{"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InventoryResourceDefinition model
        inventory_resource_definition_model = {}
        inventory_resource_definition_model['name'] = 'testString'
        inventory_resource_definition_model['description'] = 'testString'
        inventory_resource_definition_model['location'] = 'us-south'
        inventory_resource_definition_model['resource_group'] = 'testString'
        inventory_resource_definition_model['inventories_ini'] = 'testString'
        inventory_resource_definition_model['resource_queries'] = ['testString']
        inventory_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        inventory_id = 'testString'
        inventory_resource_definition = inventory_resource_definition_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "inventory_id": inventory_id,
            "inventory_resource_definition": inventory_resource_definition,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_inventory(**req_copy)



class TestDeleteInventory():
    """
    Test Class for delete_inventory
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_inventory_all_params(self):
        """
        delete_inventory()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        inventory_id = 'testString'
        force = True
        propagate = True

        # Invoke method
        response = service.delete_inventory(
            inventory_id,
            force=force,
            propagate=propagate,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_inventory_required_params(self):
        """
        test_delete_inventory_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        inventory_id = 'testString'

        # Invoke method
        response = service.delete_inventory(
            inventory_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_inventory_value_error(self):
        """
        test_delete_inventory_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        inventory_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "inventory_id": inventory_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_inventory(**req_copy)



class TestUpdateInventory():
    """
    Test Class for update_inventory
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_inventory_all_params(self):
        """
        update_inventory()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories/testString')
        mock_response = '{"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InventoryResourceDefinition model
        inventory_resource_definition_model = {}
        inventory_resource_definition_model['name'] = 'testString'
        inventory_resource_definition_model['description'] = 'testString'
        inventory_resource_definition_model['location'] = 'us-south'
        inventory_resource_definition_model['resource_group'] = 'testString'
        inventory_resource_definition_model['inventories_ini'] = 'testString'
        inventory_resource_definition_model['resource_queries'] = ['testString']
        inventory_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        inventory_id = 'testString'
        inventory_resource_definition = inventory_resource_definition_model

        # Invoke method
        response = service.update_inventory(
            inventory_id,
            inventory_resource_definition,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == inventory_resource_definition


    @responses.activate
    def test_update_inventory_value_error(self):
        """
        test_update_inventory_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories/testString')
        mock_response = '{"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InventoryResourceDefinition model
        inventory_resource_definition_model = {}
        inventory_resource_definition_model['name'] = 'testString'
        inventory_resource_definition_model['description'] = 'testString'
        inventory_resource_definition_model['location'] = 'us-south'
        inventory_resource_definition_model['resource_group'] = 'testString'
        inventory_resource_definition_model['inventories_ini'] = 'testString'
        inventory_resource_definition_model['resource_queries'] = ['testString']
        inventory_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        inventory_id = 'testString'
        inventory_resource_definition = inventory_resource_definition_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "inventory_id": inventory_id,
            "inventory_resource_definition": inventory_resource_definition,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_inventory(**req_copy)



# endregion
##############################################################################
# End of Service: Inventory
##############################################################################

##############################################################################
# Start of Service: ResourceQuery
##############################################################################
# region

class TestListResourceQuery():
    """
    Test Class for list_resource_query
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_resource_query_all_params(self):
        """
        list_resource_query()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "resource_queries": [{"type": "vsi", "name": "name", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "name", "value": "value", "description": "description"}], "query_select": ["query_select"]}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.list_resource_query(
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_list_resource_query_required_params(self):
        """
        test_list_resource_query_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "resource_queries": [{"type": "vsi", "name": "name", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "name", "value": "value", "description": "description"}], "query_select": ["query_select"]}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_resource_query()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateResourceQuery():
    """
    Test Class for create_resource_query
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_resource_query_all_params(self):
        """
        create_resource_query()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query')
        mock_response = '{"type": "vsi", "name": "name", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "name", "value": "value", "description": "description"}], "query_select": ["query_select"]}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ResourceQueryParam model
        resource_query_param_model = {}
        resource_query_param_model['name'] = 'testString'
        resource_query_param_model['value'] = 'testString'
        resource_query_param_model['description'] = 'testString'
        resource_query_param_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ResourceQuery model
        resource_query_model = {}
        resource_query_model['query_type'] = 'workspaces'
        resource_query_model['query_condition'] = [resource_query_param_model]
        resource_query_model['query_select'] = ['testString']
        resource_query_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ResourceQueryDefinition model
        resource_query_definition_model = {}
        resource_query_definition_model['type'] = 'vsi'
        resource_query_definition_model['name'] = 'testString'
        resource_query_definition_model['queries'] = [resource_query_model]
        resource_query_definition_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        resource_query_definition = resource_query_definition_model

        # Invoke method
        response = service.create_resource_query(
            resource_query_definition,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == resource_query_definition


    @responses.activate
    def test_create_resource_query_value_error(self):
        """
        test_create_resource_query_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query')
        mock_response = '{"type": "vsi", "name": "name", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "name", "value": "value", "description": "description"}], "query_select": ["query_select"]}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ResourceQueryParam model
        resource_query_param_model = {}
        resource_query_param_model['name'] = 'testString'
        resource_query_param_model['value'] = 'testString'
        resource_query_param_model['description'] = 'testString'
        resource_query_param_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ResourceQuery model
        resource_query_model = {}
        resource_query_model['query_type'] = 'workspaces'
        resource_query_model['query_condition'] = [resource_query_param_model]
        resource_query_model['query_select'] = ['testString']
        resource_query_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ResourceQueryDefinition model
        resource_query_definition_model = {}
        resource_query_definition_model['type'] = 'vsi'
        resource_query_definition_model['name'] = 'testString'
        resource_query_definition_model['queries'] = [resource_query_model]
        resource_query_definition_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        resource_query_definition = resource_query_definition_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "resource_query_definition": resource_query_definition,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_resource_query(**req_copy)



class TestGetResourcesQuery():
    """
    Test Class for get_resources_query
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_resources_query_all_params(self):
        """
        get_resources_query()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query/testString')
        mock_response = '{"type": "vsi", "name": "name", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "name", "value": "value", "description": "description"}], "query_select": ["query_select"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        query_id = 'testString'

        # Invoke method
        response = service.get_resources_query(
            query_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_resources_query_value_error(self):
        """
        test_get_resources_query_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query/testString')
        mock_response = '{"type": "vsi", "name": "name", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "name", "value": "value", "description": "description"}], "query_select": ["query_select"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        query_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "query_id": query_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_resources_query(**req_copy)



class TestReplaceResourcesQuery():
    """
    Test Class for replace_resources_query
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_resources_query_all_params(self):
        """
        replace_resources_query()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query/testString')
        mock_response = '{"type": "vsi", "name": "name", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "name", "value": "value", "description": "description"}], "query_select": ["query_select"]}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ResourceQueryParam model
        resource_query_param_model = {}
        resource_query_param_model['name'] = 'testString'
        resource_query_param_model['value'] = 'testString'
        resource_query_param_model['description'] = 'testString'
        resource_query_param_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ResourceQuery model
        resource_query_model = {}
        resource_query_model['query_type'] = 'workspaces'
        resource_query_model['query_condition'] = [resource_query_param_model]
        resource_query_model['query_select'] = ['testString']
        resource_query_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ResourceQueryDefinition model
        resource_query_definition_model = {}
        resource_query_definition_model['type'] = 'vsi'
        resource_query_definition_model['name'] = 'testString'
        resource_query_definition_model['queries'] = [resource_query_model]
        resource_query_definition_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        query_id = 'testString'
        resource_query_definition = resource_query_definition_model

        # Invoke method
        response = service.replace_resources_query(
            query_id,
            resource_query_definition,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == resource_query_definition


    @responses.activate
    def test_replace_resources_query_value_error(self):
        """
        test_replace_resources_query_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query/testString')
        mock_response = '{"type": "vsi", "name": "name", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "name", "value": "value", "description": "description"}], "query_select": ["query_select"]}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ResourceQueryParam model
        resource_query_param_model = {}
        resource_query_param_model['name'] = 'testString'
        resource_query_param_model['value'] = 'testString'
        resource_query_param_model['description'] = 'testString'
        resource_query_param_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ResourceQuery model
        resource_query_model = {}
        resource_query_model['query_type'] = 'workspaces'
        resource_query_model['query_condition'] = [resource_query_param_model]
        resource_query_model['query_select'] = ['testString']
        resource_query_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ResourceQueryDefinition model
        resource_query_definition_model = {}
        resource_query_definition_model['type'] = 'vsi'
        resource_query_definition_model['name'] = 'testString'
        resource_query_definition_model['queries'] = [resource_query_model]
        resource_query_definition_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        query_id = 'testString'
        resource_query_definition = resource_query_definition_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "query_id": query_id,
            "resource_query_definition": resource_query_definition,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_resources_query(**req_copy)



class TestExecuteResourceQuery():
    """
    Test Class for execute_resource_query
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_execute_resource_query_all_params(self):
        """
        execute_resource_query()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query/testString')
        mock_response = '{"response": [{"query_type": "workspaces", "query_condition": [{"name": "name", "value": "value", "description": "description"}], "query_select": ["query_select"], "query_output": [{"name": "name", "value": "value"}]}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        query_id = 'testString'

        # Invoke method
        response = service.execute_resource_query(
            query_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_execute_resource_query_value_error(self):
        """
        test_execute_resource_query_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query/testString')
        mock_response = '{"response": [{"query_type": "workspaces", "query_condition": [{"name": "name", "value": "value", "description": "description"}], "query_select": ["query_select"], "query_output": [{"name": "name", "value": "value"}]}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        query_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "query_id": query_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.execute_resource_query(**req_copy)



class TestDeleteResourcesQuery():
    """
    Test Class for delete_resources_query
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_resources_query_all_params(self):
        """
        delete_resources_query()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        query_id = 'testString'
        force = True
        propagate = True

        # Invoke method
        response = service.delete_resources_query(
            query_id,
            force=force,
            propagate=propagate,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_resources_query_required_params(self):
        """
        test_delete_resources_query_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        query_id = 'testString'

        # Invoke method
        response = service.delete_resources_query(
            query_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_resources_query_value_error(self):
        """
        test_delete_resources_query_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/resources_query/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        query_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "query_id": query_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_resources_query(**req_copy)



# endregion
##############################################################################
# End of Service: ResourceQuery
##############################################################################

##############################################################################
# Start of Service: ReferenceData
##############################################################################
# region

class TestGetDatasetVariableValue():
    """
    Test Class for get_dataset_variable_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_dataset_variable_value_all_params(self):
        """
        get_dataset_variable_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString/values/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        dataset_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_dataset_variable_value(
            dataset_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_dataset_variable_value_value_error(self):
        """
        test_get_dataset_variable_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/datasets/testString/values/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        dataset_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "dataset_id": dataset_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_dataset_variable_value(**req_copy)



class TestGetCredentialVariableValue():
    """
    Test Class for get_credential_variable_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_credential_variable_value_all_params(self):
        """
        get_credential_variable_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString/variables/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        creds_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_credential_variable_value(
            creds_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_credential_variable_value_value_error(self):
        """
        test_get_credential_variable_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/credentials/testString/variables/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        creds_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "creds_id": creds_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_credential_variable_value(**req_copy)



class TestGetInventoryVariableValue():
    """
    Test Class for get_inventory_variable_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_inventory_variable_value_all_params(self):
        """
        get_inventory_variable_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories/testString/variables/testString/value')
        mock_response = '{"values": ["values"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        inventory_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_inventory_variable_value(
            inventory_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_inventory_variable_value_value_error(self):
        """
        test_get_inventory_variable_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/inventories/testString/variables/testString/value')
        mock_response = '{"values": ["values"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        inventory_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "inventory_id": inventory_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_inventory_variable_value(**req_copy)



class TestGetWorkspaceInputValue():
    """
    Test Class for get_workspace_input_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_workspace_input_value_all_params(self):
        """
        get_workspace_input_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/inputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        var_name = 'testString'
        limit = 1
        offset = 0

        # Invoke method
        response = service.get_workspace_input_value(
            workspace_id,
            var_name,
            limit=limit,
            offset=offset,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'limit={}'.format(limit) in query_string
        assert 'offset={}'.format(offset) in query_string


    @responses.activate
    def test_get_workspace_input_value_required_params(self):
        """
        test_get_workspace_input_value_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/inputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_workspace_input_value(
            workspace_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_workspace_input_value_value_error(self):
        """
        test_get_workspace_input_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/inputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_workspace_input_value(**req_copy)



class TestGetWorkspaceOutputValue():
    """
    Test Class for get_workspace_output_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_workspace_output_value_all_params(self):
        """
        get_workspace_output_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/outputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        var_name = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_workspace_output_value(
            workspace_id,
            var_name,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_workspace_output_value_required_params(self):
        """
        test_get_workspace_output_value_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/outputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_workspace_output_value(
            workspace_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_workspace_output_value_value_error(self):
        """
        test_get_workspace_output_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/outputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_workspace_output_value(**req_copy)



class TestGetWorkspaceSettingsValue():
    """
    Test Class for get_workspace_settings_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_workspace_settings_value_all_params(self):
        """
        get_workspace_settings_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/settings/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        var_name = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_workspace_settings_value(
            workspace_id,
            var_name,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_workspace_settings_value_required_params(self):
        """
        test_get_workspace_settings_value_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/settings/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_workspace_settings_value(
            workspace_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_workspace_settings_value_value_error(self):
        """
        test_get_workspace_settings_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/settings/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_workspace_settings_value(**req_copy)



class TestGetWorkspaceTemplateInputValue():
    """
    Test Class for get_workspace_template_input_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_workspace_template_input_value_all_params(self):
        """
        get_workspace_template_input_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/inputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        var_name = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_workspace_template_input_value(
            workspace_id,
            template_id,
            var_name,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_workspace_template_input_value_required_params(self):
        """
        test_get_workspace_template_input_value_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/inputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_workspace_template_input_value(
            workspace_id,
            template_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_workspace_template_input_value_value_error(self):
        """
        test_get_workspace_template_input_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/inputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_workspace_template_input_value(**req_copy)



class TestGetWorkspaceTemplateOutputValue():
    """
    Test Class for get_workspace_template_output_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_workspace_template_output_value_all_params(self):
        """
        get_workspace_template_output_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/outputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        var_name = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_workspace_template_output_value(
            workspace_id,
            template_id,
            var_name,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_workspace_template_output_value_required_params(self):
        """
        test_get_workspace_template_output_value_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/outputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_workspace_template_output_value(
            workspace_id,
            template_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_workspace_template_output_value_value_error(self):
        """
        test_get_workspace_template_output_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/outputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_workspace_template_output_value(**req_copy)



class TestGetWorkspaceTemplateSettingValue():
    """
    Test Class for get_workspace_template_setting_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_workspace_template_setting_value_all_params(self):
        """
        get_workspace_template_setting_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/settings/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        var_name = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_workspace_template_setting_value(
            workspace_id,
            template_id,
            var_name,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_workspace_template_setting_value_required_params(self):
        """
        test_get_workspace_template_setting_value_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/settings/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_workspace_template_setting_value(
            workspace_id,
            template_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_workspace_template_setting_value_value_error(self):
        """
        test_get_workspace_template_setting_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/workspaces/testString/templates/testString/settings/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        workspace_id = 'testString'
        template_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "workspace_id": workspace_id,
            "template_id": template_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_workspace_template_setting_value(**req_copy)



class TestGetJobWorkspaceInputValue():
    """
    Test Class for get_job_workspace_input_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_job_workspace_input_value_all_params(self):
        """
        get_job_workspace_input_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/workspaces/testString/inputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'
        workspace_id = 'testString'
        var_name = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_job_workspace_input_value(
            job_id,
            workspace_id,
            var_name,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_job_workspace_input_value_required_params(self):
        """
        test_get_job_workspace_input_value_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/workspaces/testString/inputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'
        workspace_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_job_workspace_input_value(
            job_id,
            workspace_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_job_workspace_input_value_value_error(self):
        """
        test_get_job_workspace_input_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/workspaces/testString/inputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'
        workspace_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "job_id": job_id,
            "workspace_id": workspace_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_job_workspace_input_value(**req_copy)



class TestGetJobWorkspaceOutputValue():
    """
    Test Class for get_job_workspace_output_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_job_workspace_output_value_all_params(self):
        """
        get_job_workspace_output_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/workspaces/testString/outputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'
        workspace_id = 'testString'
        var_name = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_job_workspace_output_value(
            job_id,
            workspace_id,
            var_name,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_job_workspace_output_value_required_params(self):
        """
        test_get_job_workspace_output_value_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/workspaces/testString/outputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'
        workspace_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_job_workspace_output_value(
            job_id,
            workspace_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_job_workspace_output_value_value_error(self):
        """
        test_get_job_workspace_output_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/workspaces/testString/outputs/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'
        workspace_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "job_id": job_id,
            "workspace_id": workspace_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_job_workspace_output_value(**req_copy)



class TestGetJobWorkspaceSettingValue():
    """
    Test Class for get_job_workspace_setting_value
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_job_workspace_setting_value_all_params(self):
        """
        get_job_workspace_setting_value()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/workspaces/testString/settings/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'
        workspace_id = 'testString'
        var_name = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_job_workspace_setting_value(
            job_id,
            workspace_id,
            var_name,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_job_workspace_setting_value_required_params(self):
        """
        test_get_job_workspace_setting_value_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/workspaces/testString/settings/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'
        workspace_id = 'testString'
        var_name = 'testString'

        # Invoke method
        response = service.get_job_workspace_setting_value(
            job_id,
            workspace_id,
            var_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_job_workspace_setting_value_value_error(self):
        """
        test_get_job_workspace_setting_value_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/jobs/testString/workspaces/testString/settings/testString/value')
        mock_response = '{"value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        job_id = 'testString'
        workspace_id = 'testString'
        var_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "job_id": job_id,
            "workspace_id": workspace_id,
            "var_name": var_name,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_job_workspace_setting_value(**req_copy)



# endregion
##############################################################################
# End of Service: ReferenceData
##############################################################################

##############################################################################
# Start of Service: SettingsTriggers
##############################################################################
# region

class TestListTriggers():
    """
    Test Class for list_triggers
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_triggers_all_params(self):
        """
        list_triggers()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/triggers')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "triggers": [{"name": "name", "type": "action", "description": "description", "resource_group": "resource_group", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "trigger_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'

        # Invoke method
        response = service.list_triggers(
            offset=offset,
            limit=limit,
            sort=sort,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string


    @responses.activate
    def test_list_triggers_required_params(self):
        """
        test_list_triggers_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/triggers')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "triggers": [{"name": "name", "type": "action", "description": "description", "resource_group": "resource_group", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "trigger_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_triggers()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateTrigger():
    """
    Test Class for create_trigger
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_trigger_all_params(self):
        """
        create_trigger()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/triggers')
        mock_response = '{"name": "name", "type": "action", "description": "description", "resource_group": "resource_group", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "trigger_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Trigger model
        trigger_model = {}
        trigger_model['name'] = 'testString'
        trigger_model['type'] = 'action'
        trigger_model['description'] = 'testString'
        trigger_model['resource_group'] = 'testString'
        trigger_model['service_id'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model['apikey'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model['location'] = 'us-south'
        trigger_model['tags'] = ['testString']
        trigger_model['job_triggers'] = [trigger_job_model]
        trigger_model['scheduled_triggers'] = [trigger_scheduled_model]
        trigger_model['user_state'] = user_state_model
        trigger_model['sys_lock'] = system_lock_model
        trigger_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        trigger = trigger_model

        # Invoke method
        response = service.create_trigger(
            trigger,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == trigger


    @responses.activate
    def test_create_trigger_value_error(self):
        """
        test_create_trigger_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/triggers')
        mock_response = '{"name": "name", "type": "action", "description": "description", "resource_group": "resource_group", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "trigger_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Trigger model
        trigger_model = {}
        trigger_model['name'] = 'testString'
        trigger_model['type'] = 'action'
        trigger_model['description'] = 'testString'
        trigger_model['resource_group'] = 'testString'
        trigger_model['service_id'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model['apikey'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model['location'] = 'us-south'
        trigger_model['tags'] = ['testString']
        trigger_model['job_triggers'] = [trigger_job_model]
        trigger_model['scheduled_triggers'] = [trigger_scheduled_model]
        trigger_model['user_state'] = user_state_model
        trigger_model['sys_lock'] = system_lock_model
        trigger_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        trigger = trigger_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "trigger": trigger,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_trigger(**req_copy)



class TestGetTrigger():
    """
    Test Class for get_trigger
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_trigger_all_params(self):
        """
        get_trigger()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/triggers/testString')
        mock_response = '{"name": "name", "type": "action", "description": "description", "resource_group": "resource_group", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "trigger_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        trigger_id = 'testString'

        # Invoke method
        response = service.get_trigger(
            trigger_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_trigger_value_error(self):
        """
        test_get_trigger_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/triggers/testString')
        mock_response = '{"name": "name", "type": "action", "description": "description", "resource_group": "resource_group", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "trigger_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        trigger_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "trigger_id": trigger_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_trigger(**req_copy)



class TestReplaceTrigger():
    """
    Test Class for replace_trigger
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_trigger_all_params(self):
        """
        replace_trigger()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/triggers/testString')
        mock_response = '{"name": "name", "type": "action", "description": "description", "resource_group": "resource_group", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "trigger_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Trigger model
        trigger_model = {}
        trigger_model['name'] = 'testString'
        trigger_model['type'] = 'action'
        trigger_model['description'] = 'testString'
        trigger_model['resource_group'] = 'testString'
        trigger_model['service_id'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model['apikey'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model['location'] = 'us-south'
        trigger_model['tags'] = ['testString']
        trigger_model['job_triggers'] = [trigger_job_model]
        trigger_model['scheduled_triggers'] = [trigger_scheduled_model]
        trigger_model['user_state'] = user_state_model
        trigger_model['sys_lock'] = system_lock_model
        trigger_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        trigger_id = 'testString'
        trigger = trigger_model

        # Invoke method
        response = service.replace_trigger(
            trigger_id,
            trigger,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == trigger


    @responses.activate
    def test_replace_trigger_value_error(self):
        """
        test_replace_trigger_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/triggers/testString')
        mock_response = '{"name": "name", "type": "action", "description": "description", "resource_group": "resource_group", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "command_parameter": "command_parameter", "command_options": ["command_options"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "tags": ["tags"], "id": "id", "name": "name", "description": "description", "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "duration", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "workspace_name", "flow_id": "flow_id", "flow_name": "flow_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "template_data": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "action_name", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "name", "id": "id", "description": "description", "location": "us-south", "resource_group": "resource_group", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "inventories_ini": "inventories_ini", "resource_queries": ["resource_queries"]}, "materialized_inventory": "materialized_inventory"}, "system_job_data": {"key_id": "key_id", "schematics_resource_id": ["schematics_resource_id"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "flow_id", "flow_name": "flow_name", "workitems": [{"command_object_id": "command_object_id", "command_object_name": "command_object_name", "layers": "layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_id": "job_id", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "name", "host": "host"}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "log_store_url": "log_store_url", "state_store_url": "state_store_url", "results_url": "results_url", "updated_at": "2019-01-01T12:00:00.000Z"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "trigger_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkitem model
        job_status_workitem_model = {}
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusFlow model
        job_status_flow_model = {}
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusTemplate model
        job_status_template_model = {}
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusWorkspace model
        job_status_workspace_model = {}
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusAction model
        job_status_action_model = {}
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model = {}
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatusSystem model
        job_status_system_model = {}
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobStatus model
        job_status_model = {}
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataTemplate model
        job_data_template_model = {}
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkspace model
        job_data_workspace_model = {}
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a InventoryResourceRecord model
        inventory_resource_record_model = {}
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataAction model
        job_data_action_model = {}
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataSystem model
        job_data_system_model = {}
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model = {}
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataWorkItem model
        job_data_work_item_model = {}
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobDataFlow model
        job_data_flow_model = {}
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobData model
        job_data_model = {}
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BastionResourceDefinition model
        bastion_resource_definition_model = {}
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model = {}
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model = {}
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model = {}
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model = {}
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model = {}
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model = {}
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model = {}
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a JobLogSummary model
        job_log_summary_model = {}
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Job model
        job_model = {}
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['location'] = 'us-south'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerJob model
        trigger_job_model = {}
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TriggerScheduled model
        trigger_scheduled_model = {}
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Trigger model
        trigger_model = {}
        trigger_model['name'] = 'testString'
        trigger_model['type'] = 'action'
        trigger_model['description'] = 'testString'
        trigger_model['resource_group'] = 'testString'
        trigger_model['service_id'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model['apikey'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model['location'] = 'us-south'
        trigger_model['tags'] = ['testString']
        trigger_model['job_triggers'] = [trigger_job_model]
        trigger_model['scheduled_triggers'] = [trigger_scheduled_model]
        trigger_model['user_state'] = user_state_model
        trigger_model['sys_lock'] = system_lock_model
        trigger_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        trigger_id = 'testString'
        trigger = trigger_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "trigger_id": trigger_id,
            "trigger": trigger,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_trigger(**req_copy)



class TestDeleteTrigger():
    """
    Test Class for delete_trigger
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_trigger_all_params(self):
        """
        delete_trigger()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/triggers/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        trigger_id = 'testString'

        # Invoke method
        response = service.delete_trigger(
            trigger_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_trigger_value_error(self):
        """
        test_delete_trigger_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/triggers/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        trigger_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "trigger_id": trigger_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_trigger(**req_copy)



# endregion
##############################################################################
# End of Service: SettingsTriggers
##############################################################################

##############################################################################
# Start of Service: SettingsHook
##############################################################################
# region

class TestListWebhook():
    """
    Test Class for list_webhook
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_webhook_all_params(self):
        """
        list_webhook()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/hooks')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "hooks": [{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "hook_endpoint_url": "hook_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "hook_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'

        # Invoke method
        response = service.list_webhook(
            offset=offset,
            limit=limit,
            sort=sort,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string


    @responses.activate
    def test_list_webhook_required_params(self):
        """
        test_list_webhook_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/hooks')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "hooks": [{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "hook_endpoint_url": "hook_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "hook_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_webhook()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateWebhook():
    """
    Test Class for create_webhook
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_webhook_all_params(self):
        """
        create_webhook()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/hooks')
        mock_response = '{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "hook_endpoint_url": "hook_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "hook_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WebHook model
        web_hook_model = {}
        web_hook_model['command_name'] = 'workspace_plan'
        web_hook_model['hook_type'] = 'hook'
        web_hook_model['hook_site'] = 'before'
        web_hook_model['location'] = 'us-south'
        web_hook_model['resource_group'] = 'testString'
        web_hook_model['tags'] = ['testString']
        web_hook_model['hook_endpoint_url'] = 'testString'
        web_hook_model['service_id'] = 'testString'
        web_hook_model['apikey'] = 'testString'
        web_hook_model['user_state'] = user_state_model
        web_hook_model['ignore_inflight_operations'] = True
        web_hook_model['sys_lock'] = system_lock_model
        web_hook_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        web_hook = web_hook_model

        # Invoke method
        response = service.create_webhook(
            web_hook,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == web_hook


    @responses.activate
    def test_create_webhook_value_error(self):
        """
        test_create_webhook_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/hooks')
        mock_response = '{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "hook_endpoint_url": "hook_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "hook_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WebHook model
        web_hook_model = {}
        web_hook_model['command_name'] = 'workspace_plan'
        web_hook_model['hook_type'] = 'hook'
        web_hook_model['hook_site'] = 'before'
        web_hook_model['location'] = 'us-south'
        web_hook_model['resource_group'] = 'testString'
        web_hook_model['tags'] = ['testString']
        web_hook_model['hook_endpoint_url'] = 'testString'
        web_hook_model['service_id'] = 'testString'
        web_hook_model['apikey'] = 'testString'
        web_hook_model['user_state'] = user_state_model
        web_hook_model['ignore_inflight_operations'] = True
        web_hook_model['sys_lock'] = system_lock_model
        web_hook_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        web_hook = web_hook_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "web_hook": web_hook,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_webhook(**req_copy)



class TestGetWebhook():
    """
    Test Class for get_webhook
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_webhook_all_params(self):
        """
        get_webhook()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/hooks/testString')
        mock_response = '{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "hook_endpoint_url": "hook_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "hook_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        hook_id = 'testString'

        # Invoke method
        response = service.get_webhook(
            hook_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_webhook_value_error(self):
        """
        test_get_webhook_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/hooks/testString')
        mock_response = '{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "hook_endpoint_url": "hook_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "hook_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        hook_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "hook_id": hook_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_webhook(**req_copy)



class TestReplaceWebhook():
    """
    Test Class for replace_webhook
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_webhook_all_params(self):
        """
        replace_webhook()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/hooks/testString')
        mock_response = '{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "hook_endpoint_url": "hook_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "hook_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WebHook model
        web_hook_model = {}
        web_hook_model['command_name'] = 'workspace_plan'
        web_hook_model['hook_type'] = 'hook'
        web_hook_model['hook_site'] = 'before'
        web_hook_model['location'] = 'us-south'
        web_hook_model['resource_group'] = 'testString'
        web_hook_model['tags'] = ['testString']
        web_hook_model['hook_endpoint_url'] = 'testString'
        web_hook_model['service_id'] = 'testString'
        web_hook_model['apikey'] = 'testString'
        web_hook_model['user_state'] = user_state_model
        web_hook_model['ignore_inflight_operations'] = True
        web_hook_model['sys_lock'] = system_lock_model
        web_hook_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        hook_id = 'testString'
        web_hook = web_hook_model

        # Invoke method
        response = service.replace_webhook(
            hook_id,
            web_hook,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == web_hook


    @responses.activate
    def test_replace_webhook_value_error(self):
        """
        test_replace_webhook_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/hooks/testString')
        mock_response = '{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "hook_endpoint_url": "hook_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "hook_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WebHook model
        web_hook_model = {}
        web_hook_model['command_name'] = 'workspace_plan'
        web_hook_model['hook_type'] = 'hook'
        web_hook_model['hook_site'] = 'before'
        web_hook_model['location'] = 'us-south'
        web_hook_model['resource_group'] = 'testString'
        web_hook_model['tags'] = ['testString']
        web_hook_model['hook_endpoint_url'] = 'testString'
        web_hook_model['service_id'] = 'testString'
        web_hook_model['apikey'] = 'testString'
        web_hook_model['user_state'] = user_state_model
        web_hook_model['ignore_inflight_operations'] = True
        web_hook_model['sys_lock'] = system_lock_model
        web_hook_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        hook_id = 'testString'
        web_hook = web_hook_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "hook_id": hook_id,
            "web_hook": web_hook,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_webhook(**req_copy)



class TestDeleteWebhook():
    """
    Test Class for delete_webhook
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_webhook_all_params(self):
        """
        delete_webhook()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/hooks/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        hook_id = 'testString'

        # Invoke method
        response = service.delete_webhook(
            hook_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_webhook_value_error(self):
        """
        test_delete_webhook_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/hooks/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        hook_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "hook_id": hook_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_webhook(**req_copy)



# endregion
##############################################################################
# End of Service: SettingsHook
##############################################################################

##############################################################################
# Start of Service: SettingsPrivateCluster
##############################################################################
# region

class TestGetPrivateCluster():
    """
    Test Class for get_private_cluster
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_private_cluster_all_params(self):
        """
        get_private_cluster()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/private_clusters')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "clusters": [{"cluster_id": "cluster_id", "kube_config": "kube_config", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "cluster_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.get_private_cluster()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreatePrivateCluster():
    """
    Test Class for create_private_cluster
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_private_cluster_all_params(self):
        """
        create_private_cluster()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/private_clusters')
        mock_response = '{"cluster_id": "cluster_id", "kube_config": "kube_config", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "cluster_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a PrivateCluster model
        private_cluster_model = {}
        private_cluster_model['cluster_id'] = 'testString'
        private_cluster_model['kube_config'] = 'testString'
        private_cluster_model['tags'] = ['testString']
        private_cluster_model['user_state'] = user_state_model
        private_cluster_model['registered_by'] = 'testString'
        private_cluster_model['registered_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model['updated_by'] = 'testString'
        private_cluster_model['sys_lock'] = system_lock_model
        private_cluster_model['cluster_health'] = 'active'
        private_cluster_model['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        private_cluster = private_cluster_model

        # Invoke method
        response = service.create_private_cluster(
            private_cluster,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == private_cluster


    @responses.activate
    def test_create_private_cluster_value_error(self):
        """
        test_create_private_cluster_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/private_clusters')
        mock_response = '{"cluster_id": "cluster_id", "kube_config": "kube_config", "tags": ["tags"], "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "cluster_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a PrivateCluster model
        private_cluster_model = {}
        private_cluster_model['cluster_id'] = 'testString'
        private_cluster_model['kube_config'] = 'testString'
        private_cluster_model['tags'] = ['testString']
        private_cluster_model['user_state'] = user_state_model
        private_cluster_model['registered_by'] = 'testString'
        private_cluster_model['registered_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model['updated_by'] = 'testString'
        private_cluster_model['sys_lock'] = system_lock_model
        private_cluster_model['cluster_health'] = 'active'
        private_cluster_model['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        private_cluster = private_cluster_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "private_cluster": private_cluster,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_private_cluster(**req_copy)



class TestDeletePrivateCluster():
    """
    Test Class for delete_private_cluster
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_private_cluster_all_params(self):
        """
        delete_private_cluster()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/private_clusters')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Invoke method
        response = service.delete_private_cluster()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


# endregion
##############################################################################
# End of Service: SettingsPrivateCluster
##############################################################################

##############################################################################
# Start of Service: SettingsExternalAdapter
##############################################################################
# region

class TestListAdapter():
    """
    Test Class for list_adapter
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_adapter_all_params(self):
        """
        list_adapter()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/adapters')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "adapters": [{"adapter_name": "adapter_name", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "adapter_endpoint_url": "adapter_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "adapter_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.list_adapter(
            offset=offset,
            limit=limit,
            sort=sort,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_list_adapter_required_params(self):
        """
        test_list_adapter_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/adapters')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "adapters": [{"adapter_name": "adapter_name", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "adapter_endpoint_url": "adapter_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "adapter_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_adapter()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateAdapter():
    """
    Test Class for create_adapter
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_adapter_all_params(self):
        """
        create_adapter()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/adapters')
        mock_response = '{"adapter_name": "adapter_name", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "adapter_endpoint_url": "adapter_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "adapter_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Adapter model
        adapter_model = {}
        adapter_model['adapter_name'] = 'testString'
        adapter_model['adapter_type'] = 'scm_adapter'
        adapter_model['location'] = 'us-south'
        adapter_model['resource_group'] = 'testString'
        adapter_model['tags'] = ['testString']
        adapter_model['adapter_endpoint_url'] = 'testString'
        adapter_model['service_id'] = 'testString'
        adapter_model['apikey'] = 'testString'
        adapter_model['user_state'] = user_state_model
        adapter_model['ignore_inflight_operations'] = True
        adapter_model['adapter_id'] = 'testString'
        adapter_model['registered_by'] = 'testString'
        adapter_model['registered_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['updated_by'] = 'testString'
        adapter_model['sys_lock'] = system_lock_model
        adapter_model['adapter_health'] = 'active'
        adapter_model['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        adapter = adapter_model

        # Invoke method
        response = service.create_adapter(
            adapter,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == adapter


    @responses.activate
    def test_create_adapter_value_error(self):
        """
        test_create_adapter_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/adapters')
        mock_response = '{"adapter_name": "adapter_name", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "adapter_endpoint_url": "adapter_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "adapter_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Adapter model
        adapter_model = {}
        adapter_model['adapter_name'] = 'testString'
        adapter_model['adapter_type'] = 'scm_adapter'
        adapter_model['location'] = 'us-south'
        adapter_model['resource_group'] = 'testString'
        adapter_model['tags'] = ['testString']
        adapter_model['adapter_endpoint_url'] = 'testString'
        adapter_model['service_id'] = 'testString'
        adapter_model['apikey'] = 'testString'
        adapter_model['user_state'] = user_state_model
        adapter_model['ignore_inflight_operations'] = True
        adapter_model['adapter_id'] = 'testString'
        adapter_model['registered_by'] = 'testString'
        adapter_model['registered_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['updated_by'] = 'testString'
        adapter_model['sys_lock'] = system_lock_model
        adapter_model['adapter_health'] = 'active'
        adapter_model['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        adapter = adapter_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "adapter": adapter,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_adapter(**req_copy)



class TestGetAdapter():
    """
    Test Class for get_adapter
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_adapter_all_params(self):
        """
        get_adapter()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/adapters/testString')
        mock_response = '{"adapter_name": "adapter_name", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "adapter_endpoint_url": "adapter_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "adapter_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        adapter_id = 'testString'

        # Invoke method
        response = service.get_adapter(
            adapter_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_adapter_value_error(self):
        """
        test_get_adapter_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/adapters/testString')
        mock_response = '{"adapter_name": "adapter_name", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "adapter_endpoint_url": "adapter_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "adapter_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        adapter_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "adapter_id": adapter_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_adapter(**req_copy)



class TestReplaceAdapter():
    """
    Test Class for replace_adapter
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_adapter_all_params(self):
        """
        replace_adapter()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/adapters/testString')
        mock_response = '{"adapter_name": "adapter_name", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "adapter_endpoint_url": "adapter_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "adapter_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Adapter model
        adapter_model = {}
        adapter_model['adapter_name'] = 'testString'
        adapter_model['adapter_type'] = 'scm_adapter'
        adapter_model['location'] = 'us-south'
        adapter_model['resource_group'] = 'testString'
        adapter_model['tags'] = ['testString']
        adapter_model['adapter_endpoint_url'] = 'testString'
        adapter_model['service_id'] = 'testString'
        adapter_model['apikey'] = 'testString'
        adapter_model['user_state'] = user_state_model
        adapter_model['ignore_inflight_operations'] = True
        adapter_model['adapter_id'] = 'testString'
        adapter_model['registered_by'] = 'testString'
        adapter_model['registered_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['updated_by'] = 'testString'
        adapter_model['sys_lock'] = system_lock_model
        adapter_model['adapter_health'] = 'active'
        adapter_model['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        adapter_id = 'testString'
        adapter = adapter_model

        # Invoke method
        response = service.replace_adapter(
            adapter_id,
            adapter,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == adapter


    @responses.activate
    def test_replace_adapter_value_error(self):
        """
        test_replace_adapter_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/adapters/testString')
        mock_response = '{"adapter_name": "adapter_name", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "resource_group", "tags": ["tags"], "adapter_endpoint_url": "adapter_endpoint_url", "service_id": "service_id", "apikey": "apikey", "user_state": {"state": "draft", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "adapter_id", "registered_by": "registered_by", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a UserState model
        user_state_model = {}
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Adapter model
        adapter_model = {}
        adapter_model['adapter_name'] = 'testString'
        adapter_model['adapter_type'] = 'scm_adapter'
        adapter_model['location'] = 'us-south'
        adapter_model['resource_group'] = 'testString'
        adapter_model['tags'] = ['testString']
        adapter_model['adapter_endpoint_url'] = 'testString'
        adapter_model['service_id'] = 'testString'
        adapter_model['apikey'] = 'testString'
        adapter_model['user_state'] = user_state_model
        adapter_model['ignore_inflight_operations'] = True
        adapter_model['adapter_id'] = 'testString'
        adapter_model['registered_by'] = 'testString'
        adapter_model['registered_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['updated_by'] = 'testString'
        adapter_model['sys_lock'] = system_lock_model
        adapter_model['adapter_health'] = 'active'
        adapter_model['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        adapter_id = 'testString'
        adapter = adapter_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "adapter_id": adapter_id,
            "adapter": adapter,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_adapter(**req_copy)



class TestDeleteAdapter():
    """
    Test Class for delete_adapter
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_adapter_all_params(self):
        """
        delete_adapter()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/adapters/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        adapter_id = 'testString'

        # Invoke method
        response = service.delete_adapter(
            adapter_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_adapter_value_error(self):
        """
        test_delete_adapter_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/adapters/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        adapter_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "adapter_id": adapter_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_adapter(**req_copy)



# endregion
##############################################################################
# End of Service: SettingsExternalAdapter
##############################################################################

##############################################################################
# Start of Service: SettingsDatasource
##############################################################################
# region

class TestListConnection():
    """
    Test Class for list_connection
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_connection_all_params(self):
        """
        list_connection()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/connections')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "connections": [{"name": "name", "resource_group": "resource_group", "tags": ["tags"], "source_type": "git_hub", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'

        # Invoke method
        response = service.list_connection(
            offset=offset,
            limit=limit,
            sort=sort,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string


    @responses.activate
    def test_list_connection_required_params(self):
        """
        test_list_connection_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/connections')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "connections": [{"name": "name", "resource_group": "resource_group", "tags": ["tags"], "source_type": "git_hub", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_connection()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateConnection():
    """
    Test Class for create_connection
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_connection_all_params(self):
        """
        create_connection()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/connections')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "tags": ["tags"], "connection_details": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "connection_secrets": {"type": "apikey", "apikey": {"key": "key"}}, "id": "id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConnectionSecretApikey model
        connection_secret_apikey_model = {}
        connection_secret_apikey_model['key'] = 'testString'
        connection_secret_apikey_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConnectionSecret model
        connection_secret_model = {}
        connection_secret_model['type'] = 'apikey'
        connection_secret_model['apikey'] = connection_secret_apikey_model
        connection_secret_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Connection model
        connection_model = {}
        connection_model['name'] = 'testString'
        connection_model['description'] = 'testString'
        connection_model['resource_group'] = 'testString'
        connection_model['tags'] = ['testString']
        connection_model['connection_details'] = external_source_model
        connection_model['connection_secrets'] = connection_secret_model
        connection_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        connection = connection_model

        # Invoke method
        response = service.create_connection(
            connection,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == connection


    @responses.activate
    def test_create_connection_value_error(self):
        """
        test_create_connection_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/connections')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "tags": ["tags"], "connection_details": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "connection_secrets": {"type": "apikey", "apikey": {"key": "key"}}, "id": "id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConnectionSecretApikey model
        connection_secret_apikey_model = {}
        connection_secret_apikey_model['key'] = 'testString'
        connection_secret_apikey_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConnectionSecret model
        connection_secret_model = {}
        connection_secret_model['type'] = 'apikey'
        connection_secret_model['apikey'] = connection_secret_apikey_model
        connection_secret_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Connection model
        connection_model = {}
        connection_model['name'] = 'testString'
        connection_model['description'] = 'testString'
        connection_model['resource_group'] = 'testString'
        connection_model['tags'] = ['testString']
        connection_model['connection_details'] = external_source_model
        connection_model['connection_secrets'] = connection_secret_model
        connection_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        connection = connection_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "connection": connection,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_connection(**req_copy)



class TestListDatasources():
    """
    Test Class for list_datasources
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_datasources_all_params(self):
        """
        list_datasources()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/datasources')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "datasources": [{"name": "name", "description": "description", "resource_group": "resource_group", "tags": ["tags"], "data_source": "data_source", "connection": "connection", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        sort = 'testString'

        # Invoke method
        response = service.list_datasources(
            offset=offset,
            limit=limit,
            sort=sort,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string


    @responses.activate
    def test_list_datasources_required_params(self):
        """
        test_list_datasources_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/datasources')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "datasources": [{"name": "name", "description": "description", "resource_group": "resource_group", "tags": ["tags"], "data_source": "data_source", "connection": "connection", "id": "id", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_datasources()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateDatasource():
    """
    Test Class for create_datasource
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_datasource_all_params(self):
        """
        create_datasource()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/datasources')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "tags": ["tags"], "source_type": "git", "data_source": "data_source", "connection": "connection", "replica_enabled": false, "replica_invalidation_frequency": "hourly", "id": "id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a Datasource model
        datasource_model = {}
        datasource_model['name'] = 'testString'
        datasource_model['description'] = 'testString'
        datasource_model['resource_group'] = 'testString'
        datasource_model['tags'] = ['testString']
        datasource_model['source_type'] = 'git'
        datasource_model['data_source'] = 'testString'
        datasource_model['connection'] = 'testString'
        datasource_model['replica_enabled'] = True
        datasource_model['replica_invalidation_frequency'] = 'hourly'
        datasource_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        datasource = datasource_model

        # Invoke method
        response = service.create_datasource(
            datasource,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == datasource


    @responses.activate
    def test_create_datasource_value_error(self):
        """
        test_create_datasource_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/datasources')
        mock_response = '{"name": "name", "description": "description", "resource_group": "resource_group", "tags": ["tags"], "source_type": "git", "data_source": "data_source", "connection": "connection", "replica_enabled": false, "replica_invalidation_frequency": "hourly", "id": "id", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a Datasource model
        datasource_model = {}
        datasource_model['name'] = 'testString'
        datasource_model['description'] = 'testString'
        datasource_model['resource_group'] = 'testString'
        datasource_model['tags'] = ['testString']
        datasource_model['source_type'] = 'git'
        datasource_model['data_source'] = 'testString'
        datasource_model['connection'] = 'testString'
        datasource_model['replica_enabled'] = True
        datasource_model['replica_invalidation_frequency'] = 'hourly'
        datasource_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        datasource = datasource_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "datasource": datasource,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_datasource(**req_copy)



# endregion
##############################################################################
# End of Service: SettingsDatasource
##############################################################################

##############################################################################
# Start of Service: Fulfilment
##############################################################################
# region

class TestListCart():
    """
    Test Class for list_cart
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_cart_all_params(self):
        """
        list_cart()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "cart": [{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "service_name": "SatelliteLocation", "resource_group": "resource_group", "tags": ["tags"], "location": "us-south", "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        service = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.list_cart(
            service,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'service={}'.format(service) in query_string
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_list_cart_required_params(self):
        """
        test_list_cart_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "cart": [{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "service_name": "SatelliteLocation", "resource_group": "resource_group", "tags": ["tags"], "location": "us-south", "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        service = 'testString'

        # Invoke method
        response = service.list_cart(
            service,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'service={}'.format(service) in query_string


    @responses.activate
    def test_list_cart_value_error(self):
        """
        test_list_cart_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "cart": [{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "service_name": "SatelliteLocation", "resource_group": "resource_group", "tags": ["tags"], "location": "us-south", "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        service = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "service": service,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_cart(**req_copy)



class TestCreateCartOrder():
    """
    Test Class for create_cart_order
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_cart_order_all_params(self):
        """
        create_cart_order()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart')
        mock_response = '{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "target": {"cluster_id": "cluster_id", "cluster_name": "cluster_name", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "namespace", "region": "region", "resource_group_id": "resource_group_id"}, "operation": "install", "service_data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "mapping": [{"type": "type", "input_param_name": "input_param_name", "output_param_name": "output_param_name"}]}], "catalog_id": "catalog_id", "offering_id": "offering_id", "owning_account": "owning_account", "owning_account_crn": "owning_account_crn", "offering_kind_id": "offering_kind_id", "offering_target_kind": "offering_target_kind", "offering_version_id": "offering_version_id", "offering_kind": "offering_kind", "offering_fulfilment_kind": "offering_fulfilment_kind", "offering_version": "offering_version", "offering_provisioner_url": "offering_provisioner_url", "offering_provisioner_ssh": "offering_provisioner_ssh", "offering_provisioner_working_directory": "offering_provisioner_working_directory", "item_sku": {"sku_id": "sku_id", "sku_type": "sku_type", "sku_sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "state", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "resource_group", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "cart_order_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TargetRequest model
        target_request_model = {}
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceMappingRule model
        service_mapping_rule_model = {}
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceVariableData model
        service_variable_data_model = {}
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SKUUserState model
        sku_user_state_model = {}
        sku_user_state_model['state'] = 'testString'
        sku_user_state_model['set_by'] = 'testString'
        sku_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        sku_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ItemSKU model
        item_sku_model = {}
        item_sku_model['sku_id'] = 'testString'
        item_sku_model['sku_type'] = 'testString'
        item_sku_model['sku_sys_lock'] = system_lock_model
        item_sku_model['sku_user_state'] = sku_user_state_model
        item_sku_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a OrderItemConfiguration model
        order_item_configuration_model = {}
        order_item_configuration_model['name'] = 'AWS Satellite'
        order_item_configuration_model['description'] = 'Create satellite location in AWS'
        order_item_configuration_model['inputs'] = [variable_data_model]
        order_item_configuration_model['settings'] = [variable_data_model]
        order_item_configuration_model['outputs'] = [variable_data_model]
        order_item_configuration_model['target'] = target_request_model
        order_item_configuration_model['operation'] = 'install'
        order_item_configuration_model['service_data'] = [service_variable_data_model]
        order_item_configuration_model['catalog_id'] = 'testString'
        order_item_configuration_model['offering_id'] = 'testString'
        order_item_configuration_model['owning_account'] = 'testString'
        order_item_configuration_model['owning_account_crn'] = 'testString'
        order_item_configuration_model['offering_kind_id'] = 'testString'
        order_item_configuration_model['offering_target_kind'] = 'testString'
        order_item_configuration_model['offering_version_id'] = 'testString'
        order_item_configuration_model['offering_kind'] = 'testString'
        order_item_configuration_model['offering_fulfilment_kind'] = 'testString'
        order_item_configuration_model['offering_version'] = 'testString'
        order_item_configuration_model['offering_provisioner_url'] = 'testString'
        order_item_configuration_model['offering_provisioner_ssh'] = 'testString'
        order_item_configuration_model['offering_provisioner_working_directory'] = 'testString'
        order_item_configuration_model['item_sku'] = item_sku_model
        order_item_configuration_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrderUserState model
        cart_order_user_state_model = {}
        cart_order_user_state_model['state'] = 'Order_Create_Init'
        cart_order_user_state_model['set_by'] = 'testString'
        cart_order_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrderLiteState model
        cart_order_lite_state_model = {}
        cart_order_lite_state_model['status_code'] = 'normal'
        cart_order_lite_state_model['status_message'] = 'testString'
        cart_order_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrder model
        cart_order_model = {}
        cart_order_model['name'] = 'MySatelliteLocation'
        cart_order_model['description'] = 'Creates satellite location in AWS'
        cart_order_model['tags'] = ['testString']
        cart_order_model['cart_items'] = [order_item_configuration_model]
        cart_order_model['service_name'] = 'SatelliteLocation'
        cart_order_model['resource_group'] = 'testString'
        cart_order_model['location'] = 'us-south'
        cart_order_model['user_state'] = cart_order_user_state_model
        cart_order_model['sys_lock'] = system_lock_model
        cart_order_model['state'] = cart_order_lite_state_model
        cart_order_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        cart_order = cart_order_model

        # Invoke method
        response = service.create_cart_order(
            cart_order,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == cart_order


    @responses.activate
    def test_create_cart_order_value_error(self):
        """
        test_create_cart_order_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart')
        mock_response = '{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "target": {"cluster_id": "cluster_id", "cluster_name": "cluster_name", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "namespace", "region": "region", "resource_group_id": "resource_group_id"}, "operation": "install", "service_data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "mapping": [{"type": "type", "input_param_name": "input_param_name", "output_param_name": "output_param_name"}]}], "catalog_id": "catalog_id", "offering_id": "offering_id", "owning_account": "owning_account", "owning_account_crn": "owning_account_crn", "offering_kind_id": "offering_kind_id", "offering_target_kind": "offering_target_kind", "offering_version_id": "offering_version_id", "offering_kind": "offering_kind", "offering_fulfilment_kind": "offering_fulfilment_kind", "offering_version": "offering_version", "offering_provisioner_url": "offering_provisioner_url", "offering_provisioner_ssh": "offering_provisioner_ssh", "offering_provisioner_working_directory": "offering_provisioner_working_directory", "item_sku": {"sku_id": "sku_id", "sku_type": "sku_type", "sku_sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "state", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "resource_group", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "cart_order_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TargetRequest model
        target_request_model = {}
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceMappingRule model
        service_mapping_rule_model = {}
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceVariableData model
        service_variable_data_model = {}
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SKUUserState model
        sku_user_state_model = {}
        sku_user_state_model['state'] = 'testString'
        sku_user_state_model['set_by'] = 'testString'
        sku_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        sku_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ItemSKU model
        item_sku_model = {}
        item_sku_model['sku_id'] = 'testString'
        item_sku_model['sku_type'] = 'testString'
        item_sku_model['sku_sys_lock'] = system_lock_model
        item_sku_model['sku_user_state'] = sku_user_state_model
        item_sku_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a OrderItemConfiguration model
        order_item_configuration_model = {}
        order_item_configuration_model['name'] = 'AWS Satellite'
        order_item_configuration_model['description'] = 'Create satellite location in AWS'
        order_item_configuration_model['inputs'] = [variable_data_model]
        order_item_configuration_model['settings'] = [variable_data_model]
        order_item_configuration_model['outputs'] = [variable_data_model]
        order_item_configuration_model['target'] = target_request_model
        order_item_configuration_model['operation'] = 'install'
        order_item_configuration_model['service_data'] = [service_variable_data_model]
        order_item_configuration_model['catalog_id'] = 'testString'
        order_item_configuration_model['offering_id'] = 'testString'
        order_item_configuration_model['owning_account'] = 'testString'
        order_item_configuration_model['owning_account_crn'] = 'testString'
        order_item_configuration_model['offering_kind_id'] = 'testString'
        order_item_configuration_model['offering_target_kind'] = 'testString'
        order_item_configuration_model['offering_version_id'] = 'testString'
        order_item_configuration_model['offering_kind'] = 'testString'
        order_item_configuration_model['offering_fulfilment_kind'] = 'testString'
        order_item_configuration_model['offering_version'] = 'testString'
        order_item_configuration_model['offering_provisioner_url'] = 'testString'
        order_item_configuration_model['offering_provisioner_ssh'] = 'testString'
        order_item_configuration_model['offering_provisioner_working_directory'] = 'testString'
        order_item_configuration_model['item_sku'] = item_sku_model
        order_item_configuration_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrderUserState model
        cart_order_user_state_model = {}
        cart_order_user_state_model['state'] = 'Order_Create_Init'
        cart_order_user_state_model['set_by'] = 'testString'
        cart_order_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrderLiteState model
        cart_order_lite_state_model = {}
        cart_order_lite_state_model['status_code'] = 'normal'
        cart_order_lite_state_model['status_message'] = 'testString'
        cart_order_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrder model
        cart_order_model = {}
        cart_order_model['name'] = 'MySatelliteLocation'
        cart_order_model['description'] = 'Creates satellite location in AWS'
        cart_order_model['tags'] = ['testString']
        cart_order_model['cart_items'] = [order_item_configuration_model]
        cart_order_model['service_name'] = 'SatelliteLocation'
        cart_order_model['resource_group'] = 'testString'
        cart_order_model['location'] = 'us-south'
        cart_order_model['user_state'] = cart_order_user_state_model
        cart_order_model['sys_lock'] = system_lock_model
        cart_order_model['state'] = cart_order_lite_state_model
        cart_order_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        cart_order = cart_order_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "cart_order": cart_order,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_cart_order(**req_copy)



class TestGetCartOrder():
    """
    Test Class for get_cart_order
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_cart_order_all_params(self):
        """
        get_cart_order()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        mock_response = '{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "target": {"cluster_id": "cluster_id", "cluster_name": "cluster_name", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "namespace", "region": "region", "resource_group_id": "resource_group_id"}, "operation": "install", "service_data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "mapping": [{"type": "type", "input_param_name": "input_param_name", "output_param_name": "output_param_name"}]}], "catalog_id": "catalog_id", "offering_id": "offering_id", "owning_account": "owning_account", "owning_account_crn": "owning_account_crn", "offering_kind_id": "offering_kind_id", "offering_target_kind": "offering_target_kind", "offering_version_id": "offering_version_id", "offering_kind": "offering_kind", "offering_fulfilment_kind": "offering_fulfilment_kind", "offering_version": "offering_version", "offering_provisioner_url": "offering_provisioner_url", "offering_provisioner_ssh": "offering_provisioner_ssh", "offering_provisioner_working_directory": "offering_provisioner_working_directory", "item_sku": {"sku_id": "sku_id", "sku_type": "sku_type", "sku_sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "state", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "resource_group", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "cart_order_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.get_cart_order(
            order_id,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_get_cart_order_required_params(self):
        """
        test_get_cart_order_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        mock_response = '{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "target": {"cluster_id": "cluster_id", "cluster_name": "cluster_name", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "namespace", "region": "region", "resource_group_id": "resource_group_id"}, "operation": "install", "service_data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "mapping": [{"type": "type", "input_param_name": "input_param_name", "output_param_name": "output_param_name"}]}], "catalog_id": "catalog_id", "offering_id": "offering_id", "owning_account": "owning_account", "owning_account_crn": "owning_account_crn", "offering_kind_id": "offering_kind_id", "offering_target_kind": "offering_target_kind", "offering_version_id": "offering_version_id", "offering_kind": "offering_kind", "offering_fulfilment_kind": "offering_fulfilment_kind", "offering_version": "offering_version", "offering_provisioner_url": "offering_provisioner_url", "offering_provisioner_ssh": "offering_provisioner_ssh", "offering_provisioner_working_directory": "offering_provisioner_working_directory", "item_sku": {"sku_id": "sku_id", "sku_type": "sku_type", "sku_sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "state", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "resource_group", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "cart_order_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'

        # Invoke method
        response = service.get_cart_order(
            order_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_cart_order_value_error(self):
        """
        test_get_cart_order_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        mock_response = '{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "target": {"cluster_id": "cluster_id", "cluster_name": "cluster_name", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "namespace", "region": "region", "resource_group_id": "resource_group_id"}, "operation": "install", "service_data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "mapping": [{"type": "type", "input_param_name": "input_param_name", "output_param_name": "output_param_name"}]}], "catalog_id": "catalog_id", "offering_id": "offering_id", "owning_account": "owning_account", "owning_account_crn": "owning_account_crn", "offering_kind_id": "offering_kind_id", "offering_target_kind": "offering_target_kind", "offering_version_id": "offering_version_id", "offering_kind": "offering_kind", "offering_fulfilment_kind": "offering_fulfilment_kind", "offering_version": "offering_version", "offering_provisioner_url": "offering_provisioner_url", "offering_provisioner_ssh": "offering_provisioner_ssh", "offering_provisioner_working_directory": "offering_provisioner_working_directory", "item_sku": {"sku_id": "sku_id", "sku_type": "sku_type", "sku_sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "state", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "resource_group", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "cart_order_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "order_id": order_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_cart_order(**req_copy)



class TestReplaceCartOrder():
    """
    Test Class for replace_cart_order
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_cart_order_all_params(self):
        """
        replace_cart_order()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        mock_response = '{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "target": {"cluster_id": "cluster_id", "cluster_name": "cluster_name", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "namespace", "region": "region", "resource_group_id": "resource_group_id"}, "operation": "install", "service_data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "mapping": [{"type": "type", "input_param_name": "input_param_name", "output_param_name": "output_param_name"}]}], "catalog_id": "catalog_id", "offering_id": "offering_id", "owning_account": "owning_account", "owning_account_crn": "owning_account_crn", "offering_kind_id": "offering_kind_id", "offering_target_kind": "offering_target_kind", "offering_version_id": "offering_version_id", "offering_kind": "offering_kind", "offering_fulfilment_kind": "offering_fulfilment_kind", "offering_version": "offering_version", "offering_provisioner_url": "offering_provisioner_url", "offering_provisioner_ssh": "offering_provisioner_ssh", "offering_provisioner_working_directory": "offering_provisioner_working_directory", "item_sku": {"sku_id": "sku_id", "sku_type": "sku_type", "sku_sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "state", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "resource_group", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "cart_order_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TargetRequest model
        target_request_model = {}
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceMappingRule model
        service_mapping_rule_model = {}
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceVariableData model
        service_variable_data_model = {}
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SKUUserState model
        sku_user_state_model = {}
        sku_user_state_model['state'] = 'testString'
        sku_user_state_model['set_by'] = 'testString'
        sku_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        sku_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ItemSKU model
        item_sku_model = {}
        item_sku_model['sku_id'] = 'testString'
        item_sku_model['sku_type'] = 'testString'
        item_sku_model['sku_sys_lock'] = system_lock_model
        item_sku_model['sku_user_state'] = sku_user_state_model
        item_sku_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a OrderItemConfiguration model
        order_item_configuration_model = {}
        order_item_configuration_model['name'] = 'AWS Satellite'
        order_item_configuration_model['description'] = 'Create satellite location in AWS'
        order_item_configuration_model['inputs'] = [variable_data_model]
        order_item_configuration_model['settings'] = [variable_data_model]
        order_item_configuration_model['outputs'] = [variable_data_model]
        order_item_configuration_model['target'] = target_request_model
        order_item_configuration_model['operation'] = 'install'
        order_item_configuration_model['service_data'] = [service_variable_data_model]
        order_item_configuration_model['catalog_id'] = 'testString'
        order_item_configuration_model['offering_id'] = 'testString'
        order_item_configuration_model['owning_account'] = 'testString'
        order_item_configuration_model['owning_account_crn'] = 'testString'
        order_item_configuration_model['offering_kind_id'] = 'testString'
        order_item_configuration_model['offering_target_kind'] = 'testString'
        order_item_configuration_model['offering_version_id'] = 'testString'
        order_item_configuration_model['offering_kind'] = 'testString'
        order_item_configuration_model['offering_fulfilment_kind'] = 'testString'
        order_item_configuration_model['offering_version'] = 'testString'
        order_item_configuration_model['offering_provisioner_url'] = 'testString'
        order_item_configuration_model['offering_provisioner_ssh'] = 'testString'
        order_item_configuration_model['offering_provisioner_working_directory'] = 'testString'
        order_item_configuration_model['item_sku'] = item_sku_model
        order_item_configuration_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrderUserState model
        cart_order_user_state_model = {}
        cart_order_user_state_model['state'] = 'Order_Create_Init'
        cart_order_user_state_model['set_by'] = 'testString'
        cart_order_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrderLiteState model
        cart_order_lite_state_model = {}
        cart_order_lite_state_model['status_code'] = 'normal'
        cart_order_lite_state_model['status_message'] = 'testString'
        cart_order_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrder model
        cart_order_model = {}
        cart_order_model['name'] = 'MySatelliteLocation'
        cart_order_model['description'] = 'Creates satellite location in AWS'
        cart_order_model['tags'] = ['testString']
        cart_order_model['cart_items'] = [order_item_configuration_model]
        cart_order_model['service_name'] = 'SatelliteLocation'
        cart_order_model['resource_group'] = 'testString'
        cart_order_model['location'] = 'us-south'
        cart_order_model['user_state'] = cart_order_user_state_model
        cart_order_model['sys_lock'] = system_lock_model
        cart_order_model['state'] = cart_order_lite_state_model
        cart_order_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        order_id = 'testString'
        operation = '0'
        cart_order = cart_order_model
        profile = 'ids'

        # Invoke method
        response = service.replace_cart_order(
            order_id,
            operation,
            cart_order,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'operation={}'.format(operation) in query_string
        assert 'profile={}'.format(profile) in query_string
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == cart_order


    @responses.activate
    def test_replace_cart_order_required_params(self):
        """
        test_replace_cart_order_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        mock_response = '{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "target": {"cluster_id": "cluster_id", "cluster_name": "cluster_name", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "namespace", "region": "region", "resource_group_id": "resource_group_id"}, "operation": "install", "service_data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "mapping": [{"type": "type", "input_param_name": "input_param_name", "output_param_name": "output_param_name"}]}], "catalog_id": "catalog_id", "offering_id": "offering_id", "owning_account": "owning_account", "owning_account_crn": "owning_account_crn", "offering_kind_id": "offering_kind_id", "offering_target_kind": "offering_target_kind", "offering_version_id": "offering_version_id", "offering_kind": "offering_kind", "offering_fulfilment_kind": "offering_fulfilment_kind", "offering_version": "offering_version", "offering_provisioner_url": "offering_provisioner_url", "offering_provisioner_ssh": "offering_provisioner_ssh", "offering_provisioner_working_directory": "offering_provisioner_working_directory", "item_sku": {"sku_id": "sku_id", "sku_type": "sku_type", "sku_sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "state", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "resource_group", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "cart_order_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TargetRequest model
        target_request_model = {}
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceMappingRule model
        service_mapping_rule_model = {}
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceVariableData model
        service_variable_data_model = {}
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SKUUserState model
        sku_user_state_model = {}
        sku_user_state_model['state'] = 'testString'
        sku_user_state_model['set_by'] = 'testString'
        sku_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        sku_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ItemSKU model
        item_sku_model = {}
        item_sku_model['sku_id'] = 'testString'
        item_sku_model['sku_type'] = 'testString'
        item_sku_model['sku_sys_lock'] = system_lock_model
        item_sku_model['sku_user_state'] = sku_user_state_model
        item_sku_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a OrderItemConfiguration model
        order_item_configuration_model = {}
        order_item_configuration_model['name'] = 'AWS Satellite'
        order_item_configuration_model['description'] = 'Create satellite location in AWS'
        order_item_configuration_model['inputs'] = [variable_data_model]
        order_item_configuration_model['settings'] = [variable_data_model]
        order_item_configuration_model['outputs'] = [variable_data_model]
        order_item_configuration_model['target'] = target_request_model
        order_item_configuration_model['operation'] = 'install'
        order_item_configuration_model['service_data'] = [service_variable_data_model]
        order_item_configuration_model['catalog_id'] = 'testString'
        order_item_configuration_model['offering_id'] = 'testString'
        order_item_configuration_model['owning_account'] = 'testString'
        order_item_configuration_model['owning_account_crn'] = 'testString'
        order_item_configuration_model['offering_kind_id'] = 'testString'
        order_item_configuration_model['offering_target_kind'] = 'testString'
        order_item_configuration_model['offering_version_id'] = 'testString'
        order_item_configuration_model['offering_kind'] = 'testString'
        order_item_configuration_model['offering_fulfilment_kind'] = 'testString'
        order_item_configuration_model['offering_version'] = 'testString'
        order_item_configuration_model['offering_provisioner_url'] = 'testString'
        order_item_configuration_model['offering_provisioner_ssh'] = 'testString'
        order_item_configuration_model['offering_provisioner_working_directory'] = 'testString'
        order_item_configuration_model['item_sku'] = item_sku_model
        order_item_configuration_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrderUserState model
        cart_order_user_state_model = {}
        cart_order_user_state_model['state'] = 'Order_Create_Init'
        cart_order_user_state_model['set_by'] = 'testString'
        cart_order_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrderLiteState model
        cart_order_lite_state_model = {}
        cart_order_lite_state_model['status_code'] = 'normal'
        cart_order_lite_state_model['status_message'] = 'testString'
        cart_order_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrder model
        cart_order_model = {}
        cart_order_model['name'] = 'MySatelliteLocation'
        cart_order_model['description'] = 'Creates satellite location in AWS'
        cart_order_model['tags'] = ['testString']
        cart_order_model['cart_items'] = [order_item_configuration_model]
        cart_order_model['service_name'] = 'SatelliteLocation'
        cart_order_model['resource_group'] = 'testString'
        cart_order_model['location'] = 'us-south'
        cart_order_model['user_state'] = cart_order_user_state_model
        cart_order_model['sys_lock'] = system_lock_model
        cart_order_model['state'] = cart_order_lite_state_model
        cart_order_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        order_id = 'testString'
        operation = '0'
        cart_order = cart_order_model

        # Invoke method
        response = service.replace_cart_order(
            order_id,
            operation,
            cart_order,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'operation={}'.format(operation) in query_string
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == cart_order


    @responses.activate
    def test_replace_cart_order_value_error(self):
        """
        test_replace_cart_order_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        mock_response = '{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "target": {"cluster_id": "cluster_id", "cluster_name": "cluster_name", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "namespace", "region": "region", "resource_group_id": "resource_group_id"}, "operation": "install", "service_data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "mapping": [{"type": "type", "input_param_name": "input_param_name", "output_param_name": "output_param_name"}]}], "catalog_id": "catalog_id", "offering_id": "offering_id", "owning_account": "owning_account", "owning_account_crn": "owning_account_crn", "offering_kind_id": "offering_kind_id", "offering_target_kind": "offering_target_kind", "offering_version_id": "offering_version_id", "offering_kind": "offering_kind", "offering_fulfilment_kind": "offering_fulfilment_kind", "offering_version": "offering_version", "offering_provisioner_url": "offering_provisioner_url", "offering_provisioner_ssh": "offering_provisioner_ssh", "offering_provisioner_working_directory": "offering_provisioner_working_directory", "item_sku": {"sku_id": "sku_id", "sku_type": "sku_type", "sku_sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "state", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "resource_group", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "cart_order_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TargetRequest model
        target_request_model = {}
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceMappingRule model
        service_mapping_rule_model = {}
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceVariableData model
        service_variable_data_model = {}
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SKUUserState model
        sku_user_state_model = {}
        sku_user_state_model['state'] = 'testString'
        sku_user_state_model['set_by'] = 'testString'
        sku_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        sku_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ItemSKU model
        item_sku_model = {}
        item_sku_model['sku_id'] = 'testString'
        item_sku_model['sku_type'] = 'testString'
        item_sku_model['sku_sys_lock'] = system_lock_model
        item_sku_model['sku_user_state'] = sku_user_state_model
        item_sku_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a OrderItemConfiguration model
        order_item_configuration_model = {}
        order_item_configuration_model['name'] = 'AWS Satellite'
        order_item_configuration_model['description'] = 'Create satellite location in AWS'
        order_item_configuration_model['inputs'] = [variable_data_model]
        order_item_configuration_model['settings'] = [variable_data_model]
        order_item_configuration_model['outputs'] = [variable_data_model]
        order_item_configuration_model['target'] = target_request_model
        order_item_configuration_model['operation'] = 'install'
        order_item_configuration_model['service_data'] = [service_variable_data_model]
        order_item_configuration_model['catalog_id'] = 'testString'
        order_item_configuration_model['offering_id'] = 'testString'
        order_item_configuration_model['owning_account'] = 'testString'
        order_item_configuration_model['owning_account_crn'] = 'testString'
        order_item_configuration_model['offering_kind_id'] = 'testString'
        order_item_configuration_model['offering_target_kind'] = 'testString'
        order_item_configuration_model['offering_version_id'] = 'testString'
        order_item_configuration_model['offering_kind'] = 'testString'
        order_item_configuration_model['offering_fulfilment_kind'] = 'testString'
        order_item_configuration_model['offering_version'] = 'testString'
        order_item_configuration_model['offering_provisioner_url'] = 'testString'
        order_item_configuration_model['offering_provisioner_ssh'] = 'testString'
        order_item_configuration_model['offering_provisioner_working_directory'] = 'testString'
        order_item_configuration_model['item_sku'] = item_sku_model
        order_item_configuration_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrderUserState model
        cart_order_user_state_model = {}
        cart_order_user_state_model['state'] = 'Order_Create_Init'
        cart_order_user_state_model['set_by'] = 'testString'
        cart_order_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrderLiteState model
        cart_order_lite_state_model = {}
        cart_order_lite_state_model['status_code'] = 'normal'
        cart_order_lite_state_model['status_message'] = 'testString'
        cart_order_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a CartOrder model
        cart_order_model = {}
        cart_order_model['name'] = 'MySatelliteLocation'
        cart_order_model['description'] = 'Creates satellite location in AWS'
        cart_order_model['tags'] = ['testString']
        cart_order_model['cart_items'] = [order_item_configuration_model]
        cart_order_model['service_name'] = 'SatelliteLocation'
        cart_order_model['resource_group'] = 'testString'
        cart_order_model['location'] = 'us-south'
        cart_order_model['user_state'] = cart_order_user_state_model
        cart_order_model['sys_lock'] = system_lock_model
        cart_order_model['state'] = cart_order_lite_state_model
        cart_order_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        order_id = 'testString'
        operation = '0'
        cart_order = cart_order_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "order_id": order_id,
            "operation": operation,
            "cart_order": cart_order,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_cart_order(**req_copy)



class TestRunFulfilmentOperation():
    """
    Test Class for run_fulfilment_operation
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_run_fulfilment_operation_all_params(self):
        """
        run_fulfilment_operation()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        responses.add(responses.POST,
                      url,
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        operation = '0'
        profile = 'ids'

        # Invoke method
        response = service.run_fulfilment_operation(
            order_id,
            operation,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'operation={}'.format(operation) in query_string
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_run_fulfilment_operation_required_params(self):
        """
        test_run_fulfilment_operation_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        responses.add(responses.POST,
                      url,
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        operation = '0'

        # Invoke method
        response = service.run_fulfilment_operation(
            order_id,
            operation,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'operation={}'.format(operation) in query_string


    @responses.activate
    def test_run_fulfilment_operation_value_error(self):
        """
        test_run_fulfilment_operation_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        responses.add(responses.POST,
                      url,
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        operation = '0'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "order_id": order_id,
            "operation": operation,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.run_fulfilment_operation(**req_copy)



class TestDeleteCartOrder():
    """
    Test Class for delete_cart_order
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_cart_order_all_params(self):
        """
        delete_cart_order()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        order_id = 'testString'
        profile = 'ids'
        destroy = False

        # Invoke method
        response = service.delete_cart_order(
            order_id,
            profile=profile,
            destroy=destroy,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string
        assert 'destroy={}'.format('true' if destroy else 'false') in query_string


    @responses.activate
    def test_delete_cart_order_required_params(self):
        """
        test_delete_cart_order_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        order_id = 'testString'

        # Invoke method
        response = service.delete_cart_order(
            order_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_cart_order_value_error(self):
        """
        test_delete_cart_order_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        order_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "order_id": order_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_cart_order(**req_copy)



class TestUpdateCartOrder():
    """
    Test Class for update_cart_order
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_cart_order_all_params(self):
        """
        update_cart_order()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        mock_response = '{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "target": {"cluster_id": "cluster_id", "cluster_name": "cluster_name", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "namespace", "region": "region", "resource_group_id": "resource_group_id"}, "operation": "install", "service_data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "mapping": [{"type": "type", "input_param_name": "input_param_name", "output_param_name": "output_param_name"}]}], "catalog_id": "catalog_id", "offering_id": "offering_id", "owning_account": "owning_account", "owning_account_crn": "owning_account_crn", "offering_kind_id": "offering_kind_id", "offering_target_kind": "offering_target_kind", "offering_version_id": "offering_version_id", "offering_kind": "offering_kind", "offering_fulfilment_kind": "offering_fulfilment_kind", "offering_version": "offering_version", "offering_provisioner_url": "offering_provisioner_url", "offering_provisioner_ssh": "offering_provisioner_ssh", "offering_provisioner_working_directory": "offering_provisioner_working_directory", "item_sku": {"sku_id": "sku_id", "sku_type": "sku_type", "sku_sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "state", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "resource_group", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "cart_order_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TargetRequest model
        target_request_model = {}
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceMappingRule model
        service_mapping_rule_model = {}
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceVariableData model
        service_variable_data_model = {}
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UpdateOrderItemConfiguration model
        update_order_item_configuration_model = {}
        update_order_item_configuration_model['name'] = 'AWS Satellite'
        update_order_item_configuration_model['description'] = 'Create satellite location in AWS'
        update_order_item_configuration_model['inputs'] = [variable_data_model]
        update_order_item_configuration_model['settings'] = [variable_data_model]
        update_order_item_configuration_model['outputs'] = [variable_data_model]
        update_order_item_configuration_model['target'] = target_request_model
        update_order_item_configuration_model['operation'] = 'install'
        update_order_item_configuration_model['service_data'] = [service_variable_data_model]
        update_order_item_configuration_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UpdateCartOrder model
        update_cart_order_model = {}
        update_cart_order_model['name'] = 'MySatelliteLocation'
        update_cart_order_model['description'] = 'Creates satellite location in AWS'
        update_cart_order_model['tags'] = ['testString']
        update_cart_order_model['cart_items'] = [update_order_item_configuration_model]
        update_cart_order_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        order_id = 'testString'
        update_cart_order = update_cart_order_model
        profile = 'ids'

        # Invoke method
        response = service.update_cart_order(
            order_id,
            update_cart_order,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == update_cart_order


    @responses.activate
    def test_update_cart_order_required_params(self):
        """
        test_update_cart_order_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        mock_response = '{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "target": {"cluster_id": "cluster_id", "cluster_name": "cluster_name", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "namespace", "region": "region", "resource_group_id": "resource_group_id"}, "operation": "install", "service_data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "mapping": [{"type": "type", "input_param_name": "input_param_name", "output_param_name": "output_param_name"}]}], "catalog_id": "catalog_id", "offering_id": "offering_id", "owning_account": "owning_account", "owning_account_crn": "owning_account_crn", "offering_kind_id": "offering_kind_id", "offering_target_kind": "offering_target_kind", "offering_version_id": "offering_version_id", "offering_kind": "offering_kind", "offering_fulfilment_kind": "offering_fulfilment_kind", "offering_version": "offering_version", "offering_provisioner_url": "offering_provisioner_url", "offering_provisioner_ssh": "offering_provisioner_ssh", "offering_provisioner_working_directory": "offering_provisioner_working_directory", "item_sku": {"sku_id": "sku_id", "sku_type": "sku_type", "sku_sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "state", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "resource_group", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "cart_order_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TargetRequest model
        target_request_model = {}
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceMappingRule model
        service_mapping_rule_model = {}
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceVariableData model
        service_variable_data_model = {}
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UpdateOrderItemConfiguration model
        update_order_item_configuration_model = {}
        update_order_item_configuration_model['name'] = 'AWS Satellite'
        update_order_item_configuration_model['description'] = 'Create satellite location in AWS'
        update_order_item_configuration_model['inputs'] = [variable_data_model]
        update_order_item_configuration_model['settings'] = [variable_data_model]
        update_order_item_configuration_model['outputs'] = [variable_data_model]
        update_order_item_configuration_model['target'] = target_request_model
        update_order_item_configuration_model['operation'] = 'install'
        update_order_item_configuration_model['service_data'] = [service_variable_data_model]
        update_order_item_configuration_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UpdateCartOrder model
        update_cart_order_model = {}
        update_cart_order_model['name'] = 'MySatelliteLocation'
        update_cart_order_model['description'] = 'Creates satellite location in AWS'
        update_cart_order_model['tags'] = ['testString']
        update_cart_order_model['cart_items'] = [update_order_item_configuration_model]
        update_cart_order_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        order_id = 'testString'
        update_cart_order = update_cart_order_model

        # Invoke method
        response = service.update_cart_order(
            order_id,
            update_cart_order,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == update_cart_order


    @responses.activate
    def test_update_cart_order_value_error(self):
        """
        test_update_cart_order_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString')
        mock_response = '{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "target": {"cluster_id": "cluster_id", "cluster_name": "cluster_name", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "namespace", "region": "region", "resource_group_id": "resource_group_id"}, "operation": "install", "service_data": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "mapping": [{"type": "type", "input_param_name": "input_param_name", "output_param_name": "output_param_name"}]}], "catalog_id": "catalog_id", "offering_id": "offering_id", "owning_account": "owning_account", "owning_account_crn": "owning_account_crn", "offering_kind_id": "offering_kind_id", "offering_target_kind": "offering_target_kind", "offering_version_id": "offering_version_id", "offering_kind": "offering_kind", "offering_fulfilment_kind": "offering_fulfilment_kind", "offering_version": "offering_version", "offering_provisioner_url": "offering_provisioner_url", "offering_provisioner_ssh": "offering_provisioner_ssh", "offering_provisioner_working_directory": "offering_provisioner_working_directory", "item_sku": {"sku_id": "sku_id", "sku_type": "sku_type", "sku_sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "state", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "resource_group", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "cart_order_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TargetRequest model
        target_request_model = {}
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceMappingRule model
        service_mapping_rule_model = {}
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ServiceVariableData model
        service_variable_data_model = {}
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UpdateOrderItemConfiguration model
        update_order_item_configuration_model = {}
        update_order_item_configuration_model['name'] = 'AWS Satellite'
        update_order_item_configuration_model['description'] = 'Create satellite location in AWS'
        update_order_item_configuration_model['inputs'] = [variable_data_model]
        update_order_item_configuration_model['settings'] = [variable_data_model]
        update_order_item_configuration_model['outputs'] = [variable_data_model]
        update_order_item_configuration_model['target'] = target_request_model
        update_order_item_configuration_model['operation'] = 'install'
        update_order_item_configuration_model['service_data'] = [service_variable_data_model]
        update_order_item_configuration_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a UpdateCartOrder model
        update_cart_order_model = {}
        update_cart_order_model['name'] = 'MySatelliteLocation'
        update_cart_order_model['description'] = 'Creates satellite location in AWS'
        update_cart_order_model['tags'] = ['testString']
        update_cart_order_model['cart_items'] = [update_order_item_configuration_model]
        update_cart_order_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        order_id = 'testString'
        update_cart_order = update_cart_order_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "order_id": order_id,
            "update_cart_order": update_cart_order,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_cart_order(**req_copy)



class TestGetCartMetadata():
    """
    Test Class for get_cart_metadata
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_cart_metadata_all_params(self):
        """
        get_cart_metadata()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/metadata')
        mock_response = '{"item_id": "item_id", "offering_id": "offering_id", "offering_kind_id": "offering_kind_id", "offering_version_id": "offering_version_id", "name": "AWS Satellite", "description": "Create satellite location in AWS", "operations": ["install"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'

        # Invoke method
        response = service.get_cart_metadata(
            order_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_cart_metadata_value_error(self):
        """
        test_get_cart_metadata_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/metadata')
        mock_response = '{"item_id": "item_id", "offering_id": "offering_id", "offering_kind_id": "offering_kind_id", "offering_version_id": "offering_version_id", "name": "AWS Satellite", "description": "Create satellite location in AWS", "operations": ["install"], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "order_id": order_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_cart_metadata(**req_copy)



class TestListCartResources():
    """
    Test Class for list_cart_resources
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_cart_resources_all_params(self):
        """
        list_cart_resources()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/resources')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.list_cart_resources(
            order_id,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_list_cart_resources_required_params(self):
        """
        test_list_cart_resources_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/resources')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'

        # Invoke method
        response = service.list_cart_resources(
            order_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_cart_resources_value_error(self):
        """
        test_list_cart_resources_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/resources')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "order_id": order_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_cart_resources(**req_copy)



class TestListCartOrderJobs():
    """
    Test Class for list_cart_order_jobs
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_cart_order_jobs_all_params(self):
        """
        list_cart_order_jobs()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "jobs": [{"id": "id", "name": "name", "description": "description", "command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "tags": ["tags"], "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "duration": "duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.list_cart_order_jobs(
            order_id,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_list_cart_order_jobs_required_params(self):
        """
        test_list_cart_order_jobs_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "jobs": [{"id": "id", "name": "name", "description": "description", "command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "tags": ["tags"], "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "duration": "duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'

        # Invoke method
        response = service.list_cart_order_jobs(
            order_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_cart_order_jobs_value_error(self):
        """
        test_list_cart_order_jobs_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "jobs": [{"id": "id", "name": "name", "description": "description", "command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "tags": ["tags"], "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "duration": "duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "order_id": order_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_cart_order_jobs(**req_copy)



class TestGetCartOrderJob():
    """
    Test Class for get_cart_order_job
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_cart_order_job_all_params(self):
        """
        get_cart_order_job()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs/testString')
        mock_response = '{"id": "id", "name": "name", "description": "description", "command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "tags": ["tags"], "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "duration": "duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        job_id = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_cart_order_job(
            order_id,
            job_id,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_cart_order_job_required_params(self):
        """
        test_get_cart_order_job_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs/testString')
        mock_response = '{"id": "id", "name": "name", "description": "description", "command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "tags": ["tags"], "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "duration": "duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        job_id = 'testString'

        # Invoke method
        response = service.get_cart_order_job(
            order_id,
            job_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_cart_order_job_value_error(self):
        """
        test_get_cart_order_job_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs/testString')
        mock_response = '{"id": "id", "name": "name", "description": "description", "command_object": "workspace", "command_object_id": "command_object_id", "command_name": "workspace_plan", "tags": ["tags"], "location": "us-south", "resource_group": "resource_group", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "submitted_by", "duration": "duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"workspace_job_status": {"workspace_name": "workspace_name", "status_code": "job_pending", "status_message": "status_message", "flow_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "template_id", "template_name": "template_name", "flow_index": 10, "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "action_name", "status_code": "job_pending", "status_message": "status_message", "bastion_status_code": "none", "bastion_status_message": "bastion_status_message", "targets_status_code": "none", "targets_status_message": "targets_status_message", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "system_status_message", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "status_message", "schematics_resource_id": "schematics_resource_id", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "flow_id", "flow_name": "flow_name", "status_code": "job_pending", "status_message": "status_message", "workitems": [{"workspace_id": "workspace_id", "workspace_name": "workspace_name", "job_id": "job_id", "status_code": "job_pending", "status_message": "status_message", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        job_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "order_id": order_id,
            "job_id": job_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_cart_order_job(**req_copy)



class TestGetCartOrderJobLog():
    """
    Test Class for get_cart_order_job_log
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_cart_order_job_log_all_params(self):
        """
        get_cart_order_job_log()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs/testString/logs')
        mock_response = '{"job_id": "job_id", "job_name": "job_name", "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        job_id = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_cart_order_job_log(
            order_id,
            job_id,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_cart_order_job_log_required_params(self):
        """
        test_get_cart_order_job_log_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs/testString/logs')
        mock_response = '{"job_id": "job_id", "job_name": "job_name", "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        job_id = 'testString'

        # Invoke method
        response = service.get_cart_order_job_log(
            order_id,
            job_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_cart_order_job_log_value_error(self):
        """
        test_get_cart_order_job_log_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs/testString/logs')
        mock_response = '{"job_id": "job_id", "job_name": "job_name", "log_summary": {"job_id": "job_id", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 12, "log_errors": [{"error_code": "error_code", "error_msg": "error_msg", "error_count": 11}], "repo_download_job": {"scanned_file_count": 18, "quarantined_file_count": 22, "detected_filetype": "detected_filetype", "inputs_count": "inputs_count", "outputs_count": "outputs_count"}, "workspace_job": {"resources_add": 13, "resources_modify": 16, "resources_destroy": 17}, "flow_job": {"workitems_completed": 19, "workitems_pending": 17, "workitems_failed": 16, "workitems": [{"workspace_id": "workspace_id", "job_id": "job_id", "resources_add": 13, "resources_modify": 16, "resources_destroy": 17, "log_url": "log_url"}]}, "action_job": {"target_count": 12, "task_count": 10, "play_count": 10, "recap": {"target": ["target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 12, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        job_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "order_id": order_id,
            "job_id": job_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_cart_order_job_log(**req_copy)



class TestGetCartOrderJobResources():
    """
    Test Class for get_cart_order_job_resources
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_cart_order_job_resources_all_params(self):
        """
        get_cart_order_job_resources()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs/testString/resources')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        job_id = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_cart_order_job_resources(
            order_id,
            job_id,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_cart_order_job_resources_required_params(self):
        """
        test_get_cart_order_job_resources_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs/testString/resources')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        job_id = 'testString'

        # Invoke method
        response = service.get_cart_order_job_resources(
            order_id,
            job_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_cart_order_job_resources_value_error(self):
        """
        test_get_cart_order_job_resources_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/cart/testString/jobs/testString/resources')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        order_id = 'testString'
        job_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "order_id": order_id,
            "job_id": job_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_cart_order_job_resources(**req_copy)



# endregion
##############################################################################
# End of Service: Fulfilment
##############################################################################

##############################################################################
# Start of Service: Environment
##############################################################################
# region

class TestListEnvironmentDefinitions():
    """
    Test Class for list_environment_definitions
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_environment_definitions_all_params(self):
        """
        list_environment_definitions()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environmentdefinitions')
        mock_response = '[{"name": "Schematics", "label": "Schematics", "offering_id": "offering_id", "short_description": "short_description", "crn": "crn", "offering_url": "offering_url", "versions": [{"version": "version", "versionid": "versionid"}]}]'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1
        catalog_id = 'testString'
        catalog_name = 'testString'

        # Invoke method
        response = service.list_environment_definitions(
            offset=offset,
            limit=limit,
            catalog_id=catalog_id,
            catalog_name=catalog_name,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'catalog_id={}'.format(catalog_id) in query_string
        assert 'catalog_name={}'.format(catalog_name) in query_string


    @responses.activate
    def test_list_environment_definitions_required_params(self):
        """
        test_list_environment_definitions_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environmentdefinitions')
        mock_response = '[{"name": "Schematics", "label": "Schematics", "offering_id": "offering_id", "short_description": "short_description", "crn": "crn", "offering_url": "offering_url", "versions": [{"version": "version", "versionid": "versionid"}]}]'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_environment_definitions()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestGetEnvironmentDefinition():
    """
    Test Class for get_environment_definition
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_environment_definition_all_params(self):
        """
        get_environment_definition()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environmentdefinitions/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offering_id = 'testString'
        catalog_id = 'testString'
        catalog_name = 'testString'
        offering_name = 'testString'
        offering_version = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.get_environment_definition(
            offering_id,
            catalog_id=catalog_id,
            catalog_name=catalog_name,
            offering_name=offering_name,
            offering_version=offering_version,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'catalog_id={}'.format(catalog_id) in query_string
        assert 'catalog_name={}'.format(catalog_name) in query_string
        assert 'offering_name={}'.format(offering_name) in query_string
        assert 'offering_version={}'.format(offering_version) in query_string
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_get_environment_definition_required_params(self):
        """
        test_get_environment_definition_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environmentdefinitions/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offering_id = 'testString'

        # Invoke method
        response = service.get_environment_definition(
            offering_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_environment_definition_value_error(self):
        """
        test_get_environment_definition_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environmentdefinitions/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offering_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "offering_id": offering_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_environment_definition(**req_copy)



class TestListEnvironment():
    """
    Test Class for list_environment
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_environment_all_params(self):
        """
        list_environment()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "environments": [{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "resource_group": "resource_group", "tags": ["tags"], "location": "us-south", "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        offset = 0
        limit = 1

        # Invoke method
        response = service.list_environment(
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_list_environment_required_params(self):
        """
        test_list_environment_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "environments": [{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "resource_group": "resource_group", "tags": ["tags"], "location": "us-south", "id": "id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_environment()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestCreateEnvironment():
    """
    Test Class for create_environment
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_environment_all_params(self):
        """
        create_environment()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BlueprintVariableData model
        blueprint_variable_data_model = {}
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItemLastJob model
        work_item_last_job_model = {}
        work_item_last_job_model['command_object'] = 'workspace'
        work_item_last_job_model['command_object_name'] = 'testString'
        work_item_last_job_model['command_object_id'] = 'testString'
        work_item_last_job_model['command_name'] = 'workspace_plan'
        work_item_last_job_model['job_status'] = 'job_pending'
        work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItem model
        work_item_model = {}
        work_item_model['workitem_object_id'] = 'testString'
        work_item_model['workitem_object_type'] = 'workspace'
        work_item_model['name'] = 'testString'
        work_item_model['layer'] = 'testString'
        work_item_model['source'] = external_source_model
        work_item_model['tags'] = 'testString'
        work_item_model['inputs'] = [blueprint_variable_data_model]
        work_item_model['outputs'] = [blueprint_variable_data_model]
        work_item_model['settings'] = [blueprint_variable_data_model]
        work_item_model['last_job'] = work_item_last_job_model
        work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a FlowOperations model
        flow_operations_model = {}
        flow_operations_model['install'] = 'testString'
        flow_operations_model['update'] = 'testString'
        flow_operations_model['uninstall'] = 'testString'
        flow_operations_model['configure'] = 'testString'
        flow_operations_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Flow model
        flow_model = {}
        flow_model['type'] = 'testString'
        flow_model['operations'] = [flow_operations_model]
        flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Blueprint model
        blueprint_model = {}
        blueprint_model['name'] = 'testString'
        blueprint_model['description'] = 'testString'
        blueprint_model['source'] = external_source_model
        blueprint_model['inputs'] = [variable_data_model]
        blueprint_model['outputs'] = [variable_data_model]
        blueprint_model['settings'] = [variable_data_model]
        blueprint_model['workitems'] = [work_item_model]
        blueprint_model['flow'] = flow_model
        blueprint_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConfigItem model
        config_item_model = {}
        config_item_model['name'] = 'testString'
        config_item_model['description'] = 'testString'
        config_item_model['source'] = external_source_model
        config_item_model['inputs'] = [blueprint_variable_data_model]
        config_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentUserState model
        environment_user_state_model = {}
        environment_user_state_model['state'] = 'Environment_Create_Init'
        environment_user_state_model['set_by'] = 'testString'
        environment_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentState model
        environment_state_model = {}
        environment_state_model['status_code'] = 'normal'
        environment_state_model['status_message'] = 'testString'
        environment_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Environment model
        environment_model = {}
        environment_model['name'] = 'Toronto Dev Environtment'
        environment_model['schema_version'] = '1.0'
        environment_model['source'] = external_source_model
        environment_model['description'] = 'Deploys dev environtment instance in Toronto Region'
        environment_model['resource_group'] = 'Default'
        environment_model['tags'] = ['testString']
        environment_model['location'] = 'us-south'
        environment_model['blueprint'] = blueprint_model
        environment_model['config'] = [config_item_model]
        environment_model['inputs'] = [variable_data_model]
        environment_model['settings'] = [variable_data_model]
        environment_model['outputs'] = [variable_data_model]
        environment_model['sys_lock'] = system_lock_model
        environment_model['user_state'] = environment_user_state_model
        environment_model['state'] = environment_state_model
        environment_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        environment = environment_model

        # Invoke method
        response = service.create_environment(
            environment,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == environment


    @responses.activate
    def test_create_environment_value_error(self):
        """
        test_create_environment_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BlueprintVariableData model
        blueprint_variable_data_model = {}
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItemLastJob model
        work_item_last_job_model = {}
        work_item_last_job_model['command_object'] = 'workspace'
        work_item_last_job_model['command_object_name'] = 'testString'
        work_item_last_job_model['command_object_id'] = 'testString'
        work_item_last_job_model['command_name'] = 'workspace_plan'
        work_item_last_job_model['job_status'] = 'job_pending'
        work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItem model
        work_item_model = {}
        work_item_model['workitem_object_id'] = 'testString'
        work_item_model['workitem_object_type'] = 'workspace'
        work_item_model['name'] = 'testString'
        work_item_model['layer'] = 'testString'
        work_item_model['source'] = external_source_model
        work_item_model['tags'] = 'testString'
        work_item_model['inputs'] = [blueprint_variable_data_model]
        work_item_model['outputs'] = [blueprint_variable_data_model]
        work_item_model['settings'] = [blueprint_variable_data_model]
        work_item_model['last_job'] = work_item_last_job_model
        work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a FlowOperations model
        flow_operations_model = {}
        flow_operations_model['install'] = 'testString'
        flow_operations_model['update'] = 'testString'
        flow_operations_model['uninstall'] = 'testString'
        flow_operations_model['configure'] = 'testString'
        flow_operations_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Flow model
        flow_model = {}
        flow_model['type'] = 'testString'
        flow_model['operations'] = [flow_operations_model]
        flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Blueprint model
        blueprint_model = {}
        blueprint_model['name'] = 'testString'
        blueprint_model['description'] = 'testString'
        blueprint_model['source'] = external_source_model
        blueprint_model['inputs'] = [variable_data_model]
        blueprint_model['outputs'] = [variable_data_model]
        blueprint_model['settings'] = [variable_data_model]
        blueprint_model['workitems'] = [work_item_model]
        blueprint_model['flow'] = flow_model
        blueprint_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConfigItem model
        config_item_model = {}
        config_item_model['name'] = 'testString'
        config_item_model['description'] = 'testString'
        config_item_model['source'] = external_source_model
        config_item_model['inputs'] = [blueprint_variable_data_model]
        config_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentUserState model
        environment_user_state_model = {}
        environment_user_state_model['state'] = 'Environment_Create_Init'
        environment_user_state_model['set_by'] = 'testString'
        environment_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentState model
        environment_state_model = {}
        environment_state_model['status_code'] = 'normal'
        environment_state_model['status_message'] = 'testString'
        environment_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Environment model
        environment_model = {}
        environment_model['name'] = 'Toronto Dev Environtment'
        environment_model['schema_version'] = '1.0'
        environment_model['source'] = external_source_model
        environment_model['description'] = 'Deploys dev environtment instance in Toronto Region'
        environment_model['resource_group'] = 'Default'
        environment_model['tags'] = ['testString']
        environment_model['location'] = 'us-south'
        environment_model['blueprint'] = blueprint_model
        environment_model['config'] = [config_item_model]
        environment_model['inputs'] = [variable_data_model]
        environment_model['settings'] = [variable_data_model]
        environment_model['outputs'] = [variable_data_model]
        environment_model['sys_lock'] = system_lock_model
        environment_model['user_state'] = environment_user_state_model
        environment_model['state'] = environment_state_model
        environment_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        environment = environment_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "environment": environment,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.create_environment(**req_copy)



class TestGetEnvironment():
    """
    Test Class for get_environment
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_environment_all_params(self):
        """
        get_environment()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        environment_id = 'testString'
        profile = 'ids'

        # Invoke method
        response = service.get_environment(
            environment_id,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string


    @responses.activate
    def test_get_environment_required_params(self):
        """
        test_get_environment_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        environment_id = 'testString'

        # Invoke method
        response = service.get_environment(
            environment_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_get_environment_value_error(self):
        """
        test_get_environment_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        environment_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "environment_id": environment_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_environment(**req_copy)



class TestReplaceEnvironment():
    """
    Test Class for replace_environment
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_environment_all_params(self):
        """
        replace_environment()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BlueprintVariableData model
        blueprint_variable_data_model = {}
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItemLastJob model
        work_item_last_job_model = {}
        work_item_last_job_model['command_object'] = 'workspace'
        work_item_last_job_model['command_object_name'] = 'testString'
        work_item_last_job_model['command_object_id'] = 'testString'
        work_item_last_job_model['command_name'] = 'workspace_plan'
        work_item_last_job_model['job_status'] = 'job_pending'
        work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItem model
        work_item_model = {}
        work_item_model['workitem_object_id'] = 'testString'
        work_item_model['workitem_object_type'] = 'workspace'
        work_item_model['name'] = 'testString'
        work_item_model['layer'] = 'testString'
        work_item_model['source'] = external_source_model
        work_item_model['tags'] = 'testString'
        work_item_model['inputs'] = [blueprint_variable_data_model]
        work_item_model['outputs'] = [blueprint_variable_data_model]
        work_item_model['settings'] = [blueprint_variable_data_model]
        work_item_model['last_job'] = work_item_last_job_model
        work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a FlowOperations model
        flow_operations_model = {}
        flow_operations_model['install'] = 'testString'
        flow_operations_model['update'] = 'testString'
        flow_operations_model['uninstall'] = 'testString'
        flow_operations_model['configure'] = 'testString'
        flow_operations_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Flow model
        flow_model = {}
        flow_model['type'] = 'testString'
        flow_model['operations'] = [flow_operations_model]
        flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Blueprint model
        blueprint_model = {}
        blueprint_model['name'] = 'testString'
        blueprint_model['description'] = 'testString'
        blueprint_model['source'] = external_source_model
        blueprint_model['inputs'] = [variable_data_model]
        blueprint_model['outputs'] = [variable_data_model]
        blueprint_model['settings'] = [variable_data_model]
        blueprint_model['workitems'] = [work_item_model]
        blueprint_model['flow'] = flow_model
        blueprint_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConfigItem model
        config_item_model = {}
        config_item_model['name'] = 'testString'
        config_item_model['description'] = 'testString'
        config_item_model['source'] = external_source_model
        config_item_model['inputs'] = [blueprint_variable_data_model]
        config_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentUserState model
        environment_user_state_model = {}
        environment_user_state_model['state'] = 'Environment_Create_Init'
        environment_user_state_model['set_by'] = 'testString'
        environment_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentState model
        environment_state_model = {}
        environment_state_model['status_code'] = 'normal'
        environment_state_model['status_message'] = 'testString'
        environment_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Environment model
        environment_model = {}
        environment_model['name'] = 'Toronto Dev Environtment'
        environment_model['schema_version'] = '1.0'
        environment_model['source'] = external_source_model
        environment_model['description'] = 'Deploys dev environtment instance in Toronto Region'
        environment_model['resource_group'] = 'Default'
        environment_model['tags'] = ['testString']
        environment_model['location'] = 'us-south'
        environment_model['blueprint'] = blueprint_model
        environment_model['config'] = [config_item_model]
        environment_model['inputs'] = [variable_data_model]
        environment_model['settings'] = [variable_data_model]
        environment_model['outputs'] = [variable_data_model]
        environment_model['sys_lock'] = system_lock_model
        environment_model['user_state'] = environment_user_state_model
        environment_model['state'] = environment_state_model
        environment_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        environment_id = 'testString'
        environment = environment_model
        profile = 'ids'

        # Invoke method
        response = service.replace_environment(
            environment_id,
            environment,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == environment


    @responses.activate
    def test_replace_environment_required_params(self):
        """
        test_replace_environment_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BlueprintVariableData model
        blueprint_variable_data_model = {}
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItemLastJob model
        work_item_last_job_model = {}
        work_item_last_job_model['command_object'] = 'workspace'
        work_item_last_job_model['command_object_name'] = 'testString'
        work_item_last_job_model['command_object_id'] = 'testString'
        work_item_last_job_model['command_name'] = 'workspace_plan'
        work_item_last_job_model['job_status'] = 'job_pending'
        work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItem model
        work_item_model = {}
        work_item_model['workitem_object_id'] = 'testString'
        work_item_model['workitem_object_type'] = 'workspace'
        work_item_model['name'] = 'testString'
        work_item_model['layer'] = 'testString'
        work_item_model['source'] = external_source_model
        work_item_model['tags'] = 'testString'
        work_item_model['inputs'] = [blueprint_variable_data_model]
        work_item_model['outputs'] = [blueprint_variable_data_model]
        work_item_model['settings'] = [blueprint_variable_data_model]
        work_item_model['last_job'] = work_item_last_job_model
        work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a FlowOperations model
        flow_operations_model = {}
        flow_operations_model['install'] = 'testString'
        flow_operations_model['update'] = 'testString'
        flow_operations_model['uninstall'] = 'testString'
        flow_operations_model['configure'] = 'testString'
        flow_operations_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Flow model
        flow_model = {}
        flow_model['type'] = 'testString'
        flow_model['operations'] = [flow_operations_model]
        flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Blueprint model
        blueprint_model = {}
        blueprint_model['name'] = 'testString'
        blueprint_model['description'] = 'testString'
        blueprint_model['source'] = external_source_model
        blueprint_model['inputs'] = [variable_data_model]
        blueprint_model['outputs'] = [variable_data_model]
        blueprint_model['settings'] = [variable_data_model]
        blueprint_model['workitems'] = [work_item_model]
        blueprint_model['flow'] = flow_model
        blueprint_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConfigItem model
        config_item_model = {}
        config_item_model['name'] = 'testString'
        config_item_model['description'] = 'testString'
        config_item_model['source'] = external_source_model
        config_item_model['inputs'] = [blueprint_variable_data_model]
        config_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentUserState model
        environment_user_state_model = {}
        environment_user_state_model['state'] = 'Environment_Create_Init'
        environment_user_state_model['set_by'] = 'testString'
        environment_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentState model
        environment_state_model = {}
        environment_state_model['status_code'] = 'normal'
        environment_state_model['status_message'] = 'testString'
        environment_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Environment model
        environment_model = {}
        environment_model['name'] = 'Toronto Dev Environtment'
        environment_model['schema_version'] = '1.0'
        environment_model['source'] = external_source_model
        environment_model['description'] = 'Deploys dev environtment instance in Toronto Region'
        environment_model['resource_group'] = 'Default'
        environment_model['tags'] = ['testString']
        environment_model['location'] = 'us-south'
        environment_model['blueprint'] = blueprint_model
        environment_model['config'] = [config_item_model]
        environment_model['inputs'] = [variable_data_model]
        environment_model['settings'] = [variable_data_model]
        environment_model['outputs'] = [variable_data_model]
        environment_model['sys_lock'] = system_lock_model
        environment_model['user_state'] = environment_user_state_model
        environment_model['state'] = environment_state_model
        environment_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        environment_id = 'testString'
        environment = environment_model

        # Invoke method
        response = service.replace_environment(
            environment_id,
            environment,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == environment


    @responses.activate
    def test_replace_environment_value_error(self):
        """
        test_replace_environment_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BlueprintVariableData model
        blueprint_variable_data_model = {}
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItemLastJob model
        work_item_last_job_model = {}
        work_item_last_job_model['command_object'] = 'workspace'
        work_item_last_job_model['command_object_name'] = 'testString'
        work_item_last_job_model['command_object_id'] = 'testString'
        work_item_last_job_model['command_name'] = 'workspace_plan'
        work_item_last_job_model['job_status'] = 'job_pending'
        work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItem model
        work_item_model = {}
        work_item_model['workitem_object_id'] = 'testString'
        work_item_model['workitem_object_type'] = 'workspace'
        work_item_model['name'] = 'testString'
        work_item_model['layer'] = 'testString'
        work_item_model['source'] = external_source_model
        work_item_model['tags'] = 'testString'
        work_item_model['inputs'] = [blueprint_variable_data_model]
        work_item_model['outputs'] = [blueprint_variable_data_model]
        work_item_model['settings'] = [blueprint_variable_data_model]
        work_item_model['last_job'] = work_item_last_job_model
        work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a FlowOperations model
        flow_operations_model = {}
        flow_operations_model['install'] = 'testString'
        flow_operations_model['update'] = 'testString'
        flow_operations_model['uninstall'] = 'testString'
        flow_operations_model['configure'] = 'testString'
        flow_operations_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Flow model
        flow_model = {}
        flow_model['type'] = 'testString'
        flow_model['operations'] = [flow_operations_model]
        flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Blueprint model
        blueprint_model = {}
        blueprint_model['name'] = 'testString'
        blueprint_model['description'] = 'testString'
        blueprint_model['source'] = external_source_model
        blueprint_model['inputs'] = [variable_data_model]
        blueprint_model['outputs'] = [variable_data_model]
        blueprint_model['settings'] = [variable_data_model]
        blueprint_model['workitems'] = [work_item_model]
        blueprint_model['flow'] = flow_model
        blueprint_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConfigItem model
        config_item_model = {}
        config_item_model['name'] = 'testString'
        config_item_model['description'] = 'testString'
        config_item_model['source'] = external_source_model
        config_item_model['inputs'] = [blueprint_variable_data_model]
        config_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentUserState model
        environment_user_state_model = {}
        environment_user_state_model['state'] = 'Environment_Create_Init'
        environment_user_state_model['set_by'] = 'testString'
        environment_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentState model
        environment_state_model = {}
        environment_state_model['status_code'] = 'normal'
        environment_state_model['status_message'] = 'testString'
        environment_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Environment model
        environment_model = {}
        environment_model['name'] = 'Toronto Dev Environtment'
        environment_model['schema_version'] = '1.0'
        environment_model['source'] = external_source_model
        environment_model['description'] = 'Deploys dev environtment instance in Toronto Region'
        environment_model['resource_group'] = 'Default'
        environment_model['tags'] = ['testString']
        environment_model['location'] = 'us-south'
        environment_model['blueprint'] = blueprint_model
        environment_model['config'] = [config_item_model]
        environment_model['inputs'] = [variable_data_model]
        environment_model['settings'] = [variable_data_model]
        environment_model['outputs'] = [variable_data_model]
        environment_model['sys_lock'] = system_lock_model
        environment_model['user_state'] = environment_user_state_model
        environment_model['state'] = environment_state_model
        environment_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        environment_id = 'testString'
        environment = environment_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "environment_id": environment_id,
            "environment": environment,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.replace_environment(**req_copy)



class TestDeleteEnvironment():
    """
    Test Class for delete_environment
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_environment_all_params(self):
        """
        delete_environment()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        environment_id = 'testString'
        profile = 'ids'
        destroy = False

        # Invoke method
        response = service.delete_environment(
            environment_id,
            profile=profile,
            destroy=destroy,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string
        assert 'destroy={}'.format('true' if destroy else 'false') in query_string


    @responses.activate
    def test_delete_environment_required_params(self):
        """
        test_delete_environment_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        environment_id = 'testString'

        # Invoke method
        response = service.delete_environment(
            environment_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204


    @responses.activate
    def test_delete_environment_value_error(self):
        """
        test_delete_environment_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        responses.add(responses.DELETE,
                      url,
                      status=204)

        # Set up parameter values
        environment_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "environment_id": environment_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.delete_environment(**req_copy)



class TestUpdateEnvironment():
    """
    Test Class for update_environment
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_environment_all_params(self):
        """
        update_environment()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BlueprintVariableData model
        blueprint_variable_data_model = {}
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItemLastJob model
        work_item_last_job_model = {}
        work_item_last_job_model['command_object'] = 'workspace'
        work_item_last_job_model['command_object_name'] = 'testString'
        work_item_last_job_model['command_object_id'] = 'testString'
        work_item_last_job_model['command_name'] = 'workspace_plan'
        work_item_last_job_model['job_status'] = 'job_pending'
        work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItem model
        work_item_model = {}
        work_item_model['workitem_object_id'] = 'testString'
        work_item_model['workitem_object_type'] = 'workspace'
        work_item_model['name'] = 'testString'
        work_item_model['layer'] = 'testString'
        work_item_model['source'] = external_source_model
        work_item_model['tags'] = 'testString'
        work_item_model['inputs'] = [blueprint_variable_data_model]
        work_item_model['outputs'] = [blueprint_variable_data_model]
        work_item_model['settings'] = [blueprint_variable_data_model]
        work_item_model['last_job'] = work_item_last_job_model
        work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a FlowOperations model
        flow_operations_model = {}
        flow_operations_model['install'] = 'testString'
        flow_operations_model['update'] = 'testString'
        flow_operations_model['uninstall'] = 'testString'
        flow_operations_model['configure'] = 'testString'
        flow_operations_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Flow model
        flow_model = {}
        flow_model['type'] = 'testString'
        flow_model['operations'] = [flow_operations_model]
        flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Blueprint model
        blueprint_model = {}
        blueprint_model['name'] = 'testString'
        blueprint_model['description'] = 'testString'
        blueprint_model['source'] = external_source_model
        blueprint_model['inputs'] = [variable_data_model]
        blueprint_model['outputs'] = [variable_data_model]
        blueprint_model['settings'] = [variable_data_model]
        blueprint_model['workitems'] = [work_item_model]
        blueprint_model['flow'] = flow_model
        blueprint_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConfigItem model
        config_item_model = {}
        config_item_model['name'] = 'testString'
        config_item_model['description'] = 'testString'
        config_item_model['source'] = external_source_model
        config_item_model['inputs'] = [blueprint_variable_data_model]
        config_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentUserState model
        environment_user_state_model = {}
        environment_user_state_model['state'] = 'Environment_Create_Init'
        environment_user_state_model['set_by'] = 'testString'
        environment_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentState model
        environment_state_model = {}
        environment_state_model['status_code'] = 'normal'
        environment_state_model['status_message'] = 'testString'
        environment_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Environment model
        environment_model = {}
        environment_model['name'] = 'Toronto Dev Environtment'
        environment_model['schema_version'] = '1.0'
        environment_model['source'] = external_source_model
        environment_model['description'] = 'Deploys dev environtment instance in Toronto Region'
        environment_model['resource_group'] = 'Default'
        environment_model['tags'] = ['testString']
        environment_model['location'] = 'us-south'
        environment_model['blueprint'] = blueprint_model
        environment_model['config'] = [config_item_model]
        environment_model['inputs'] = [variable_data_model]
        environment_model['settings'] = [variable_data_model]
        environment_model['outputs'] = [variable_data_model]
        environment_model['sys_lock'] = system_lock_model
        environment_model['user_state'] = environment_user_state_model
        environment_model['state'] = environment_state_model
        environment_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        environment_id = 'testString'
        environment = environment_model
        profile = 'ids'

        # Invoke method
        response = service.update_environment(
            environment_id,
            environment,
            profile=profile,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'profile={}'.format(profile) in query_string
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == environment


    @responses.activate
    def test_update_environment_required_params(self):
        """
        test_update_environment_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BlueprintVariableData model
        blueprint_variable_data_model = {}
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItemLastJob model
        work_item_last_job_model = {}
        work_item_last_job_model['command_object'] = 'workspace'
        work_item_last_job_model['command_object_name'] = 'testString'
        work_item_last_job_model['command_object_id'] = 'testString'
        work_item_last_job_model['command_name'] = 'workspace_plan'
        work_item_last_job_model['job_status'] = 'job_pending'
        work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItem model
        work_item_model = {}
        work_item_model['workitem_object_id'] = 'testString'
        work_item_model['workitem_object_type'] = 'workspace'
        work_item_model['name'] = 'testString'
        work_item_model['layer'] = 'testString'
        work_item_model['source'] = external_source_model
        work_item_model['tags'] = 'testString'
        work_item_model['inputs'] = [blueprint_variable_data_model]
        work_item_model['outputs'] = [blueprint_variable_data_model]
        work_item_model['settings'] = [blueprint_variable_data_model]
        work_item_model['last_job'] = work_item_last_job_model
        work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a FlowOperations model
        flow_operations_model = {}
        flow_operations_model['install'] = 'testString'
        flow_operations_model['update'] = 'testString'
        flow_operations_model['uninstall'] = 'testString'
        flow_operations_model['configure'] = 'testString'
        flow_operations_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Flow model
        flow_model = {}
        flow_model['type'] = 'testString'
        flow_model['operations'] = [flow_operations_model]
        flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Blueprint model
        blueprint_model = {}
        blueprint_model['name'] = 'testString'
        blueprint_model['description'] = 'testString'
        blueprint_model['source'] = external_source_model
        blueprint_model['inputs'] = [variable_data_model]
        blueprint_model['outputs'] = [variable_data_model]
        blueprint_model['settings'] = [variable_data_model]
        blueprint_model['workitems'] = [work_item_model]
        blueprint_model['flow'] = flow_model
        blueprint_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConfigItem model
        config_item_model = {}
        config_item_model['name'] = 'testString'
        config_item_model['description'] = 'testString'
        config_item_model['source'] = external_source_model
        config_item_model['inputs'] = [blueprint_variable_data_model]
        config_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentUserState model
        environment_user_state_model = {}
        environment_user_state_model['state'] = 'Environment_Create_Init'
        environment_user_state_model['set_by'] = 'testString'
        environment_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentState model
        environment_state_model = {}
        environment_state_model['status_code'] = 'normal'
        environment_state_model['status_message'] = 'testString'
        environment_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Environment model
        environment_model = {}
        environment_model['name'] = 'Toronto Dev Environtment'
        environment_model['schema_version'] = '1.0'
        environment_model['source'] = external_source_model
        environment_model['description'] = 'Deploys dev environtment instance in Toronto Region'
        environment_model['resource_group'] = 'Default'
        environment_model['tags'] = ['testString']
        environment_model['location'] = 'us-south'
        environment_model['blueprint'] = blueprint_model
        environment_model['config'] = [config_item_model]
        environment_model['inputs'] = [variable_data_model]
        environment_model['settings'] = [variable_data_model]
        environment_model['outputs'] = [variable_data_model]
        environment_model['sys_lock'] = system_lock_model
        environment_model['user_state'] = environment_user_state_model
        environment_model['state'] = environment_state_model
        environment_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        environment_id = 'testString'
        environment = environment_model

        # Invoke method
        response = service.update_environment(
            environment_id,
            environment,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == environment


    @responses.activate
    def test_update_environment_value_error(self):
        """
        test_update_environment_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environments/testString')
        mock_response = '{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["tags"], "location": "us-south", "blueprint": {"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "workitems": [{"workitem_object_id": "workitem_object_id", "workitem_object_type": "workspace", "name": "name", "layer": "layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "tags": "tags", "inputs": [{"name": "name", "value": "value", "link": "link"}], "outputs": [{"name": "name", "value": "value", "link": "link"}], "settings": [{"name": "name", "value": "value", "link": "link"}], "last_job": {"command_object": "workspace", "command_object_name": "command_object_name", "command_object_id": "command_object_id", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"type": "type", "operations": [{"install": "install", "update": "update", "uninstall": "uninstall", "configure": "configure"}]}}, "config": [{"name": "name", "description": "description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "computed_git_repo_url", "git_repo_url": "git_repo_url", "git_token": "git_token", "git_repo_folder": "git_repo_folder", "git_release": "git_release", "git_branch": "git_branch"}, "catalog": {"catalog_name": "catalog_name", "offering_name": "offering_name", "offering_version": "offering_version", "offering_kind": "offering_kind", "offering_id": "offering_id", "offering_version_id": "offering_version_id", "offering_repo_url": "offering_repo_url"}, "cos_bucket": {"cos_bucket_url": "cos_bucket_url"}}, "inputs": [{"name": "name", "value": "value", "link": "link"}]}], "inputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "settings": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "outputs": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}], "environment_id": "environment_id", "crn": "crn", "account": "account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "created_by", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "updated_by", "sys_lock": {"sys_locked": true, "sys_locked_by": "sys_locked_by", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Environment_Create_Init", "set_by": "set_by", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "status_message"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableMetadata model
        variable_metadata_model = {}
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a VariableData model
        variable_data_model = {}
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a BlueprintVariableData model
        blueprint_variable_data_model = {}
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItemLastJob model
        work_item_last_job_model = {}
        work_item_last_job_model['command_object'] = 'workspace'
        work_item_last_job_model['command_object_name'] = 'testString'
        work_item_last_job_model['command_object_id'] = 'testString'
        work_item_last_job_model['command_name'] = 'workspace_plan'
        work_item_last_job_model['job_status'] = 'job_pending'
        work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a WorkItem model
        work_item_model = {}
        work_item_model['workitem_object_id'] = 'testString'
        work_item_model['workitem_object_type'] = 'workspace'
        work_item_model['name'] = 'testString'
        work_item_model['layer'] = 'testString'
        work_item_model['source'] = external_source_model
        work_item_model['tags'] = 'testString'
        work_item_model['inputs'] = [blueprint_variable_data_model]
        work_item_model['outputs'] = [blueprint_variable_data_model]
        work_item_model['settings'] = [blueprint_variable_data_model]
        work_item_model['last_job'] = work_item_last_job_model
        work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a FlowOperations model
        flow_operations_model = {}
        flow_operations_model['install'] = 'testString'
        flow_operations_model['update'] = 'testString'
        flow_operations_model['uninstall'] = 'testString'
        flow_operations_model['configure'] = 'testString'
        flow_operations_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Flow model
        flow_model = {}
        flow_model['type'] = 'testString'
        flow_model['operations'] = [flow_operations_model]
        flow_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Blueprint model
        blueprint_model = {}
        blueprint_model['name'] = 'testString'
        blueprint_model['description'] = 'testString'
        blueprint_model['source'] = external_source_model
        blueprint_model['inputs'] = [variable_data_model]
        blueprint_model['outputs'] = [variable_data_model]
        blueprint_model['settings'] = [variable_data_model]
        blueprint_model['workitems'] = [work_item_model]
        blueprint_model['flow'] = flow_model
        blueprint_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ConfigItem model
        config_item_model = {}
        config_item_model['name'] = 'testString'
        config_item_model['description'] = 'testString'
        config_item_model['source'] = external_source_model
        config_item_model['inputs'] = [blueprint_variable_data_model]
        config_item_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a SystemLock model
        system_lock_model = {}
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentUserState model
        environment_user_state_model = {}
        environment_user_state_model['state'] = 'Environment_Create_Init'
        environment_user_state_model['set_by'] = 'testString'
        environment_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a EnvironmentState model
        environment_state_model = {}
        environment_state_model['status_code'] = 'normal'
        environment_state_model['status_message'] = 'testString'
        environment_state_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a Environment model
        environment_model = {}
        environment_model['name'] = 'Toronto Dev Environtment'
        environment_model['schema_version'] = '1.0'
        environment_model['source'] = external_source_model
        environment_model['description'] = 'Deploys dev environtment instance in Toronto Region'
        environment_model['resource_group'] = 'Default'
        environment_model['tags'] = ['testString']
        environment_model['location'] = 'us-south'
        environment_model['blueprint'] = blueprint_model
        environment_model['config'] = [config_item_model]
        environment_model['inputs'] = [variable_data_model]
        environment_model['settings'] = [variable_data_model]
        environment_model['outputs'] = [variable_data_model]
        environment_model['sys_lock'] = system_lock_model
        environment_model['user_state'] = environment_user_state_model
        environment_model['state'] = environment_state_model
        environment_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        environment_id = 'testString'
        environment = environment_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "environment_id": environment_id,
            "environment": environment,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_environment(**req_copy)



class TestListEnvironmentWorkspaces():
    """
    Test Class for list_environment_workspaces
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_environment_workspaces_all_params(self):
        """
        list_environment_workspaces()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environment/testString/workspaces')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        environment_id = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.list_environment_workspaces(
            environment_id,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_list_environment_workspaces_required_params(self):
        """
        test_list_environment_workspaces_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environment/testString/workspaces')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        environment_id = 'testString'

        # Invoke method
        response = service.list_environment_workspaces(
            environment_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_environment_workspaces_value_error(self):
        """
        test_list_environment_workspaces_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environment/testString/workspaces')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        environment_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "environment_id": environment_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_environment_workspaces(**req_copy)



class TestListEnvironmentResources():
    """
    Test Class for list_environment_resources
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_environment_resources_all_params(self):
        """
        list_environment_resources()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environment/testString/resources')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        environment_id = 'testString'
        offset = 0
        limit = 1

        # Invoke method
        response = service.list_environment_resources(
            environment_id,
            offset=offset,
            limit=limit,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'offset={}'.format(offset) in query_string
        assert 'limit={}'.format(limit) in query_string


    @responses.activate
    def test_list_environment_resources_required_params(self):
        """
        test_list_environment_resources_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environment/testString/resources')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        environment_id = 'testString'

        # Invoke method
        response = service.list_environment_resources(
            environment_id,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


    @responses.activate
    def test_list_environment_resources_value_error(self):
        """
        test_list_environment_resources_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/environment/testString/resources')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "outputs": [{"resource_id": "resource_id", "cloud_resource_name": "cloud_resource_name", "terraform_resource_name": "terraform_resource_name", "crn": "crn", "resource_state": "resource_state", "tags": ["tags"]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        environment_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "environment_id": environment_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_environment_resources(**req_copy)



# endregion
##############################################################################
# End of Service: Environment
##############################################################################

##############################################################################
# Start of Service: Kms
##############################################################################
# region

class TestGetKmsSettings():
    """
    Test Class for get_kms_settings
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_kms_settings_all_params(self):
        """
        get_kms_settings()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/kms')
        mock_response = '{"location": "location", "encryption_scheme": "encryption_scheme", "resource_group": "resource_group", "primary_crk": {"kms_name": "kms_name", "kms_private_endpoint": "kms_private_endpoint", "key_crn": "key_crn"}, "secondary_crk": {"kms_name": "kms_name", "kms_private_endpoint": "kms_private_endpoint", "key_crn": "key_crn"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        location = 'testString'

        # Invoke method
        response = service.get_kms_settings(
            location,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'location={}'.format(location) in query_string


    @responses.activate
    def test_get_kms_settings_value_error(self):
        """
        test_get_kms_settings_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/kms')
        mock_response = '{"location": "location", "encryption_scheme": "encryption_scheme", "resource_group": "resource_group", "primary_crk": {"kms_name": "kms_name", "kms_private_endpoint": "kms_private_endpoint", "key_crn": "key_crn"}, "secondary_crk": {"kms_name": "kms_name", "kms_private_endpoint": "kms_private_endpoint", "key_crn": "key_crn"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        location = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "location": location,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.get_kms_settings(**req_copy)



class TestUpdateKmsSettings():
    """
    Test Class for update_kms_settings
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_kms_settings_all_params(self):
        """
        update_kms_settings()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/kms')
        mock_response = '{"location": "location", "encryption_scheme": "encryption_scheme", "resource_group": "resource_group", "primary_crk": {"kms_name": "kms_name", "kms_private_endpoint": "kms_private_endpoint", "key_crn": "key_crn"}, "secondary_crk": {"kms_name": "kms_name", "kms_private_endpoint": "kms_private_endpoint", "key_crn": "key_crn"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a KMSSettingsPrimaryCrk model
        kms_settings_primary_crk_model = {}
        kms_settings_primary_crk_model['kms_name'] = 'testString'
        kms_settings_primary_crk_model['kms_private_endpoint'] = 'testString'
        kms_settings_primary_crk_model['key_crn'] = 'testString'
        kms_settings_primary_crk_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a KMSSettingsSecondaryCrk model
        kms_settings_secondary_crk_model = {}
        kms_settings_secondary_crk_model['kms_name'] = 'testString'
        kms_settings_secondary_crk_model['kms_private_endpoint'] = 'testString'
        kms_settings_secondary_crk_model['key_crn'] = 'testString'
        kms_settings_secondary_crk_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a KMSSettings model
        kms_settings_model = {}
        kms_settings_model['location'] = 'testString'
        kms_settings_model['encryption_scheme'] = 'testString'
        kms_settings_model['resource_group'] = 'testString'
        kms_settings_model['primary_crk'] = kms_settings_primary_crk_model
        kms_settings_model['secondary_crk'] = kms_settings_secondary_crk_model
        kms_settings_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        kms_settings = kms_settings_model

        # Invoke method
        response = service.update_kms_settings(
            kms_settings,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == kms_settings


    @responses.activate
    def test_update_kms_settings_value_error(self):
        """
        test_update_kms_settings_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/kms')
        mock_response = '{"location": "location", "encryption_scheme": "encryption_scheme", "resource_group": "resource_group", "primary_crk": {"kms_name": "kms_name", "kms_private_endpoint": "kms_private_endpoint", "key_crn": "key_crn"}, "secondary_crk": {"kms_name": "kms_name", "kms_private_endpoint": "kms_private_endpoint", "key_crn": "key_crn"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a KMSSettingsPrimaryCrk model
        kms_settings_primary_crk_model = {}
        kms_settings_primary_crk_model['kms_name'] = 'testString'
        kms_settings_primary_crk_model['kms_private_endpoint'] = 'testString'
        kms_settings_primary_crk_model['key_crn'] = 'testString'
        kms_settings_primary_crk_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a KMSSettingsSecondaryCrk model
        kms_settings_secondary_crk_model = {}
        kms_settings_secondary_crk_model['kms_name'] = 'testString'
        kms_settings_secondary_crk_model['kms_private_endpoint'] = 'testString'
        kms_settings_secondary_crk_model['key_crn'] = 'testString'
        kms_settings_secondary_crk_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a KMSSettings model
        kms_settings_model = {}
        kms_settings_model['location'] = 'testString'
        kms_settings_model['encryption_scheme'] = 'testString'
        kms_settings_model['resource_group'] = 'testString'
        kms_settings_model['primary_crk'] = kms_settings_primary_crk_model
        kms_settings_model['secondary_crk'] = kms_settings_secondary_crk_model
        kms_settings_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        kms_settings = kms_settings_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "kms_settings": kms_settings,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.update_kms_settings(**req_copy)



class TestListKms():
    """
    Test Class for list_kms
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_kms_all_params(self):
        """
        list_kms()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/kms_instances')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "kms_instances": [{"location": "location", "encryption_scheme": "encryption_scheme", "resource_group": "resource_group", "kms_crn": "kms_crn", "kms_name": "kms_name", "kms_private_endpoint": "kms_private_endpoint", "kms_public_endpoint": "kms_public_endpoint", "keys": [{"name": "name", "crn": "crn", "error": "error"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        encryption_scheme = 'testString'
        location = 'testString'
        resource_group = 'testString'
        limit = 1
        sort = 'testString'

        # Invoke method
        response = service.list_kms(
            encryption_scheme,
            location,
            resource_group=resource_group,
            limit=limit,
            sort=sort,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'encryption_scheme={}'.format(encryption_scheme) in query_string
        assert 'location={}'.format(location) in query_string
        assert 'resource_group={}'.format(resource_group) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'sort={}'.format(sort) in query_string


    @responses.activate
    def test_list_kms_required_params(self):
        """
        test_list_kms_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/kms_instances')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "kms_instances": [{"location": "location", "encryption_scheme": "encryption_scheme", "resource_group": "resource_group", "kms_crn": "kms_crn", "kms_name": "kms_name", "kms_private_endpoint": "kms_private_endpoint", "kms_public_endpoint": "kms_public_endpoint", "keys": [{"name": "name", "crn": "crn", "error": "error"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        encryption_scheme = 'testString'
        location = 'testString'

        # Invoke method
        response = service.list_kms(
            encryption_scheme,
            location,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?',1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'encryption_scheme={}'.format(encryption_scheme) in query_string
        assert 'location={}'.format(location) in query_string


    @responses.activate
    def test_list_kms_value_error(self):
        """
        test_list_kms_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/settings/kms_instances')
        mock_response = '{"total_count": 11, "limit": 5, "offset": 6, "kms_instances": [{"location": "location", "encryption_scheme": "encryption_scheme", "resource_group": "resource_group", "kms_crn": "kms_crn", "kms_name": "kms_name", "kms_private_endpoint": "kms_private_endpoint", "kms_public_endpoint": "kms_public_endpoint", "keys": [{"name": "name", "crn": "crn", "error": "error"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        encryption_scheme = 'testString'
        location = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "encryption_scheme": encryption_scheme,
            "location": location,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.list_kms(**req_copy)



# endregion
##############################################################################
# End of Service: Kms
##############################################################################

##############################################################################
# Start of Service: Util
##############################################################################
# region

class TestListLocations():
    """
    Test Class for list_locations
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_locations_all_params(self):
        """
        list_locations()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/locations')
        mock_response = '{"locations": [{"region": "region", "metro": "metro", "geography_code": "geography_code", "geography": "geography", "country": "country", "kind": "kind", "paired_region": ["paired_region"], "restricted": true}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_locations()


        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200


class TestProcessTemplateMetaData():
    """
    Test Class for process_template_meta_data
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_process_template_meta_data_all_params(self):
        """
        process_template_meta_data()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/template_metadata_processor')
        mock_response = '{"type": "type", "variables": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateMetaDataRequest model
        template_meta_data_request_model = {}
        template_meta_data_request_model['region'] = 'testString'
        template_meta_data_request_model['template_type'] = 'testString'
        template_meta_data_request_model['source'] = external_source_model
        template_meta_data_request_model['source_type'] = 'local'
        template_meta_data_request_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        template_meta_data_request = template_meta_data_request_model
        x_github_token = 'testString'

        # Invoke method
        response = service.process_template_meta_data(
            template_meta_data_request,
            x_github_token=x_github_token,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == template_meta_data_request


    @responses.activate
    def test_process_template_meta_data_required_params(self):
        """
        test_process_template_meta_data_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/template_metadata_processor')
        mock_response = '{"type": "type", "variables": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateMetaDataRequest model
        template_meta_data_request_model = {}
        template_meta_data_request_model['region'] = 'testString'
        template_meta_data_request_model['template_type'] = 'testString'
        template_meta_data_request_model['source'] = external_source_model
        template_meta_data_request_model['source_type'] = 'local'
        template_meta_data_request_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        template_meta_data_request = template_meta_data_request_model

        # Invoke method
        response = service.process_template_meta_data(
            template_meta_data_request,
            headers={}
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == template_meta_data_request


    @responses.activate
    def test_process_template_meta_data_value_error(self):
        """
        test_process_template_meta_data_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/v2/template_metadata_processor')
        mock_response = '{"type": "type", "variables": [{"name": "name", "value": "value", "metadata": {"type": "boolean", "aliases": ["aliases"], "description": "description", "default_value": "default_value", "secure": true, "immutable": false, "hidden": true, "options": ["options"], "min_value": 9, "max_value": 9, "min_length": 10, "max_length": 10, "matches": "matches", "position": 8, "group_by": "group_by", "source": "source"}, "link": "link"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ExternalSourceGit model
        external_source_git_model = {}
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCatalog model
        external_source_catalog_model = {}
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model = {}
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a ExternalSource model
        external_source_model = {}
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a dict representation of a TemplateMetaDataRequest model
        template_meta_data_request_model = {}
        template_meta_data_request_model['region'] = 'testString'
        template_meta_data_request_model['template_type'] = 'testString'
        template_meta_data_request_model['source'] = external_source_model
        template_meta_data_request_model['source_type'] = 'local'
        template_meta_data_request_model['foo'] = { 'foo': 'bar' }

        # Set up parameter values
        template_meta_data_request = template_meta_data_request_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "template_meta_data_request": template_meta_data_request,
        }
        for param in req_param_dict.keys():
            req_copy = {key:val if key is not param else None for (key,val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                service.process_template_meta_data(**req_copy)



# endregion
##############################################################################
# End of Service: Util
##############################################################################


##############################################################################
# Start of Model Tests
##############################################################################
# region
class TestAction():
    """
    Test Class for Action
    """

    def test_action_serialization(self):
        """
        Test serialization/deserialization for Action
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        bastion_resource_definition_model = {} # BastionResourceDefinition
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        action_state_model = {} # ActionState
        action_state_model['status_code'] = 'normal'
        action_state_model['status_job_id'] = 'testString'
        action_state_model['status_message'] = 'testString'
        action_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Action model
        action_model_json = {}
        action_model_json['name'] = 'Stop Action'
        action_model_json['description'] = 'The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.'
        action_model_json['location'] = 'us-south'
        action_model_json['resource_group'] = 'testString'
        action_model_json['tags'] = ['testString']
        action_model_json['user_state'] = user_state_model
        action_model_json['source_readme_url'] = 'testString'
        action_model_json['source'] = external_source_model
        action_model_json['source_type'] = 'local'
        action_model_json['command_parameter'] = 'testString'
        action_model_json['inventory'] = 'testString'
        action_model_json['credentials'] = [variable_data_model]
        action_model_json['bastion'] = bastion_resource_definition_model
        action_model_json['bastion_credential'] = variable_data_model
        action_model_json['targets_ini'] = 'testString'
        action_model_json['inputs'] = [variable_data_model]
        action_model_json['outputs'] = [variable_data_model]
        action_model_json['settings'] = [variable_data_model]
        action_model_json['id'] = 'testString'
        action_model_json['crn'] = 'testString'
        action_model_json['account'] = 'testString'
        action_model_json['source_created_at'] = '2020-01-28T18:40:40.123456Z'
        action_model_json['source_created_by'] = 'testString'
        action_model_json['source_updated_at'] = '2020-01-28T18:40:40.123456Z'
        action_model_json['source_updated_by'] = 'testString'
        action_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        action_model_json['created_by'] = 'testString'
        action_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        action_model_json['updated_by'] = 'testString'
        action_model_json['state'] = action_state_model
        action_model_json['playbook_names'] = ['testString']
        action_model_json['sys_lock'] = system_lock_model
        action_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Action by calling from_dict on the json representation
        action_model = Action.from_dict(action_model_json)
        assert action_model != False

        # Construct a model instance of Action by calling from_dict on the json representation
        action_model_dict = Action.from_dict(action_model_json).__dict__
        action_model2 = Action(**action_model_dict)

        # Verify the model instances are equivalent
        assert action_model == action_model2

        # Convert model instance back to dict and verify no loss of data
        action_model_json2 = action_model.to_dict()
        assert action_model_json2 == action_model_json

class TestActionList():
    """
    Test Class for ActionList
    """

    def test_action_list_serialization(self):
        """
        Test serialization/deserialization for ActionList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        action_lite_state_model = {} # ActionLiteState
        action_lite_state_model['status_code'] = 'normal'
        action_lite_state_model['status_message'] = 'testString'
        action_lite_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        action_lite_model = {} # ActionLite
        action_lite_model['name'] = 'Stop Action'
        action_lite_model['description'] = 'This Action can be used to Stop the targets'
        action_lite_model['id'] = 'testString'
        action_lite_model['crn'] = 'testString'
        action_lite_model['location'] = 'us-south'
        action_lite_model['resource_group'] = 'testString'
        action_lite_model['namespace'] = 'testString'
        action_lite_model['tags'] = ['testString']
        action_lite_model['playbook_name'] = 'testString'
        action_lite_model['user_state'] = user_state_model
        action_lite_model['state'] = action_lite_state_model
        action_lite_model['sys_lock'] = system_lock_model
        action_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        action_lite_model['created_by'] = 'testString'
        action_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        action_lite_model['updated_by'] = 'testString'
        action_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ActionList model
        action_list_model_json = {}
        action_list_model_json['total_count'] = 26
        action_list_model_json['limit'] = 26
        action_list_model_json['offset'] = 26
        action_list_model_json['actions'] = [action_lite_model]
        action_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ActionList by calling from_dict on the json representation
        action_list_model = ActionList.from_dict(action_list_model_json)
        assert action_list_model != False

        # Construct a model instance of ActionList by calling from_dict on the json representation
        action_list_model_dict = ActionList.from_dict(action_list_model_json).__dict__
        action_list_model2 = ActionList(**action_list_model_dict)

        # Verify the model instances are equivalent
        assert action_list_model == action_list_model2

        # Convert model instance back to dict and verify no loss of data
        action_list_model_json2 = action_list_model.to_dict()
        assert action_list_model_json2 == action_list_model_json

class TestActionLite():
    """
    Test Class for ActionLite
    """

    def test_action_lite_serialization(self):
        """
        Test serialization/deserialization for ActionLite
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        action_lite_state_model = {} # ActionLiteState
        action_lite_state_model['status_code'] = 'normal'
        action_lite_state_model['status_message'] = 'testString'
        action_lite_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ActionLite model
        action_lite_model_json = {}
        action_lite_model_json['name'] = 'Stop Action'
        action_lite_model_json['description'] = 'This Action can be used to Stop the targets'
        action_lite_model_json['id'] = 'testString'
        action_lite_model_json['crn'] = 'testString'
        action_lite_model_json['location'] = 'us-south'
        action_lite_model_json['resource_group'] = 'testString'
        action_lite_model_json['namespace'] = 'testString'
        action_lite_model_json['tags'] = ['testString']
        action_lite_model_json['playbook_name'] = 'testString'
        action_lite_model_json['user_state'] = user_state_model
        action_lite_model_json['state'] = action_lite_state_model
        action_lite_model_json['sys_lock'] = system_lock_model
        action_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        action_lite_model_json['created_by'] = 'testString'
        action_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        action_lite_model_json['updated_by'] = 'testString'
        action_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ActionLite by calling from_dict on the json representation
        action_lite_model = ActionLite.from_dict(action_lite_model_json)
        assert action_lite_model != False

        # Construct a model instance of ActionLite by calling from_dict on the json representation
        action_lite_model_dict = ActionLite.from_dict(action_lite_model_json).__dict__
        action_lite_model2 = ActionLite(**action_lite_model_dict)

        # Verify the model instances are equivalent
        assert action_lite_model == action_lite_model2

        # Convert model instance back to dict and verify no loss of data
        action_lite_model_json2 = action_lite_model.to_dict()
        assert action_lite_model_json2 == action_lite_model_json

class TestActionLiteState():
    """
    Test Class for ActionLiteState
    """

    def test_action_lite_state_serialization(self):
        """
        Test serialization/deserialization for ActionLiteState
        """

        # Construct a json representation of a ActionLiteState model
        action_lite_state_model_json = {}
        action_lite_state_model_json['status_code'] = 'normal'
        action_lite_state_model_json['status_message'] = 'testString'
        action_lite_state_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ActionLiteState by calling from_dict on the json representation
        action_lite_state_model = ActionLiteState.from_dict(action_lite_state_model_json)
        assert action_lite_state_model != False

        # Construct a model instance of ActionLiteState by calling from_dict on the json representation
        action_lite_state_model_dict = ActionLiteState.from_dict(action_lite_state_model_json).__dict__
        action_lite_state_model2 = ActionLiteState(**action_lite_state_model_dict)

        # Verify the model instances are equivalent
        assert action_lite_state_model == action_lite_state_model2

        # Convert model instance back to dict and verify no loss of data
        action_lite_state_model_json2 = action_lite_state_model.to_dict()
        assert action_lite_state_model_json2 == action_lite_state_model_json

class TestActionState():
    """
    Test Class for ActionState
    """

    def test_action_state_serialization(self):
        """
        Test serialization/deserialization for ActionState
        """

        # Construct a json representation of a ActionState model
        action_state_model_json = {}
        action_state_model_json['status_code'] = 'normal'
        action_state_model_json['status_job_id'] = 'testString'
        action_state_model_json['status_message'] = 'testString'
        action_state_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ActionState by calling from_dict on the json representation
        action_state_model = ActionState.from_dict(action_state_model_json)
        assert action_state_model != False

        # Construct a model instance of ActionState by calling from_dict on the json representation
        action_state_model_dict = ActionState.from_dict(action_state_model_json).__dict__
        action_state_model2 = ActionState(**action_state_model_dict)

        # Verify the model instances are equivalent
        assert action_state_model == action_state_model2

        # Convert model instance back to dict and verify no loss of data
        action_state_model_json2 = action_state_model.to_dict()
        assert action_state_model_json2 == action_state_model_json

class TestAdapter():
    """
    Test Class for Adapter
    """

    def test_adapter_serialization(self):
        """
        Test serialization/deserialization for Adapter
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Adapter model
        adapter_model_json = {}
        adapter_model_json['adapter_name'] = 'testString'
        adapter_model_json['adapter_type'] = 'scm_adapter'
        adapter_model_json['location'] = 'us-south'
        adapter_model_json['resource_group'] = 'testString'
        adapter_model_json['tags'] = ['testString']
        adapter_model_json['adapter_endpoint_url'] = 'testString'
        adapter_model_json['service_id'] = 'testString'
        adapter_model_json['apikey'] = 'testString'
        adapter_model_json['user_state'] = user_state_model
        adapter_model_json['ignore_inflight_operations'] = True
        adapter_model_json['adapter_id'] = 'testString'
        adapter_model_json['registered_by'] = 'testString'
        adapter_model_json['registered_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model_json['updated_by'] = 'testString'
        adapter_model_json['sys_lock'] = system_lock_model
        adapter_model_json['adapter_health'] = 'active'
        adapter_model_json['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Adapter by calling from_dict on the json representation
        adapter_model = Adapter.from_dict(adapter_model_json)
        assert adapter_model != False

        # Construct a model instance of Adapter by calling from_dict on the json representation
        adapter_model_dict = Adapter.from_dict(adapter_model_json).__dict__
        adapter_model2 = Adapter(**adapter_model_dict)

        # Verify the model instances are equivalent
        assert adapter_model == adapter_model2

        # Convert model instance back to dict and verify no loss of data
        adapter_model_json2 = adapter_model.to_dict()
        assert adapter_model_json2 == adapter_model_json

class TestAdapterList():
    """
    Test Class for AdapterList
    """

    def test_adapter_list_serialization(self):
        """
        Test serialization/deserialization for AdapterList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        adapter_model = {} # Adapter
        adapter_model['adapter_name'] = 'testString'
        adapter_model['adapter_type'] = 'scm_adapter'
        adapter_model['location'] = 'us-south'
        adapter_model['resource_group'] = 'testString'
        adapter_model['tags'] = ['testString']
        adapter_model['adapter_endpoint_url'] = 'testString'
        adapter_model['service_id'] = 'testString'
        adapter_model['apikey'] = 'testString'
        adapter_model['user_state'] = user_state_model
        adapter_model['ignore_inflight_operations'] = True
        adapter_model['adapter_id'] = 'testString'
        adapter_model['registered_by'] = 'testString'
        adapter_model['registered_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['updated_by'] = 'testString'
        adapter_model['sys_lock'] = system_lock_model
        adapter_model['adapter_health'] = 'active'
        adapter_model['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        adapter_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a AdapterList model
        adapter_list_model_json = {}
        adapter_list_model_json['total_count'] = 26
        adapter_list_model_json['limit'] = 26
        adapter_list_model_json['offset'] = 26
        adapter_list_model_json['adapters'] = [adapter_model]
        adapter_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of AdapterList by calling from_dict on the json representation
        adapter_list_model = AdapterList.from_dict(adapter_list_model_json)
        assert adapter_list_model != False

        # Construct a model instance of AdapterList by calling from_dict on the json representation
        adapter_list_model_dict = AdapterList.from_dict(adapter_list_model_json).__dict__
        adapter_list_model2 = AdapterList(**adapter_list_model_dict)

        # Verify the model instances are equivalent
        assert adapter_list_model == adapter_list_model2

        # Convert model instance back to dict and verify no loss of data
        adapter_list_model_json2 = adapter_list_model.to_dict()
        assert adapter_list_model_json2 == adapter_list_model_json

class TestBastionResourceDefinition():
    """
    Test Class for BastionResourceDefinition
    """

    def test_bastion_resource_definition_serialization(self):
        """
        Test serialization/deserialization for BastionResourceDefinition
        """

        # Construct a json representation of a BastionResourceDefinition model
        bastion_resource_definition_model_json = {}
        bastion_resource_definition_model_json['name'] = 'testString'
        bastion_resource_definition_model_json['host'] = 'testString'
        bastion_resource_definition_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of BastionResourceDefinition by calling from_dict on the json representation
        bastion_resource_definition_model = BastionResourceDefinition.from_dict(bastion_resource_definition_model_json)
        assert bastion_resource_definition_model != False

        # Construct a model instance of BastionResourceDefinition by calling from_dict on the json representation
        bastion_resource_definition_model_dict = BastionResourceDefinition.from_dict(bastion_resource_definition_model_json).__dict__
        bastion_resource_definition_model2 = BastionResourceDefinition(**bastion_resource_definition_model_dict)

        # Verify the model instances are equivalent
        assert bastion_resource_definition_model == bastion_resource_definition_model2

        # Convert model instance back to dict and verify no loss of data
        bastion_resource_definition_model_json2 = bastion_resource_definition_model.to_dict()
        assert bastion_resource_definition_model_json2 == bastion_resource_definition_model_json

class TestBlueprint():
    """
    Test Class for Blueprint
    """

    def test_blueprint_serialization(self):
        """
        Test serialization/deserialization for Blueprint
        """

        # Construct dict forms of any model objects needed in order to build this model.

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        blueprint_variable_data_model = {} # BlueprintVariableData
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['link'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        work_item_last_job_model = {} # WorkItemLastJob
        work_item_last_job_model['command_object'] = 'workspace'
        work_item_last_job_model['command_object_name'] = 'testString'
        work_item_last_job_model['command_object_id'] = 'testString'
        work_item_last_job_model['command_name'] = 'workspace_plan'
        work_item_last_job_model['job_status'] = 'job_pending'
        work_item_last_job_model['foo'] = { 'foo': 'bar' }

        work_item_model = {} # WorkItem
        work_item_model['workitem_object_id'] = 'testString'
        work_item_model['workitem_object_type'] = 'workspace'
        work_item_model['name'] = 'testString'
        work_item_model['layer'] = 'testString'
        work_item_model['source'] = external_source_model
        work_item_model['tags'] = 'testString'
        work_item_model['inputs'] = [blueprint_variable_data_model]
        work_item_model['outputs'] = [blueprint_variable_data_model]
        work_item_model['settings'] = [blueprint_variable_data_model]
        work_item_model['last_job'] = work_item_last_job_model
        work_item_model['foo'] = { 'foo': 'bar' }

        flow_operations_model = {} # FlowOperations
        flow_operations_model['install'] = 'testString'
        flow_operations_model['update'] = 'testString'
        flow_operations_model['uninstall'] = 'testString'
        flow_operations_model['configure'] = 'testString'
        flow_operations_model['foo'] = { 'foo': 'bar' }

        flow_model = {} # Flow
        flow_model['type'] = 'testString'
        flow_model['operations'] = [flow_operations_model]
        flow_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Blueprint model
        blueprint_model_json = {}
        blueprint_model_json['name'] = 'testString'
        blueprint_model_json['description'] = 'testString'
        blueprint_model_json['source'] = external_source_model
        blueprint_model_json['inputs'] = [variable_data_model]
        blueprint_model_json['outputs'] = [variable_data_model]
        blueprint_model_json['settings'] = [variable_data_model]
        blueprint_model_json['workitems'] = [work_item_model]
        blueprint_model_json['flow'] = flow_model
        blueprint_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Blueprint by calling from_dict on the json representation
        blueprint_model = Blueprint.from_dict(blueprint_model_json)
        assert blueprint_model != False

        # Construct a model instance of Blueprint by calling from_dict on the json representation
        blueprint_model_dict = Blueprint.from_dict(blueprint_model_json).__dict__
        blueprint_model2 = Blueprint(**blueprint_model_dict)

        # Verify the model instances are equivalent
        assert blueprint_model == blueprint_model2

        # Convert model instance back to dict and verify no loss of data
        blueprint_model_json2 = blueprint_model.to_dict()
        assert blueprint_model_json2 == blueprint_model_json

class TestBlueprintVariableData():
    """
    Test Class for BlueprintVariableData
    """

    def test_blueprint_variable_data_serialization(self):
        """
        Test serialization/deserialization for BlueprintVariableData
        """

        # Construct a json representation of a BlueprintVariableData model
        blueprint_variable_data_model_json = {}
        blueprint_variable_data_model_json['name'] = 'testString'
        blueprint_variable_data_model_json['value'] = 'testString'
        blueprint_variable_data_model_json['link'] = 'testString'
        blueprint_variable_data_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of BlueprintVariableData by calling from_dict on the json representation
        blueprint_variable_data_model = BlueprintVariableData.from_dict(blueprint_variable_data_model_json)
        assert blueprint_variable_data_model != False

        # Construct a model instance of BlueprintVariableData by calling from_dict on the json representation
        blueprint_variable_data_model_dict = BlueprintVariableData.from_dict(blueprint_variable_data_model_json).__dict__
        blueprint_variable_data_model2 = BlueprintVariableData(**blueprint_variable_data_model_dict)

        # Verify the model instances are equivalent
        assert blueprint_variable_data_model == blueprint_variable_data_model2

        # Convert model instance back to dict and verify no loss of data
        blueprint_variable_data_model_json2 = blueprint_variable_data_model.to_dict()
        assert blueprint_variable_data_model_json2 == blueprint_variable_data_model_json

class TestCapsule():
    """
    Test Class for Capsule
    """

    def test_capsule_serialization(self):
        """
        Test serialization/deserialization for Capsule
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        job_status_workitem_model = {} # JobStatusWorkitem
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        job_status_flow_model = {} # JobStatusFlow
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_model = {} # JobStatusWorkspace
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        job_status_action_model = {} # JobStatusAction
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        job_status_schematics_resources_model = {} # JobStatusSchematicsResources
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        job_status_system_model = {} # JobStatusSystem
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        job_status_model = {} # JobStatus
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        job_data_template_model = {} # JobDataTemplate
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        job_data_workspace_model = {} # JobDataWorkspace
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        inventory_resource_record_model = {} # InventoryResourceRecord
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['id'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['created_by'] = 'testString'
        inventory_resource_record_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['updated_by'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        job_data_action_model = {} # JobDataAction
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        job_data_system_model = {} # JobDataSystem
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_last_job_model = {} # JobDataWorkItemLastJob
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_model = {} # JobDataWorkItem
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        job_data_flow_model = {} # JobDataFlow
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        job_data_model = {} # JobData
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        bastion_resource_definition_model = {} # BastionResourceDefinition
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        job_log_summary_log_errors_model = {} # JobLogSummaryLogErrors
        job_log_summary_log_errors_model['error_code'] = 'testString'
        job_log_summary_log_errors_model['error_msg'] = 'testString'
        job_log_summary_log_errors_model['error_count'] = 72.5
        job_log_summary_log_errors_model['foo'] = { 'foo': 'bar' }

        job_log_summary_repo_download_job_model = {} # JobLogSummaryRepoDownloadJob
        job_log_summary_repo_download_job_model['scanned_file_count'] = 72.5
        job_log_summary_repo_download_job_model['quarantined_file_count'] = 72.5
        job_log_summary_repo_download_job_model['detected_filetype'] = 'testString'
        job_log_summary_repo_download_job_model['inputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['outputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workspace_job_model = {} # JobLogSummaryWorkspaceJob
        job_log_summary_workspace_job_model['resources_add'] = 72.5
        job_log_summary_workspace_job_model['resources_modify'] = 72.5
        job_log_summary_workspace_job_model['resources_destroy'] = 72.5
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workitems_model = {} # JobLogSummaryWorkitems
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['resources_add'] = 72.5
        job_log_summary_workitems_model['resources_modify'] = 72.5
        job_log_summary_workitems_model['resources_destroy'] = 72.5
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        job_log_summary_flow_job_model = {} # JobLogSummaryFlowJob
        job_log_summary_flow_job_model['workitems_completed'] = 72.5
        job_log_summary_flow_job_model['workitems_pending'] = 72.5
        job_log_summary_flow_job_model['workitems_failed'] = 72.5
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_recap_model = {} # JobLogSummaryActionJobRecap
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_model = {} # JobLogSummaryActionJob
        job_log_summary_action_job_model['target_count'] = 72.5
        job_log_summary_action_job_model['task_count'] = 72.5
        job_log_summary_action_job_model['play_count'] = 72.5
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_system_job_model = {} # JobLogSummarySystemJob
        job_log_summary_system_job_model['target_count'] = 72.5
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_model = {} # JobLogSummary
        job_log_summary_model['job_id'] = 'testString'
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['log_start_at'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['log_analyzed_till'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['elapsed_time'] = 72.5
        job_log_summary_model['log_errors'] = [job_log_summary_log_errors_model]
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        job_model = {} # Job
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['id'] = 'testString'
        job_model['name'] = 'testString'
        job_model['description'] = 'testString'
        job_model['location'] = 'us-south'
        job_model['resource_group'] = 'testString'
        job_model['submitted_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['submitted_by'] = 'testString'
        job_model['start_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['end_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['duration'] = 'testString'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['log_store_url'] = 'testString'
        job_model['state_store_url'] = 'testString'
        job_model['results_url'] = 'testString'
        job_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['foo'] = { 'foo': 'bar' }

        trigger_job_model = {} # TriggerJob
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        trigger_scheduled_model = {} # TriggerScheduled
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        controls_decision_model = {} # ControlsDecision
        controls_decision_model['rule'] = 'testString'
        controls_decision_model['pass_value'] = 'before'
        controls_decision_model['pass_expr'] = '== OR != OR <= OR >= OR > OR <'
        controls_decision_model['evidence_found_in'] = 'rule emitting details'
        controls_decision_model['foo'] = { 'foo': 'bar' }

        controls_escalation_model = {} # ControlsEscalation
        controls_escalation_model['action_id'] = 'testString'
        controls_escalation_model['foo'] = { 'foo': 'bar' }

        controls_lite_state_model = {} # ControlsLiteState
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        capsule_result_resources_model = {} # CapsuleResultResources
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        capsule_result_evidences_model = {} # CapsuleResultEvidences
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        job_result_capsule_model = {} # JobResultCapsule
        job_result_capsule_model['job_id'] = 'testString'
        job_result_capsule_model['job_name'] = 'testString'
        job_result_capsule_model['policy'] = 'testString'
        job_result_capsule_model['severity'] = 1
        job_result_capsule_model['job_state'] = 'success'
        job_result_capsule_model['failures'] = ['testString']
        job_result_capsule_model['passed'] = ['testString']
        job_result_capsule_model['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model['foo'] = { 'foo': 'bar' }

        job_data_capsule_model = {} # JobDataCapsule
        job_data_capsule_model['capsule_id'] = 'testString'
        job_data_capsule_model['calsule_name'] = 'testString'
        job_data_capsule_model['inputs'] = [variable_data_model]
        job_data_capsule_model['results'] = [job_result_capsule_model]
        job_data_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_capsule_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Capsule model
        capsule_model_json = {}
        capsule_model_json['name'] = 'testString'
        capsule_model_json['description'] = 'testString'
        capsule_model_json['type'] = 'testString'
        capsule_model_json['user_state'] = user_state_model
        capsule_model_json['package'] = 'Policy package path'
        capsule_model_json['severity'] = 1
        capsule_model_json['inventory'] = 'testString'
        capsule_model_json['trigger_record_id'] = 'testString'
        capsule_model_json['job_triggers'] = [trigger_job_model]
        capsule_model_json['scheduled_triggers'] = [trigger_scheduled_model]
        capsule_model_json['inputs'] = [variable_data_model]
        capsule_model_json['decisions'] = [controls_decision_model]
        capsule_model_json['escalations'] = [controls_escalation_model]
        capsule_model_json['id'] = 'testString'
        capsule_model_json['status'] = 'testString'
        capsule_model_json['controls_id'] = 'testString'
        capsule_model_json['controls_name'] = 'testString'
        capsule_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model_json['created_by'] = 'testString'
        capsule_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model_json['updated_by'] = 'testString'
        capsule_model_json['state'] = controls_lite_state_model
        capsule_model_json['last_job_data'] = job_data_capsule_model
        capsule_model_json['sys_lock'] = system_lock_model
        capsule_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Capsule by calling from_dict on the json representation
        capsule_model = Capsule.from_dict(capsule_model_json)
        assert capsule_model != False

        # Construct a model instance of Capsule by calling from_dict on the json representation
        capsule_model_dict = Capsule.from_dict(capsule_model_json).__dict__
        capsule_model2 = Capsule(**capsule_model_dict)

        # Verify the model instances are equivalent
        assert capsule_model == capsule_model2

        # Convert model instance back to dict and verify no loss of data
        capsule_model_json2 = capsule_model.to_dict()
        assert capsule_model_json2 == capsule_model_json

class TestCapsuleList():
    """
    Test Class for CapsuleList
    """

    def test_capsule_list_serialization(self):
        """
        Test serialization/deserialization for CapsuleList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        capsule_lite_state_model = {} # CapsuleLiteState
        capsule_lite_state_model['status_code'] = 'normal'
        capsule_lite_state_model['status_message'] = 'testString'
        capsule_lite_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        capsule_lite_model = {} # CapsuleLite
        capsule_lite_model['name'] = 'testString'
        capsule_lite_model['description'] = 'This Capsule can be used to Stop the targets'
        capsule_lite_model['id'] = 'testString'
        capsule_lite_model['crn'] = 'testString'
        capsule_lite_model['location'] = 'us-south'
        capsule_lite_model['resource_group'] = 'testString'
        capsule_lite_model['tags'] = ['testString']
        capsule_lite_model['user_state'] = user_state_model
        capsule_lite_model['state'] = capsule_lite_state_model
        capsule_lite_model['sys_lock'] = system_lock_model
        capsule_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_lite_model['created_by'] = 'testString'
        capsule_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_lite_model['updated_by'] = 'testString'
        capsule_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a CapsuleList model
        capsule_list_model_json = {}
        capsule_list_model_json['total_count'] = 26
        capsule_list_model_json['limit'] = 26
        capsule_list_model_json['offset'] = 26
        capsule_list_model_json['capsules'] = [capsule_lite_model]
        capsule_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CapsuleList by calling from_dict on the json representation
        capsule_list_model = CapsuleList.from_dict(capsule_list_model_json)
        assert capsule_list_model != False

        # Construct a model instance of CapsuleList by calling from_dict on the json representation
        capsule_list_model_dict = CapsuleList.from_dict(capsule_list_model_json).__dict__
        capsule_list_model2 = CapsuleList(**capsule_list_model_dict)

        # Verify the model instances are equivalent
        assert capsule_list_model == capsule_list_model2

        # Convert model instance back to dict and verify no loss of data
        capsule_list_model_json2 = capsule_list_model.to_dict()
        assert capsule_list_model_json2 == capsule_list_model_json

class TestCapsuleLite():
    """
    Test Class for CapsuleLite
    """

    def test_capsule_lite_serialization(self):
        """
        Test serialization/deserialization for CapsuleLite
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        capsule_lite_state_model = {} # CapsuleLiteState
        capsule_lite_state_model['status_code'] = 'normal'
        capsule_lite_state_model['status_message'] = 'testString'
        capsule_lite_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a CapsuleLite model
        capsule_lite_model_json = {}
        capsule_lite_model_json['name'] = 'testString'
        capsule_lite_model_json['description'] = 'This Capsule can be used to Stop the targets'
        capsule_lite_model_json['id'] = 'testString'
        capsule_lite_model_json['crn'] = 'testString'
        capsule_lite_model_json['location'] = 'us-south'
        capsule_lite_model_json['resource_group'] = 'testString'
        capsule_lite_model_json['tags'] = ['testString']
        capsule_lite_model_json['user_state'] = user_state_model
        capsule_lite_model_json['state'] = capsule_lite_state_model
        capsule_lite_model_json['sys_lock'] = system_lock_model
        capsule_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_lite_model_json['created_by'] = 'testString'
        capsule_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_lite_model_json['updated_by'] = 'testString'
        capsule_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CapsuleLite by calling from_dict on the json representation
        capsule_lite_model = CapsuleLite.from_dict(capsule_lite_model_json)
        assert capsule_lite_model != False

        # Construct a model instance of CapsuleLite by calling from_dict on the json representation
        capsule_lite_model_dict = CapsuleLite.from_dict(capsule_lite_model_json).__dict__
        capsule_lite_model2 = CapsuleLite(**capsule_lite_model_dict)

        # Verify the model instances are equivalent
        assert capsule_lite_model == capsule_lite_model2

        # Convert model instance back to dict and verify no loss of data
        capsule_lite_model_json2 = capsule_lite_model.to_dict()
        assert capsule_lite_model_json2 == capsule_lite_model_json

class TestCapsuleLiteState():
    """
    Test Class for CapsuleLiteState
    """

    def test_capsule_lite_state_serialization(self):
        """
        Test serialization/deserialization for CapsuleLiteState
        """

        # Construct a json representation of a CapsuleLiteState model
        capsule_lite_state_model_json = {}
        capsule_lite_state_model_json['status_code'] = 'normal'
        capsule_lite_state_model_json['status_message'] = 'testString'
        capsule_lite_state_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CapsuleLiteState by calling from_dict on the json representation
        capsule_lite_state_model = CapsuleLiteState.from_dict(capsule_lite_state_model_json)
        assert capsule_lite_state_model != False

        # Construct a model instance of CapsuleLiteState by calling from_dict on the json representation
        capsule_lite_state_model_dict = CapsuleLiteState.from_dict(capsule_lite_state_model_json).__dict__
        capsule_lite_state_model2 = CapsuleLiteState(**capsule_lite_state_model_dict)

        # Verify the model instances are equivalent
        assert capsule_lite_state_model == capsule_lite_state_model2

        # Convert model instance back to dict and verify no loss of data
        capsule_lite_state_model_json2 = capsule_lite_state_model.to_dict()
        assert capsule_lite_state_model_json2 == capsule_lite_state_model_json

class TestCapsuleResultEvidences():
    """
    Test Class for CapsuleResultEvidences
    """

    def test_capsule_result_evidences_serialization(self):
        """
        Test serialization/deserialization for CapsuleResultEvidences
        """

        # Construct dict forms of any model objects needed in order to build this model.

        capsule_result_resources_model = {} # CapsuleResultResources
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a CapsuleResultEvidences model
        capsule_result_evidences_model_json = {}
        capsule_result_evidences_model_json['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CapsuleResultEvidences by calling from_dict on the json representation
        capsule_result_evidences_model = CapsuleResultEvidences.from_dict(capsule_result_evidences_model_json)
        assert capsule_result_evidences_model != False

        # Construct a model instance of CapsuleResultEvidences by calling from_dict on the json representation
        capsule_result_evidences_model_dict = CapsuleResultEvidences.from_dict(capsule_result_evidences_model_json).__dict__
        capsule_result_evidences_model2 = CapsuleResultEvidences(**capsule_result_evidences_model_dict)

        # Verify the model instances are equivalent
        assert capsule_result_evidences_model == capsule_result_evidences_model2

        # Convert model instance back to dict and verify no loss of data
        capsule_result_evidences_model_json2 = capsule_result_evidences_model.to_dict()
        assert capsule_result_evidences_model_json2 == capsule_result_evidences_model_json

class TestCapsuleResultResources():
    """
    Test Class for CapsuleResultResources
    """

    def test_capsule_result_resources_serialization(self):
        """
        Test serialization/deserialization for CapsuleResultResources
        """

        # Construct a json representation of a CapsuleResultResources model
        capsule_result_resources_model_json = {}
        capsule_result_resources_model_json['name'] = 'testString'
        capsule_result_resources_model_json['type'] = 'testString'
        capsule_result_resources_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CapsuleResultResources by calling from_dict on the json representation
        capsule_result_resources_model = CapsuleResultResources.from_dict(capsule_result_resources_model_json)
        assert capsule_result_resources_model != False

        # Construct a model instance of CapsuleResultResources by calling from_dict on the json representation
        capsule_result_resources_model_dict = CapsuleResultResources.from_dict(capsule_result_resources_model_json).__dict__
        capsule_result_resources_model2 = CapsuleResultResources(**capsule_result_resources_model_dict)

        # Verify the model instances are equivalent
        assert capsule_result_resources_model == capsule_result_resources_model2

        # Convert model instance back to dict and verify no loss of data
        capsule_result_resources_model_json2 = capsule_result_resources_model.to_dict()
        assert capsule_result_resources_model_json2 == capsule_result_resources_model_json

class TestCartOrder():
    """
    Test Class for CartOrder
    """

    def test_cart_order_serialization(self):
        """
        Test serialization/deserialization for CartOrder
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        target_request_model = {} # TargetRequest
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        service_mapping_rule_model = {} # ServiceMappingRule
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        service_variable_data_model = {} # ServiceVariableData
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        sku_user_state_model = {} # SKUUserState
        sku_user_state_model['state'] = 'testString'
        sku_user_state_model['set_by'] = 'testString'
        sku_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        sku_user_state_model['foo'] = { 'foo': 'bar' }

        item_sku_model = {} # ItemSKU
        item_sku_model['sku_id'] = 'testString'
        item_sku_model['sku_type'] = 'testString'
        item_sku_model['sku_sys_lock'] = system_lock_model
        item_sku_model['sku_user_state'] = sku_user_state_model
        item_sku_model['foo'] = { 'foo': 'bar' }

        order_item_configuration_model = {} # OrderItemConfiguration
        order_item_configuration_model['name'] = 'AWS Satellite'
        order_item_configuration_model['description'] = 'Create satellite location in AWS'
        order_item_configuration_model['inputs'] = [variable_data_model]
        order_item_configuration_model['settings'] = [variable_data_model]
        order_item_configuration_model['outputs'] = [variable_data_model]
        order_item_configuration_model['target'] = target_request_model
        order_item_configuration_model['operation'] = 'install'
        order_item_configuration_model['service_data'] = [service_variable_data_model]
        order_item_configuration_model['catalog_id'] = 'testString'
        order_item_configuration_model['offering_id'] = 'testString'
        order_item_configuration_model['owning_account'] = 'testString'
        order_item_configuration_model['owning_account_crn'] = 'testString'
        order_item_configuration_model['offering_kind_id'] = 'testString'
        order_item_configuration_model['offering_target_kind'] = 'testString'
        order_item_configuration_model['offering_version_id'] = 'testString'
        order_item_configuration_model['offering_kind'] = 'testString'
        order_item_configuration_model['offering_fulfilment_kind'] = 'testString'
        order_item_configuration_model['offering_version'] = 'testString'
        order_item_configuration_model['offering_provisioner_url'] = 'testString'
        order_item_configuration_model['offering_provisioner_ssh'] = 'testString'
        order_item_configuration_model['offering_provisioner_working_directory'] = 'testString'
        order_item_configuration_model['item_sku'] = item_sku_model
        order_item_configuration_model['foo'] = { 'foo': 'bar' }

        cart_order_user_state_model = {} # CartOrderUserState
        cart_order_user_state_model['state'] = 'Order_Create_Init'
        cart_order_user_state_model['set_by'] = 'testString'
        cart_order_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_user_state_model['foo'] = { 'foo': 'bar' }

        cart_order_lite_state_model = {} # CartOrderLiteState
        cart_order_lite_state_model['status_code'] = 'normal'
        cart_order_lite_state_model['status_message'] = 'testString'
        cart_order_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a CartOrder model
        cart_order_model_json = {}
        cart_order_model_json['name'] = 'MySatelliteLocation'
        cart_order_model_json['description'] = 'Creates satellite location in AWS'
        cart_order_model_json['tags'] = ['testString']
        cart_order_model_json['cart_items'] = [order_item_configuration_model]
        cart_order_model_json['service_name'] = 'SatelliteLocation'
        cart_order_model_json['resource_group'] = 'testString'
        cart_order_model_json['location'] = 'us-south'
        cart_order_model_json['user_state'] = cart_order_user_state_model
        cart_order_model_json['cart_order_id'] = 'testString'
        cart_order_model_json['crn'] = 'testString'
        cart_order_model_json['account'] = 'testString'
        cart_order_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_model_json['created_by'] = 'testString'
        cart_order_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_model_json['updated_by'] = 'testString'
        cart_order_model_json['sys_lock'] = system_lock_model
        cart_order_model_json['state'] = cart_order_lite_state_model
        cart_order_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CartOrder by calling from_dict on the json representation
        cart_order_model = CartOrder.from_dict(cart_order_model_json)
        assert cart_order_model != False

        # Construct a model instance of CartOrder by calling from_dict on the json representation
        cart_order_model_dict = CartOrder.from_dict(cart_order_model_json).__dict__
        cart_order_model2 = CartOrder(**cart_order_model_dict)

        # Verify the model instances are equivalent
        assert cart_order_model == cart_order_model2

        # Convert model instance back to dict and verify no loss of data
        cart_order_model_json2 = cart_order_model.to_dict()
        assert cart_order_model_json2 == cart_order_model_json

class TestCartOrderList():
    """
    Test Class for CartOrderList
    """

    def test_cart_order_list_serialization(self):
        """
        Test serialization/deserialization for CartOrderList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        cart_order_user_state_model = {} # CartOrderUserState
        cart_order_user_state_model['state'] = 'Order_Create_Init'
        cart_order_user_state_model['set_by'] = 'testString'
        cart_order_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_user_state_model['foo'] = { 'foo': 'bar' }

        cart_order_lite_state_model = {} # CartOrderLiteState
        cart_order_lite_state_model['status_code'] = 'normal'
        cart_order_lite_state_model['status_message'] = 'testString'
        cart_order_lite_state_model['foo'] = { 'foo': 'bar' }

        cart_order_lite_model = {} # CartOrderLite
        cart_order_lite_model['name'] = 'MySatelliteLocation'
        cart_order_lite_model['description'] = 'Creates satellite location in AWS'
        cart_order_lite_model['service_name'] = 'SatelliteLocation'
        cart_order_lite_model['resource_group'] = 'testString'
        cart_order_lite_model['tags'] = ['testString']
        cart_order_lite_model['location'] = 'us-south'
        cart_order_lite_model['id'] = 'testString'
        cart_order_lite_model['crn'] = 'testString'
        cart_order_lite_model['account'] = 'testString'
        cart_order_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_lite_model['created_by'] = 'testString'
        cart_order_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_lite_model['updated_by'] = 'testString'
        cart_order_lite_model['sys_lock'] = system_lock_model
        cart_order_lite_model['user_state'] = cart_order_user_state_model
        cart_order_lite_model['state'] = cart_order_lite_state_model
        cart_order_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a CartOrderList model
        cart_order_list_model_json = {}
        cart_order_list_model_json['total_count'] = 26
        cart_order_list_model_json['limit'] = 26
        cart_order_list_model_json['offset'] = 26
        cart_order_list_model_json['cart'] = [cart_order_lite_model]
        cart_order_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CartOrderList by calling from_dict on the json representation
        cart_order_list_model = CartOrderList.from_dict(cart_order_list_model_json)
        assert cart_order_list_model != False

        # Construct a model instance of CartOrderList by calling from_dict on the json representation
        cart_order_list_model_dict = CartOrderList.from_dict(cart_order_list_model_json).__dict__
        cart_order_list_model2 = CartOrderList(**cart_order_list_model_dict)

        # Verify the model instances are equivalent
        assert cart_order_list_model == cart_order_list_model2

        # Convert model instance back to dict and verify no loss of data
        cart_order_list_model_json2 = cart_order_list_model.to_dict()
        assert cart_order_list_model_json2 == cart_order_list_model_json

class TestCartOrderLite():
    """
    Test Class for CartOrderLite
    """

    def test_cart_order_lite_serialization(self):
        """
        Test serialization/deserialization for CartOrderLite
        """

        # Construct dict forms of any model objects needed in order to build this model.

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        cart_order_user_state_model = {} # CartOrderUserState
        cart_order_user_state_model['state'] = 'Order_Create_Init'
        cart_order_user_state_model['set_by'] = 'testString'
        cart_order_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_user_state_model['foo'] = { 'foo': 'bar' }

        cart_order_lite_state_model = {} # CartOrderLiteState
        cart_order_lite_state_model['status_code'] = 'normal'
        cart_order_lite_state_model['status_message'] = 'testString'
        cart_order_lite_state_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a CartOrderLite model
        cart_order_lite_model_json = {}
        cart_order_lite_model_json['name'] = 'MySatelliteLocation'
        cart_order_lite_model_json['description'] = 'Creates satellite location in AWS'
        cart_order_lite_model_json['service_name'] = 'SatelliteLocation'
        cart_order_lite_model_json['resource_group'] = 'testString'
        cart_order_lite_model_json['tags'] = ['testString']
        cart_order_lite_model_json['location'] = 'us-south'
        cart_order_lite_model_json['id'] = 'testString'
        cart_order_lite_model_json['crn'] = 'testString'
        cart_order_lite_model_json['account'] = 'testString'
        cart_order_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_lite_model_json['created_by'] = 'testString'
        cart_order_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_lite_model_json['updated_by'] = 'testString'
        cart_order_lite_model_json['sys_lock'] = system_lock_model
        cart_order_lite_model_json['user_state'] = cart_order_user_state_model
        cart_order_lite_model_json['state'] = cart_order_lite_state_model
        cart_order_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CartOrderLite by calling from_dict on the json representation
        cart_order_lite_model = CartOrderLite.from_dict(cart_order_lite_model_json)
        assert cart_order_lite_model != False

        # Construct a model instance of CartOrderLite by calling from_dict on the json representation
        cart_order_lite_model_dict = CartOrderLite.from_dict(cart_order_lite_model_json).__dict__
        cart_order_lite_model2 = CartOrderLite(**cart_order_lite_model_dict)

        # Verify the model instances are equivalent
        assert cart_order_lite_model == cart_order_lite_model2

        # Convert model instance back to dict and verify no loss of data
        cart_order_lite_model_json2 = cart_order_lite_model.to_dict()
        assert cart_order_lite_model_json2 == cart_order_lite_model_json

class TestCartOrderLiteState():
    """
    Test Class for CartOrderLiteState
    """

    def test_cart_order_lite_state_serialization(self):
        """
        Test serialization/deserialization for CartOrderLiteState
        """

        # Construct a json representation of a CartOrderLiteState model
        cart_order_lite_state_model_json = {}
        cart_order_lite_state_model_json['status_code'] = 'normal'
        cart_order_lite_state_model_json['status_message'] = 'testString'
        cart_order_lite_state_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CartOrderLiteState by calling from_dict on the json representation
        cart_order_lite_state_model = CartOrderLiteState.from_dict(cart_order_lite_state_model_json)
        assert cart_order_lite_state_model != False

        # Construct a model instance of CartOrderLiteState by calling from_dict on the json representation
        cart_order_lite_state_model_dict = CartOrderLiteState.from_dict(cart_order_lite_state_model_json).__dict__
        cart_order_lite_state_model2 = CartOrderLiteState(**cart_order_lite_state_model_dict)

        # Verify the model instances are equivalent
        assert cart_order_lite_state_model == cart_order_lite_state_model2

        # Convert model instance back to dict and verify no loss of data
        cart_order_lite_state_model_json2 = cart_order_lite_state_model.to_dict()
        assert cart_order_lite_state_model_json2 == cart_order_lite_state_model_json

class TestCartOrderUserState():
    """
    Test Class for CartOrderUserState
    """

    def test_cart_order_user_state_serialization(self):
        """
        Test serialization/deserialization for CartOrderUserState
        """

        # Construct a json representation of a CartOrderUserState model
        cart_order_user_state_model_json = {}
        cart_order_user_state_model_json['state'] = 'Order_Create_Init'
        cart_order_user_state_model_json['set_by'] = 'testString'
        cart_order_user_state_model_json['set_at'] = '2020-01-28T18:40:40.123456Z'
        cart_order_user_state_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CartOrderUserState by calling from_dict on the json representation
        cart_order_user_state_model = CartOrderUserState.from_dict(cart_order_user_state_model_json)
        assert cart_order_user_state_model != False

        # Construct a model instance of CartOrderUserState by calling from_dict on the json representation
        cart_order_user_state_model_dict = CartOrderUserState.from_dict(cart_order_user_state_model_json).__dict__
        cart_order_user_state_model2 = CartOrderUserState(**cart_order_user_state_model_dict)

        # Verify the model instances are equivalent
        assert cart_order_user_state_model == cart_order_user_state_model2

        # Convert model instance back to dict and verify no loss of data
        cart_order_user_state_model_json2 = cart_order_user_state_model.to_dict()
        assert cart_order_user_state_model_json2 == cart_order_user_state_model_json

class TestCloudResource():
    """
    Test Class for CloudResource
    """

    def test_cloud_resource_serialization(self):
        """
        Test serialization/deserialization for CloudResource
        """

        # Construct a json representation of a CloudResource model
        cloud_resource_model_json = {}
        cloud_resource_model_json['resource_id'] = 'testString'
        cloud_resource_model_json['cloud_resource_name'] = 'testString'
        cloud_resource_model_json['terraform_resource_name'] = 'testString'
        cloud_resource_model_json['crn'] = 'testString'
        cloud_resource_model_json['resource_state'] = 'testString'
        cloud_resource_model_json['tags'] = ['testString']
        cloud_resource_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CloudResource by calling from_dict on the json representation
        cloud_resource_model = CloudResource.from_dict(cloud_resource_model_json)
        assert cloud_resource_model != False

        # Construct a model instance of CloudResource by calling from_dict on the json representation
        cloud_resource_model_dict = CloudResource.from_dict(cloud_resource_model_json).__dict__
        cloud_resource_model2 = CloudResource(**cloud_resource_model_dict)

        # Verify the model instances are equivalent
        assert cloud_resource_model == cloud_resource_model2

        # Convert model instance back to dict and verify no loss of data
        cloud_resource_model_json2 = cloud_resource_model.to_dict()
        assert cloud_resource_model_json2 == cloud_resource_model_json

class TestCloudResourceList():
    """
    Test Class for CloudResourceList
    """

    def test_cloud_resource_list_serialization(self):
        """
        Test serialization/deserialization for CloudResourceList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        cloud_resource_model = {} # CloudResource
        cloud_resource_model['resource_id'] = 'testString'
        cloud_resource_model['cloud_resource_name'] = 'testString'
        cloud_resource_model['terraform_resource_name'] = 'testString'
        cloud_resource_model['crn'] = 'testString'
        cloud_resource_model['resource_state'] = 'testString'
        cloud_resource_model['tags'] = ['testString']
        cloud_resource_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a CloudResourceList model
        cloud_resource_list_model_json = {}
        cloud_resource_list_model_json['total_count'] = 26
        cloud_resource_list_model_json['limit'] = 26
        cloud_resource_list_model_json['offset'] = 26
        cloud_resource_list_model_json['outputs'] = [cloud_resource_model]
        cloud_resource_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CloudResourceList by calling from_dict on the json representation
        cloud_resource_list_model = CloudResourceList.from_dict(cloud_resource_list_model_json)
        assert cloud_resource_list_model != False

        # Construct a model instance of CloudResourceList by calling from_dict on the json representation
        cloud_resource_list_model_dict = CloudResourceList.from_dict(cloud_resource_list_model_json).__dict__
        cloud_resource_list_model2 = CloudResourceList(**cloud_resource_list_model_dict)

        # Verify the model instances are equivalent
        assert cloud_resource_list_model == cloud_resource_list_model2

        # Convert model instance back to dict and verify no loss of data
        cloud_resource_list_model_json2 = cloud_resource_list_model.to_dict()
        assert cloud_resource_list_model_json2 == cloud_resource_list_model_json

class TestCommandList():
    """
    Test Class for CommandList
    """

    def test_command_list_serialization(self):
        """
        Test serialization/deserialization for CommandList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        command_list_commands_model = {} # CommandListCommands
        command_list_commands_model['command_name'] = 'workspace_plan'
        command_list_commands_model['command_parameter'] = 'testString'
        command_list_commands_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a CommandList model
        command_list_model_json = {}
        command_list_model_json['commands'] = [command_list_commands_model]
        command_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CommandList by calling from_dict on the json representation
        command_list_model = CommandList.from_dict(command_list_model_json)
        assert command_list_model != False

        # Construct a model instance of CommandList by calling from_dict on the json representation
        command_list_model_dict = CommandList.from_dict(command_list_model_json).__dict__
        command_list_model2 = CommandList(**command_list_model_dict)

        # Verify the model instances are equivalent
        assert command_list_model == command_list_model2

        # Convert model instance back to dict and verify no loss of data
        command_list_model_json2 = command_list_model.to_dict()
        assert command_list_model_json2 == command_list_model_json

class TestCommandListCommands():
    """
    Test Class for CommandListCommands
    """

    def test_command_list_commands_serialization(self):
        """
        Test serialization/deserialization for CommandListCommands
        """

        # Construct a json representation of a CommandListCommands model
        command_list_commands_model_json = {}
        command_list_commands_model_json['command_name'] = 'workspace_plan'
        command_list_commands_model_json['command_parameter'] = 'testString'
        command_list_commands_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CommandListCommands by calling from_dict on the json representation
        command_list_commands_model = CommandListCommands.from_dict(command_list_commands_model_json)
        assert command_list_commands_model != False

        # Construct a model instance of CommandListCommands by calling from_dict on the json representation
        command_list_commands_model_dict = CommandListCommands.from_dict(command_list_commands_model_json).__dict__
        command_list_commands_model2 = CommandListCommands(**command_list_commands_model_dict)

        # Verify the model instances are equivalent
        assert command_list_commands_model == command_list_commands_model2

        # Convert model instance back to dict and verify no loss of data
        command_list_commands_model_json2 = command_list_commands_model.to_dict()
        assert command_list_commands_model_json2 == command_list_commands_model_json

class TestConfigItem():
    """
    Test Class for ConfigItem
    """

    def test_config_item_serialization(self):
        """
        Test serialization/deserialization for ConfigItem
        """

        # Construct dict forms of any model objects needed in order to build this model.

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        blueprint_variable_data_model = {} # BlueprintVariableData
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['link'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ConfigItem model
        config_item_model_json = {}
        config_item_model_json['name'] = 'testString'
        config_item_model_json['description'] = 'testString'
        config_item_model_json['source'] = external_source_model
        config_item_model_json['inputs'] = [blueprint_variable_data_model]
        config_item_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ConfigItem by calling from_dict on the json representation
        config_item_model = ConfigItem.from_dict(config_item_model_json)
        assert config_item_model != False

        # Construct a model instance of ConfigItem by calling from_dict on the json representation
        config_item_model_dict = ConfigItem.from_dict(config_item_model_json).__dict__
        config_item_model2 = ConfigItem(**config_item_model_dict)

        # Verify the model instances are equivalent
        assert config_item_model == config_item_model2

        # Convert model instance back to dict and verify no loss of data
        config_item_model_json2 = config_item_model.to_dict()
        assert config_item_model_json2 == config_item_model_json

class TestConnection():
    """
    Test Class for Connection
    """

    def test_connection_serialization(self):
        """
        Test serialization/deserialization for Connection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        connection_secret_apikey_model = {} # ConnectionSecretApikey
        connection_secret_apikey_model['key'] = 'testString'
        connection_secret_apikey_model['foo'] = { 'foo': 'bar' }

        connection_secret_model = {} # ConnectionSecret
        connection_secret_model['type'] = 'apikey'
        connection_secret_model['apikey'] = connection_secret_apikey_model
        connection_secret_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Connection model
        connection_model_json = {}
        connection_model_json['name'] = 'testString'
        connection_model_json['description'] = 'testString'
        connection_model_json['resource_group'] = 'testString'
        connection_model_json['tags'] = ['testString']
        connection_model_json['connection_details'] = external_source_model
        connection_model_json['connection_secrets'] = connection_secret_model
        connection_model_json['id'] = 'testString'
        connection_model_json['account'] = 'testString'
        connection_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        connection_model_json['created_by'] = 'testString'
        connection_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        connection_model_json['updated_by'] = 'testString'
        connection_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Connection by calling from_dict on the json representation
        connection_model = Connection.from_dict(connection_model_json)
        assert connection_model != False

        # Construct a model instance of Connection by calling from_dict on the json representation
        connection_model_dict = Connection.from_dict(connection_model_json).__dict__
        connection_model2 = Connection(**connection_model_dict)

        # Verify the model instances are equivalent
        assert connection_model == connection_model2

        # Convert model instance back to dict and verify no loss of data
        connection_model_json2 = connection_model.to_dict()
        assert connection_model_json2 == connection_model_json

class TestConnectionList():
    """
    Test Class for ConnectionList
    """

    def test_connection_list_serialization(self):
        """
        Test serialization/deserialization for ConnectionList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        connection_lite_model = {} # ConnectionLite
        connection_lite_model['name'] = 'testString'
        connection_lite_model['resource_group'] = 'testString'
        connection_lite_model['tags'] = ['testString']
        connection_lite_model['source_type'] = 'git_hub'
        connection_lite_model['id'] = 'testString'
        connection_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        connection_lite_model['created_by'] = 'testString'
        connection_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        connection_lite_model['updated_by'] = 'testString'
        connection_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ConnectionList model
        connection_list_model_json = {}
        connection_list_model_json['total_count'] = 26
        connection_list_model_json['limit'] = 26
        connection_list_model_json['offset'] = 26
        connection_list_model_json['connections'] = [connection_lite_model]
        connection_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ConnectionList by calling from_dict on the json representation
        connection_list_model = ConnectionList.from_dict(connection_list_model_json)
        assert connection_list_model != False

        # Construct a model instance of ConnectionList by calling from_dict on the json representation
        connection_list_model_dict = ConnectionList.from_dict(connection_list_model_json).__dict__
        connection_list_model2 = ConnectionList(**connection_list_model_dict)

        # Verify the model instances are equivalent
        assert connection_list_model == connection_list_model2

        # Convert model instance back to dict and verify no loss of data
        connection_list_model_json2 = connection_list_model.to_dict()
        assert connection_list_model_json2 == connection_list_model_json

class TestConnectionLite():
    """
    Test Class for ConnectionLite
    """

    def test_connection_lite_serialization(self):
        """
        Test serialization/deserialization for ConnectionLite
        """

        # Construct a json representation of a ConnectionLite model
        connection_lite_model_json = {}
        connection_lite_model_json['name'] = 'testString'
        connection_lite_model_json['resource_group'] = 'testString'
        connection_lite_model_json['tags'] = ['testString']
        connection_lite_model_json['source_type'] = 'git_hub'
        connection_lite_model_json['id'] = 'testString'
        connection_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        connection_lite_model_json['created_by'] = 'testString'
        connection_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        connection_lite_model_json['updated_by'] = 'testString'
        connection_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ConnectionLite by calling from_dict on the json representation
        connection_lite_model = ConnectionLite.from_dict(connection_lite_model_json)
        assert connection_lite_model != False

        # Construct a model instance of ConnectionLite by calling from_dict on the json representation
        connection_lite_model_dict = ConnectionLite.from_dict(connection_lite_model_json).__dict__
        connection_lite_model2 = ConnectionLite(**connection_lite_model_dict)

        # Verify the model instances are equivalent
        assert connection_lite_model == connection_lite_model2

        # Convert model instance back to dict and verify no loss of data
        connection_lite_model_json2 = connection_lite_model.to_dict()
        assert connection_lite_model_json2 == connection_lite_model_json

class TestConnectionSecret():
    """
    Test Class for ConnectionSecret
    """

    def test_connection_secret_serialization(self):
        """
        Test serialization/deserialization for ConnectionSecret
        """

        # Construct dict forms of any model objects needed in order to build this model.

        connection_secret_apikey_model = {} # ConnectionSecretApikey
        connection_secret_apikey_model['key'] = 'testString'
        connection_secret_apikey_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ConnectionSecret model
        connection_secret_model_json = {}
        connection_secret_model_json['type'] = 'apikey'
        connection_secret_model_json['apikey'] = connection_secret_apikey_model
        connection_secret_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ConnectionSecret by calling from_dict on the json representation
        connection_secret_model = ConnectionSecret.from_dict(connection_secret_model_json)
        assert connection_secret_model != False

        # Construct a model instance of ConnectionSecret by calling from_dict on the json representation
        connection_secret_model_dict = ConnectionSecret.from_dict(connection_secret_model_json).__dict__
        connection_secret_model2 = ConnectionSecret(**connection_secret_model_dict)

        # Verify the model instances are equivalent
        assert connection_secret_model == connection_secret_model2

        # Convert model instance back to dict and verify no loss of data
        connection_secret_model_json2 = connection_secret_model.to_dict()
        assert connection_secret_model_json2 == connection_secret_model_json

class TestConnectionSecretApikey():
    """
    Test Class for ConnectionSecretApikey
    """

    def test_connection_secret_apikey_serialization(self):
        """
        Test serialization/deserialization for ConnectionSecretApikey
        """

        # Construct a json representation of a ConnectionSecretApikey model
        connection_secret_apikey_model_json = {}
        connection_secret_apikey_model_json['key'] = 'testString'
        connection_secret_apikey_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ConnectionSecretApikey by calling from_dict on the json representation
        connection_secret_apikey_model = ConnectionSecretApikey.from_dict(connection_secret_apikey_model_json)
        assert connection_secret_apikey_model != False

        # Construct a model instance of ConnectionSecretApikey by calling from_dict on the json representation
        connection_secret_apikey_model_dict = ConnectionSecretApikey.from_dict(connection_secret_apikey_model_json).__dict__
        connection_secret_apikey_model2 = ConnectionSecretApikey(**connection_secret_apikey_model_dict)

        # Verify the model instances are equivalent
        assert connection_secret_apikey_model == connection_secret_apikey_model2

        # Convert model instance back to dict and verify no loss of data
        connection_secret_apikey_model_json2 = connection_secret_apikey_model.to_dict()
        assert connection_secret_apikey_model_json2 == connection_secret_apikey_model_json

class TestControls():
    """
    Test Class for Controls
    """

    def test_controls_serialization(self):
        """
        Test serialization/deserialization for Controls
        """

        # Construct dict forms of any model objects needed in order to build this model.

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        job_status_workitem_model = {} # JobStatusWorkitem
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        job_status_flow_model = {} # JobStatusFlow
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_model = {} # JobStatusWorkspace
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        job_status_action_model = {} # JobStatusAction
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        job_status_schematics_resources_model = {} # JobStatusSchematicsResources
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        job_status_system_model = {} # JobStatusSystem
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        job_status_model = {} # JobStatus
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        job_data_template_model = {} # JobDataTemplate
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        job_data_workspace_model = {} # JobDataWorkspace
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        inventory_resource_record_model = {} # InventoryResourceRecord
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['id'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['created_by'] = 'testString'
        inventory_resource_record_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['updated_by'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        job_data_action_model = {} # JobDataAction
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        job_data_system_model = {} # JobDataSystem
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_last_job_model = {} # JobDataWorkItemLastJob
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_model = {} # JobDataWorkItem
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        job_data_flow_model = {} # JobDataFlow
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        job_data_model = {} # JobData
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        bastion_resource_definition_model = {} # BastionResourceDefinition
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        job_log_summary_log_errors_model = {} # JobLogSummaryLogErrors
        job_log_summary_log_errors_model['error_code'] = 'testString'
        job_log_summary_log_errors_model['error_msg'] = 'testString'
        job_log_summary_log_errors_model['error_count'] = 72.5
        job_log_summary_log_errors_model['foo'] = { 'foo': 'bar' }

        job_log_summary_repo_download_job_model = {} # JobLogSummaryRepoDownloadJob
        job_log_summary_repo_download_job_model['scanned_file_count'] = 72.5
        job_log_summary_repo_download_job_model['quarantined_file_count'] = 72.5
        job_log_summary_repo_download_job_model['detected_filetype'] = 'testString'
        job_log_summary_repo_download_job_model['inputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['outputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workspace_job_model = {} # JobLogSummaryWorkspaceJob
        job_log_summary_workspace_job_model['resources_add'] = 72.5
        job_log_summary_workspace_job_model['resources_modify'] = 72.5
        job_log_summary_workspace_job_model['resources_destroy'] = 72.5
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workitems_model = {} # JobLogSummaryWorkitems
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['resources_add'] = 72.5
        job_log_summary_workitems_model['resources_modify'] = 72.5
        job_log_summary_workitems_model['resources_destroy'] = 72.5
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        job_log_summary_flow_job_model = {} # JobLogSummaryFlowJob
        job_log_summary_flow_job_model['workitems_completed'] = 72.5
        job_log_summary_flow_job_model['workitems_pending'] = 72.5
        job_log_summary_flow_job_model['workitems_failed'] = 72.5
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_recap_model = {} # JobLogSummaryActionJobRecap
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_model = {} # JobLogSummaryActionJob
        job_log_summary_action_job_model['target_count'] = 72.5
        job_log_summary_action_job_model['task_count'] = 72.5
        job_log_summary_action_job_model['play_count'] = 72.5
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_system_job_model = {} # JobLogSummarySystemJob
        job_log_summary_system_job_model['target_count'] = 72.5
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_model = {} # JobLogSummary
        job_log_summary_model['job_id'] = 'testString'
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['log_start_at'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['log_analyzed_till'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['elapsed_time'] = 72.5
        job_log_summary_model['log_errors'] = [job_log_summary_log_errors_model]
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        job_model = {} # Job
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['id'] = 'testString'
        job_model['name'] = 'testString'
        job_model['description'] = 'testString'
        job_model['location'] = 'us-south'
        job_model['resource_group'] = 'testString'
        job_model['submitted_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['submitted_by'] = 'testString'
        job_model['start_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['end_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['duration'] = 'testString'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['log_store_url'] = 'testString'
        job_model['state_store_url'] = 'testString'
        job_model['results_url'] = 'testString'
        job_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['foo'] = { 'foo': 'bar' }

        trigger_job_model = {} # TriggerJob
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        trigger_scheduled_model = {} # TriggerScheduled
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        controls_decision_model = {} # ControlsDecision
        controls_decision_model['rule'] = 'testString'
        controls_decision_model['pass_value'] = 'before'
        controls_decision_model['pass_expr'] = '== OR != OR <= OR >= OR > OR <'
        controls_decision_model['evidence_found_in'] = 'rule emitting details'
        controls_decision_model['foo'] = { 'foo': 'bar' }

        controls_escalation_model = {} # ControlsEscalation
        controls_escalation_model['action_id'] = 'testString'
        controls_escalation_model['foo'] = { 'foo': 'bar' }

        controls_lite_state_model = {} # ControlsLiteState
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        capsule_result_resources_model = {} # CapsuleResultResources
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        capsule_result_evidences_model = {} # CapsuleResultEvidences
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        job_result_capsule_model = {} # JobResultCapsule
        job_result_capsule_model['job_id'] = 'testString'
        job_result_capsule_model['job_name'] = 'testString'
        job_result_capsule_model['policy'] = 'testString'
        job_result_capsule_model['severity'] = 1
        job_result_capsule_model['job_state'] = 'success'
        job_result_capsule_model['failures'] = ['testString']
        job_result_capsule_model['passed'] = ['testString']
        job_result_capsule_model['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model['foo'] = { 'foo': 'bar' }

        job_data_capsule_model = {} # JobDataCapsule
        job_data_capsule_model['capsule_id'] = 'testString'
        job_data_capsule_model['calsule_name'] = 'testString'
        job_data_capsule_model['inputs'] = [variable_data_model]
        job_data_capsule_model['results'] = [job_result_capsule_model]
        job_data_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_capsule_model['foo'] = { 'foo': 'bar' }

        capsule_model = {} # Capsule
        capsule_model['name'] = 'testString'
        capsule_model['description'] = 'testString'
        capsule_model['type'] = 'testString'
        capsule_model['user_state'] = user_state_model
        capsule_model['package'] = 'Policy package path'
        capsule_model['severity'] = 1
        capsule_model['inventory'] = 'testString'
        capsule_model['trigger_record_id'] = 'testString'
        capsule_model['job_triggers'] = [trigger_job_model]
        capsule_model['scheduled_triggers'] = [trigger_scheduled_model]
        capsule_model['inputs'] = [variable_data_model]
        capsule_model['decisions'] = [controls_decision_model]
        capsule_model['escalations'] = [controls_escalation_model]
        capsule_model['id'] = 'testString'
        capsule_model['status'] = 'testString'
        capsule_model['controls_id'] = 'testString'
        capsule_model['controls_name'] = 'testString'
        capsule_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['created_by'] = 'testString'
        capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        capsule_model['updated_by'] = 'testString'
        capsule_model['state'] = controls_lite_state_model
        capsule_model['last_job_data'] = job_data_capsule_model
        capsule_model['sys_lock'] = system_lock_model
        capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Controls model
        controls_model_json = {}
        controls_model_json['name'] = 'testString'
        controls_model_json['type'] = 'it_controls'
        controls_model_json['description'] = 'testString'
        controls_model_json['resource_group'] = 'testString'
        controls_model_json['location'] = 'us-south'
        controls_model_json['tags'] = ['testString']
        controls_model_json['source_readme_url'] = 'testString'
        controls_model_json['source'] = external_source_model
        controls_model_json['source_type'] = 'local'
        controls_model_json['inputs'] = [variable_data_model]
        controls_model_json['user_state'] = user_state_model
        controls_model_json['id'] = 'testString'
        controls_model_json['crn'] = 'testString'
        controls_model_json['source_created_at'] = '2020-01-28T18:40:40.123456Z'
        controls_model_json['source_created_by'] = 'testString'
        controls_model_json['source_updated_at'] = '2020-01-28T18:40:40.123456Z'
        controls_model_json['source_updated_by'] = 'testString'
        controls_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        controls_model_json['created_by'] = 'testString'
        controls_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        controls_model_json['updated_by'] = 'testString'
        controls_model_json['sys_lock'] = system_lock_model
        controls_model_json['capsules'] = [capsule_model]
        controls_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Controls by calling from_dict on the json representation
        controls_model = Controls.from_dict(controls_model_json)
        assert controls_model != False

        # Construct a model instance of Controls by calling from_dict on the json representation
        controls_model_dict = Controls.from_dict(controls_model_json).__dict__
        controls_model2 = Controls(**controls_model_dict)

        # Verify the model instances are equivalent
        assert controls_model == controls_model2

        # Convert model instance back to dict and verify no loss of data
        controls_model_json2 = controls_model.to_dict()
        assert controls_model_json2 == controls_model_json

class TestControlsDecision():
    """
    Test Class for ControlsDecision
    """

    def test_controls_decision_serialization(self):
        """
        Test serialization/deserialization for ControlsDecision
        """

        # Construct a json representation of a ControlsDecision model
        controls_decision_model_json = {}
        controls_decision_model_json['rule'] = 'testString'
        controls_decision_model_json['pass_value'] = 'before'
        controls_decision_model_json['pass_expr'] = '== OR != OR <= OR >= OR > OR <'
        controls_decision_model_json['evidence_found_in'] = 'rule emitting details'
        controls_decision_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ControlsDecision by calling from_dict on the json representation
        controls_decision_model = ControlsDecision.from_dict(controls_decision_model_json)
        assert controls_decision_model != False

        # Construct a model instance of ControlsDecision by calling from_dict on the json representation
        controls_decision_model_dict = ControlsDecision.from_dict(controls_decision_model_json).__dict__
        controls_decision_model2 = ControlsDecision(**controls_decision_model_dict)

        # Verify the model instances are equivalent
        assert controls_decision_model == controls_decision_model2

        # Convert model instance back to dict and verify no loss of data
        controls_decision_model_json2 = controls_decision_model.to_dict()
        assert controls_decision_model_json2 == controls_decision_model_json

class TestControlsEscalation():
    """
    Test Class for ControlsEscalation
    """

    def test_controls_escalation_serialization(self):
        """
        Test serialization/deserialization for ControlsEscalation
        """

        # Construct a json representation of a ControlsEscalation model
        controls_escalation_model_json = {}
        controls_escalation_model_json['action_id'] = 'testString'
        controls_escalation_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ControlsEscalation by calling from_dict on the json representation
        controls_escalation_model = ControlsEscalation.from_dict(controls_escalation_model_json)
        assert controls_escalation_model != False

        # Construct a model instance of ControlsEscalation by calling from_dict on the json representation
        controls_escalation_model_dict = ControlsEscalation.from_dict(controls_escalation_model_json).__dict__
        controls_escalation_model2 = ControlsEscalation(**controls_escalation_model_dict)

        # Verify the model instances are equivalent
        assert controls_escalation_model == controls_escalation_model2

        # Convert model instance back to dict and verify no loss of data
        controls_escalation_model_json2 = controls_escalation_model.to_dict()
        assert controls_escalation_model_json2 == controls_escalation_model_json

class TestControlsList():
    """
    Test Class for ControlsList
    """

    def test_controls_list_serialization(self):
        """
        Test serialization/deserialization for ControlsList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        controls_lite_state_model = {} # ControlsLiteState
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        controls_lite_model = {} # ControlsLite
        controls_lite_model['name'] = 'testString'
        controls_lite_model['description'] = 'This Controls can be used to Stop the targets'
        controls_lite_model['id'] = 'testString'
        controls_lite_model['crn'] = 'testString'
        controls_lite_model['location'] = 'us-south'
        controls_lite_model['resource_group'] = 'testString'
        controls_lite_model['tags'] = ['testString']
        controls_lite_model['user_state'] = user_state_model
        controls_lite_model['state'] = controls_lite_state_model
        controls_lite_model['sys_lock'] = system_lock_model
        controls_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        controls_lite_model['created_by'] = 'testString'
        controls_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        controls_lite_model['updated_by'] = 'testString'
        controls_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ControlsList model
        controls_list_model_json = {}
        controls_list_model_json['total_count'] = 26
        controls_list_model_json['limit'] = 26
        controls_list_model_json['offset'] = 26
        controls_list_model_json['controls'] = [controls_lite_model]
        controls_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ControlsList by calling from_dict on the json representation
        controls_list_model = ControlsList.from_dict(controls_list_model_json)
        assert controls_list_model != False

        # Construct a model instance of ControlsList by calling from_dict on the json representation
        controls_list_model_dict = ControlsList.from_dict(controls_list_model_json).__dict__
        controls_list_model2 = ControlsList(**controls_list_model_dict)

        # Verify the model instances are equivalent
        assert controls_list_model == controls_list_model2

        # Convert model instance back to dict and verify no loss of data
        controls_list_model_json2 = controls_list_model.to_dict()
        assert controls_list_model_json2 == controls_list_model_json

class TestControlsLite():
    """
    Test Class for ControlsLite
    """

    def test_controls_lite_serialization(self):
        """
        Test serialization/deserialization for ControlsLite
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        controls_lite_state_model = {} # ControlsLiteState
        controls_lite_state_model['status_code'] = 'normal'
        controls_lite_state_model['status_message'] = 'testString'
        controls_lite_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ControlsLite model
        controls_lite_model_json = {}
        controls_lite_model_json['name'] = 'testString'
        controls_lite_model_json['description'] = 'This Controls can be used to Stop the targets'
        controls_lite_model_json['id'] = 'testString'
        controls_lite_model_json['crn'] = 'testString'
        controls_lite_model_json['location'] = 'us-south'
        controls_lite_model_json['resource_group'] = 'testString'
        controls_lite_model_json['tags'] = ['testString']
        controls_lite_model_json['user_state'] = user_state_model
        controls_lite_model_json['state'] = controls_lite_state_model
        controls_lite_model_json['sys_lock'] = system_lock_model
        controls_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        controls_lite_model_json['created_by'] = 'testString'
        controls_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        controls_lite_model_json['updated_by'] = 'testString'
        controls_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ControlsLite by calling from_dict on the json representation
        controls_lite_model = ControlsLite.from_dict(controls_lite_model_json)
        assert controls_lite_model != False

        # Construct a model instance of ControlsLite by calling from_dict on the json representation
        controls_lite_model_dict = ControlsLite.from_dict(controls_lite_model_json).__dict__
        controls_lite_model2 = ControlsLite(**controls_lite_model_dict)

        # Verify the model instances are equivalent
        assert controls_lite_model == controls_lite_model2

        # Convert model instance back to dict and verify no loss of data
        controls_lite_model_json2 = controls_lite_model.to_dict()
        assert controls_lite_model_json2 == controls_lite_model_json

class TestControlsLiteState():
    """
    Test Class for ControlsLiteState
    """

    def test_controls_lite_state_serialization(self):
        """
        Test serialization/deserialization for ControlsLiteState
        """

        # Construct a json representation of a ControlsLiteState model
        controls_lite_state_model_json = {}
        controls_lite_state_model_json['status_code'] = 'normal'
        controls_lite_state_model_json['status_message'] = 'testString'
        controls_lite_state_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ControlsLiteState by calling from_dict on the json representation
        controls_lite_state_model = ControlsLiteState.from_dict(controls_lite_state_model_json)
        assert controls_lite_state_model != False

        # Construct a model instance of ControlsLiteState by calling from_dict on the json representation
        controls_lite_state_model_dict = ControlsLiteState.from_dict(controls_lite_state_model_json).__dict__
        controls_lite_state_model2 = ControlsLiteState(**controls_lite_state_model_dict)

        # Verify the model instances are equivalent
        assert controls_lite_state_model == controls_lite_state_model2

        # Convert model instance back to dict and verify no loss of data
        controls_lite_state_model_json2 = controls_lite_state_model.to_dict()
        assert controls_lite_state_model_json2 == controls_lite_state_model_json

class TestCredentialList():
    """
    Test Class for CredentialList
    """

    def test_credential_list_serialization(self):
        """
        Test serialization/deserialization for CredentialList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        credentialset_lite_model = {} # CredentialsetLite
        credentialset_lite_model['name'] = 'testString'
        credentialset_lite_model['description'] = 'testString'
        credentialset_lite_model['credential_id'] = 'testString'
        credentialset_lite_model['resource_group'] = 'testString'
        credentialset_lite_model['location'] = 'us-south'
        credentialset_lite_model['tags'] = ['testString']
        credentialset_lite_model['source_type'] = 'local'
        credentialset_lite_model['user_state'] = user_state_model
        credentialset_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        credentialset_lite_model['created_by'] = 'testString'
        credentialset_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        credentialset_lite_model['updated_by'] = 'testString'
        credentialset_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a CredentialList model
        credential_list_model_json = {}
        credential_list_model_json['total_count'] = 26
        credential_list_model_json['limit'] = 26
        credential_list_model_json['offset'] = 26
        credential_list_model_json['credentials'] = [credentialset_lite_model]
        credential_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CredentialList by calling from_dict on the json representation
        credential_list_model = CredentialList.from_dict(credential_list_model_json)
        assert credential_list_model != False

        # Construct a model instance of CredentialList by calling from_dict on the json representation
        credential_list_model_dict = CredentialList.from_dict(credential_list_model_json).__dict__
        credential_list_model2 = CredentialList(**credential_list_model_dict)

        # Verify the model instances are equivalent
        assert credential_list_model == credential_list_model2

        # Convert model instance back to dict and verify no loss of data
        credential_list_model_json2 = credential_list_model.to_dict()
        assert credential_list_model_json2 == credential_list_model_json

class TestCredentialset():
    """
    Test Class for Credentialset
    """

    def test_credentialset_serialization(self):
        """
        Test serialization/deserialization for Credentialset
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Credentialset model
        credentialset_model_json = {}
        credentialset_model_json['name'] = 'testString'
        credentialset_model_json['description'] = 'testString'
        credentialset_model_json['resource_group'] = 'testString'
        credentialset_model_json['location'] = 'us-south'
        credentialset_model_json['tags'] = ['testString']
        credentialset_model_json['data'] = [variable_data_model]
        credentialset_model_json['source_connection'] = 'testString'
        credentialset_model_json['source'] = external_source_model
        credentialset_model_json['source_type'] = 'local'
        credentialset_model_json['source_link'] = 'static'
        credentialset_model_json['user_state'] = user_state_model
        credentialset_model_json['auto_propagate_change'] = True
        credentialset_model_json['replica_enabled'] = True
        credentialset_model_json['replica_invalidation_frequency'] = 'hourly'
        credentialset_model_json['credential_id'] = 'testString'
        credentialset_model_json['account'] = 'testString'
        credentialset_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        credentialset_model_json['created_by'] = 'testString'
        credentialset_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        credentialset_model_json['updated_by'] = 'testString'
        credentialset_model_json['affected_resource_ids'] = ['testString']
        credentialset_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Credentialset by calling from_dict on the json representation
        credentialset_model = Credentialset.from_dict(credentialset_model_json)
        assert credentialset_model != False

        # Construct a model instance of Credentialset by calling from_dict on the json representation
        credentialset_model_dict = Credentialset.from_dict(credentialset_model_json).__dict__
        credentialset_model2 = Credentialset(**credentialset_model_dict)

        # Verify the model instances are equivalent
        assert credentialset_model == credentialset_model2

        # Convert model instance back to dict and verify no loss of data
        credentialset_model_json2 = credentialset_model.to_dict()
        assert credentialset_model_json2 == credentialset_model_json

class TestCredentialsetLite():
    """
    Test Class for CredentialsetLite
    """

    def test_credentialset_lite_serialization(self):
        """
        Test serialization/deserialization for CredentialsetLite
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a CredentialsetLite model
        credentialset_lite_model_json = {}
        credentialset_lite_model_json['name'] = 'testString'
        credentialset_lite_model_json['description'] = 'testString'
        credentialset_lite_model_json['credential_id'] = 'testString'
        credentialset_lite_model_json['resource_group'] = 'testString'
        credentialset_lite_model_json['location'] = 'us-south'
        credentialset_lite_model_json['tags'] = ['testString']
        credentialset_lite_model_json['source_type'] = 'local'
        credentialset_lite_model_json['user_state'] = user_state_model
        credentialset_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        credentialset_lite_model_json['created_by'] = 'testString'
        credentialset_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        credentialset_lite_model_json['updated_by'] = 'testString'
        credentialset_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of CredentialsetLite by calling from_dict on the json representation
        credentialset_lite_model = CredentialsetLite.from_dict(credentialset_lite_model_json)
        assert credentialset_lite_model != False

        # Construct a model instance of CredentialsetLite by calling from_dict on the json representation
        credentialset_lite_model_dict = CredentialsetLite.from_dict(credentialset_lite_model_json).__dict__
        credentialset_lite_model2 = CredentialsetLite(**credentialset_lite_model_dict)

        # Verify the model instances are equivalent
        assert credentialset_lite_model == credentialset_lite_model2

        # Convert model instance back to dict and verify no loss of data
        credentialset_lite_model_json2 = credentialset_lite_model.to_dict()
        assert credentialset_lite_model_json2 == credentialset_lite_model_json

class TestDataset():
    """
    Test Class for Dataset
    """

    def test_dataset_serialization(self):
        """
        Test serialization/deserialization for Dataset
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Dataset model
        dataset_model_json = {}
        dataset_model_json['name'] = 'testString'
        dataset_model_json['type'] = 'credential'
        dataset_model_json['description'] = 'testString'
        dataset_model_json['resource_group'] = 'testString'
        dataset_model_json['location'] = 'us-south'
        dataset_model_json['tags'] = ['testString']
        dataset_model_json['data'] = [variable_data_model]
        dataset_model_json['source'] = external_source_model
        dataset_model_json['source_type'] = 'local'
        dataset_model_json['source_link'] = 'static'
        dataset_model_json['source_readme_url'] = 'testString'
        dataset_model_json['user_state'] = user_state_model
        dataset_model_json['auto_propagate_change'] = True
        dataset_model_json['dataset_id'] = 'testString'
        dataset_model_json['account'] = 'testString'
        dataset_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        dataset_model_json['created_by'] = 'testString'
        dataset_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        dataset_model_json['updated_by'] = 'testString'
        dataset_model_json['affected_resource_ids'] = ['testString']
        dataset_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Dataset by calling from_dict on the json representation
        dataset_model = Dataset.from_dict(dataset_model_json)
        assert dataset_model != False

        # Construct a model instance of Dataset by calling from_dict on the json representation
        dataset_model_dict = Dataset.from_dict(dataset_model_json).__dict__
        dataset_model2 = Dataset(**dataset_model_dict)

        # Verify the model instances are equivalent
        assert dataset_model == dataset_model2

        # Convert model instance back to dict and verify no loss of data
        dataset_model_json2 = dataset_model.to_dict()
        assert dataset_model_json2 == dataset_model_json

class TestDatasetList():
    """
    Test Class for DatasetList
    """

    def test_dataset_list_serialization(self):
        """
        Test serialization/deserialization for DatasetList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        dataset_lite_model = {} # DatasetLite
        dataset_lite_model['name'] = 'testString'
        dataset_lite_model['dataset_id'] = 'testString'
        dataset_lite_model['type'] = 'credential'
        dataset_lite_model['description'] = 'testString'
        dataset_lite_model['resource_group'] = 'testString'
        dataset_lite_model['location'] = 'us-south'
        dataset_lite_model['tags'] = ['testString']
        dataset_lite_model['source_type'] = 'local'
        dataset_lite_model['user_state'] = user_state_model
        dataset_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        dataset_lite_model['created_by'] = 'testString'
        dataset_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        dataset_lite_model['updated_by'] = 'testString'
        dataset_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a DatasetList model
        dataset_list_model_json = {}
        dataset_list_model_json['total_count'] = 26
        dataset_list_model_json['limit'] = 26
        dataset_list_model_json['offset'] = 26
        dataset_list_model_json['datasets'] = [dataset_lite_model]
        dataset_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of DatasetList by calling from_dict on the json representation
        dataset_list_model = DatasetList.from_dict(dataset_list_model_json)
        assert dataset_list_model != False

        # Construct a model instance of DatasetList by calling from_dict on the json representation
        dataset_list_model_dict = DatasetList.from_dict(dataset_list_model_json).__dict__
        dataset_list_model2 = DatasetList(**dataset_list_model_dict)

        # Verify the model instances are equivalent
        assert dataset_list_model == dataset_list_model2

        # Convert model instance back to dict and verify no loss of data
        dataset_list_model_json2 = dataset_list_model.to_dict()
        assert dataset_list_model_json2 == dataset_list_model_json

class TestDatasetLite():
    """
    Test Class for DatasetLite
    """

    def test_dataset_lite_serialization(self):
        """
        Test serialization/deserialization for DatasetLite
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a DatasetLite model
        dataset_lite_model_json = {}
        dataset_lite_model_json['name'] = 'testString'
        dataset_lite_model_json['dataset_id'] = 'testString'
        dataset_lite_model_json['type'] = 'credential'
        dataset_lite_model_json['description'] = 'testString'
        dataset_lite_model_json['resource_group'] = 'testString'
        dataset_lite_model_json['location'] = 'us-south'
        dataset_lite_model_json['tags'] = ['testString']
        dataset_lite_model_json['source_type'] = 'local'
        dataset_lite_model_json['user_state'] = user_state_model
        dataset_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        dataset_lite_model_json['created_by'] = 'testString'
        dataset_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        dataset_lite_model_json['updated_by'] = 'testString'
        dataset_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of DatasetLite by calling from_dict on the json representation
        dataset_lite_model = DatasetLite.from_dict(dataset_lite_model_json)
        assert dataset_lite_model != False

        # Construct a model instance of DatasetLite by calling from_dict on the json representation
        dataset_lite_model_dict = DatasetLite.from_dict(dataset_lite_model_json).__dict__
        dataset_lite_model2 = DatasetLite(**dataset_lite_model_dict)

        # Verify the model instances are equivalent
        assert dataset_lite_model == dataset_lite_model2

        # Convert model instance back to dict and verify no loss of data
        dataset_lite_model_json2 = dataset_lite_model.to_dict()
        assert dataset_lite_model_json2 == dataset_lite_model_json

class TestDatasource():
    """
    Test Class for Datasource
    """

    def test_datasource_serialization(self):
        """
        Test serialization/deserialization for Datasource
        """

        # Construct a json representation of a Datasource model
        datasource_model_json = {}
        datasource_model_json['name'] = 'testString'
        datasource_model_json['description'] = 'testString'
        datasource_model_json['resource_group'] = 'testString'
        datasource_model_json['tags'] = ['testString']
        datasource_model_json['source_type'] = 'git'
        datasource_model_json['data_source'] = 'testString'
        datasource_model_json['connection'] = 'testString'
        datasource_model_json['replica_enabled'] = True
        datasource_model_json['replica_invalidation_frequency'] = 'hourly'
        datasource_model_json['id'] = 'testString'
        datasource_model_json['account'] = 'testString'
        datasource_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        datasource_model_json['created_by'] = 'testString'
        datasource_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        datasource_model_json['updated_by'] = 'testString'
        datasource_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Datasource by calling from_dict on the json representation
        datasource_model = Datasource.from_dict(datasource_model_json)
        assert datasource_model != False

        # Construct a model instance of Datasource by calling from_dict on the json representation
        datasource_model_dict = Datasource.from_dict(datasource_model_json).__dict__
        datasource_model2 = Datasource(**datasource_model_dict)

        # Verify the model instances are equivalent
        assert datasource_model == datasource_model2

        # Convert model instance back to dict and verify no loss of data
        datasource_model_json2 = datasource_model.to_dict()
        assert datasource_model_json2 == datasource_model_json

class TestDatasourceList():
    """
    Test Class for DatasourceList
    """

    def test_datasource_list_serialization(self):
        """
        Test serialization/deserialization for DatasourceList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        datasource_lite_model = {} # DatasourceLite
        datasource_lite_model['name'] = 'testString'
        datasource_lite_model['description'] = 'testString'
        datasource_lite_model['resource_group'] = 'testString'
        datasource_lite_model['tags'] = ['testString']
        datasource_lite_model['data_source'] = 'testString'
        datasource_lite_model['connection'] = 'testString'
        datasource_lite_model['id'] = 'testString'
        datasource_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        datasource_lite_model['created_by'] = 'testString'
        datasource_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        datasource_lite_model['updated_by'] = 'testString'
        datasource_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a DatasourceList model
        datasource_list_model_json = {}
        datasource_list_model_json['total_count'] = 26
        datasource_list_model_json['limit'] = 26
        datasource_list_model_json['offset'] = 26
        datasource_list_model_json['datasources'] = [datasource_lite_model]
        datasource_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of DatasourceList by calling from_dict on the json representation
        datasource_list_model = DatasourceList.from_dict(datasource_list_model_json)
        assert datasource_list_model != False

        # Construct a model instance of DatasourceList by calling from_dict on the json representation
        datasource_list_model_dict = DatasourceList.from_dict(datasource_list_model_json).__dict__
        datasource_list_model2 = DatasourceList(**datasource_list_model_dict)

        # Verify the model instances are equivalent
        assert datasource_list_model == datasource_list_model2

        # Convert model instance back to dict and verify no loss of data
        datasource_list_model_json2 = datasource_list_model.to_dict()
        assert datasource_list_model_json2 == datasource_list_model_json

class TestDatasourceLite():
    """
    Test Class for DatasourceLite
    """

    def test_datasource_lite_serialization(self):
        """
        Test serialization/deserialization for DatasourceLite
        """

        # Construct a json representation of a DatasourceLite model
        datasource_lite_model_json = {}
        datasource_lite_model_json['name'] = 'testString'
        datasource_lite_model_json['description'] = 'testString'
        datasource_lite_model_json['resource_group'] = 'testString'
        datasource_lite_model_json['tags'] = ['testString']
        datasource_lite_model_json['data_source'] = 'testString'
        datasource_lite_model_json['connection'] = 'testString'
        datasource_lite_model_json['id'] = 'testString'
        datasource_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        datasource_lite_model_json['created_by'] = 'testString'
        datasource_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        datasource_lite_model_json['updated_by'] = 'testString'
        datasource_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of DatasourceLite by calling from_dict on the json representation
        datasource_lite_model = DatasourceLite.from_dict(datasource_lite_model_json)
        assert datasource_lite_model != False

        # Construct a model instance of DatasourceLite by calling from_dict on the json representation
        datasource_lite_model_dict = DatasourceLite.from_dict(datasource_lite_model_json).__dict__
        datasource_lite_model2 = DatasourceLite(**datasource_lite_model_dict)

        # Verify the model instances are equivalent
        assert datasource_lite_model == datasource_lite_model2

        # Convert model instance back to dict and verify no loss of data
        datasource_lite_model_json2 = datasource_lite_model.to_dict()
        assert datasource_lite_model_json2 == datasource_lite_model_json

class TestEnvironment():
    """
    Test Class for Environment
    """

    def test_environment_serialization(self):
        """
        Test serialization/deserialization for Environment
        """

        # Construct dict forms of any model objects needed in order to build this model.

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        blueprint_variable_data_model = {} # BlueprintVariableData
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['link'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        work_item_last_job_model = {} # WorkItemLastJob
        work_item_last_job_model['command_object'] = 'workspace'
        work_item_last_job_model['command_object_name'] = 'testString'
        work_item_last_job_model['command_object_id'] = 'testString'
        work_item_last_job_model['command_name'] = 'workspace_plan'
        work_item_last_job_model['job_status'] = 'job_pending'
        work_item_last_job_model['foo'] = { 'foo': 'bar' }

        work_item_model = {} # WorkItem
        work_item_model['workitem_object_id'] = 'testString'
        work_item_model['workitem_object_type'] = 'workspace'
        work_item_model['name'] = 'testString'
        work_item_model['layer'] = 'testString'
        work_item_model['source'] = external_source_model
        work_item_model['tags'] = 'testString'
        work_item_model['inputs'] = [blueprint_variable_data_model]
        work_item_model['outputs'] = [blueprint_variable_data_model]
        work_item_model['settings'] = [blueprint_variable_data_model]
        work_item_model['last_job'] = work_item_last_job_model
        work_item_model['foo'] = { 'foo': 'bar' }

        flow_operations_model = {} # FlowOperations
        flow_operations_model['install'] = 'testString'
        flow_operations_model['update'] = 'testString'
        flow_operations_model['uninstall'] = 'testString'
        flow_operations_model['configure'] = 'testString'
        flow_operations_model['foo'] = { 'foo': 'bar' }

        flow_model = {} # Flow
        flow_model['type'] = 'testString'
        flow_model['operations'] = [flow_operations_model]
        flow_model['foo'] = { 'foo': 'bar' }

        blueprint_model = {} # Blueprint
        blueprint_model['name'] = 'testString'
        blueprint_model['description'] = 'testString'
        blueprint_model['source'] = external_source_model
        blueprint_model['inputs'] = [variable_data_model]
        blueprint_model['outputs'] = [variable_data_model]
        blueprint_model['settings'] = [variable_data_model]
        blueprint_model['workitems'] = [work_item_model]
        blueprint_model['flow'] = flow_model
        blueprint_model['foo'] = { 'foo': 'bar' }

        config_item_model = {} # ConfigItem
        config_item_model['name'] = 'testString'
        config_item_model['description'] = 'testString'
        config_item_model['source'] = external_source_model
        config_item_model['inputs'] = [blueprint_variable_data_model]
        config_item_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        environment_user_state_model = {} # EnvironmentUserState
        environment_user_state_model['state'] = 'Environment_Create_Init'
        environment_user_state_model['set_by'] = 'testString'
        environment_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model['foo'] = { 'foo': 'bar' }

        environment_state_model = {} # EnvironmentState
        environment_state_model['status_code'] = 'normal'
        environment_state_model['status_message'] = 'testString'
        environment_state_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Environment model
        environment_model_json = {}
        environment_model_json['name'] = 'Toronto Dev Environtment'
        environment_model_json['schema_version'] = '1.0'
        environment_model_json['source'] = external_source_model
        environment_model_json['description'] = 'Deploys dev environtment instance in Toronto Region'
        environment_model_json['resource_group'] = 'Default'
        environment_model_json['tags'] = ['testString']
        environment_model_json['location'] = 'us-south'
        environment_model_json['blueprint'] = blueprint_model
        environment_model_json['config'] = [config_item_model]
        environment_model_json['inputs'] = [variable_data_model]
        environment_model_json['settings'] = [variable_data_model]
        environment_model_json['outputs'] = [variable_data_model]
        environment_model_json['environment_id'] = 'testString'
        environment_model_json['crn'] = 'testString'
        environment_model_json['account'] = 'testString'
        environment_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        environment_model_json['created_by'] = 'testString'
        environment_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        environment_model_json['updated_by'] = 'testString'
        environment_model_json['sys_lock'] = system_lock_model
        environment_model_json['user_state'] = environment_user_state_model
        environment_model_json['state'] = environment_state_model
        environment_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Environment by calling from_dict on the json representation
        environment_model = Environment.from_dict(environment_model_json)
        assert environment_model != False

        # Construct a model instance of Environment by calling from_dict on the json representation
        environment_model_dict = Environment.from_dict(environment_model_json).__dict__
        environment_model2 = Environment(**environment_model_dict)

        # Verify the model instances are equivalent
        assert environment_model == environment_model2

        # Convert model instance back to dict and verify no loss of data
        environment_model_json2 = environment_model.to_dict()
        assert environment_model_json2 == environment_model_json

class TestEnvironmentCatalogOfferingItem():
    """
    Test Class for EnvironmentCatalogOfferingItem
    """

    def test_environment_catalog_offering_item_serialization(self):
        """
        Test serialization/deserialization for EnvironmentCatalogOfferingItem
        """

        # Construct dict forms of any model objects needed in order to build this model.

        environment_catalog_offering_item_versions_model = {} # EnvironmentCatalogOfferingItemVersions
        environment_catalog_offering_item_versions_model['version'] = 'testString'
        environment_catalog_offering_item_versions_model['versionid'] = 'testString'
        environment_catalog_offering_item_versions_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a EnvironmentCatalogOfferingItem model
        environment_catalog_offering_item_model_json = {}
        environment_catalog_offering_item_model_json['name'] = 'Schematics'
        environment_catalog_offering_item_model_json['label'] = 'Schematics'
        environment_catalog_offering_item_model_json['offering_id'] = 'testString'
        environment_catalog_offering_item_model_json['short_description'] = 'testString'
        environment_catalog_offering_item_model_json['crn'] = 'testString'
        environment_catalog_offering_item_model_json['offering_url'] = 'testString'
        environment_catalog_offering_item_model_json['versions'] = [environment_catalog_offering_item_versions_model]
        environment_catalog_offering_item_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of EnvironmentCatalogOfferingItem by calling from_dict on the json representation
        environment_catalog_offering_item_model = EnvironmentCatalogOfferingItem.from_dict(environment_catalog_offering_item_model_json)
        assert environment_catalog_offering_item_model != False

        # Construct a model instance of EnvironmentCatalogOfferingItem by calling from_dict on the json representation
        environment_catalog_offering_item_model_dict = EnvironmentCatalogOfferingItem.from_dict(environment_catalog_offering_item_model_json).__dict__
        environment_catalog_offering_item_model2 = EnvironmentCatalogOfferingItem(**environment_catalog_offering_item_model_dict)

        # Verify the model instances are equivalent
        assert environment_catalog_offering_item_model == environment_catalog_offering_item_model2

        # Convert model instance back to dict and verify no loss of data
        environment_catalog_offering_item_model_json2 = environment_catalog_offering_item_model.to_dict()
        assert environment_catalog_offering_item_model_json2 == environment_catalog_offering_item_model_json

class TestEnvironmentCatalogOfferingItemVersions():
    """
    Test Class for EnvironmentCatalogOfferingItemVersions
    """

    def test_environment_catalog_offering_item_versions_serialization(self):
        """
        Test serialization/deserialization for EnvironmentCatalogOfferingItemVersions
        """

        # Construct a json representation of a EnvironmentCatalogOfferingItemVersions model
        environment_catalog_offering_item_versions_model_json = {}
        environment_catalog_offering_item_versions_model_json['version'] = 'testString'
        environment_catalog_offering_item_versions_model_json['versionid'] = 'testString'
        environment_catalog_offering_item_versions_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of EnvironmentCatalogOfferingItemVersions by calling from_dict on the json representation
        environment_catalog_offering_item_versions_model = EnvironmentCatalogOfferingItemVersions.from_dict(environment_catalog_offering_item_versions_model_json)
        assert environment_catalog_offering_item_versions_model != False

        # Construct a model instance of EnvironmentCatalogOfferingItemVersions by calling from_dict on the json representation
        environment_catalog_offering_item_versions_model_dict = EnvironmentCatalogOfferingItemVersions.from_dict(environment_catalog_offering_item_versions_model_json).__dict__
        environment_catalog_offering_item_versions_model2 = EnvironmentCatalogOfferingItemVersions(**environment_catalog_offering_item_versions_model_dict)

        # Verify the model instances are equivalent
        assert environment_catalog_offering_item_versions_model == environment_catalog_offering_item_versions_model2

        # Convert model instance back to dict and verify no loss of data
        environment_catalog_offering_item_versions_model_json2 = environment_catalog_offering_item_versions_model.to_dict()
        assert environment_catalog_offering_item_versions_model_json2 == environment_catalog_offering_item_versions_model_json

class TestEnvironmentList():
    """
    Test Class for EnvironmentList
    """

    def test_environment_list_serialization(self):
        """
        Test serialization/deserialization for EnvironmentList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        environment_user_state_model = {} # EnvironmentUserState
        environment_user_state_model['state'] = 'Environment_Create_Init'
        environment_user_state_model['set_by'] = 'testString'
        environment_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model['foo'] = { 'foo': 'bar' }

        environment_state_model = {} # EnvironmentState
        environment_state_model['status_code'] = 'normal'
        environment_state_model['status_message'] = 'testString'
        environment_state_model['foo'] = { 'foo': 'bar' }

        environment_lite_model = {} # EnvironmentLite
        environment_lite_model['name'] = 'MySatelliteLocation'
        environment_lite_model['description'] = 'Creates satellite location in AWS'
        environment_lite_model['resource_group'] = 'testString'
        environment_lite_model['tags'] = ['testString']
        environment_lite_model['location'] = 'us-south'
        environment_lite_model['id'] = 'testString'
        environment_lite_model['crn'] = 'testString'
        environment_lite_model['account'] = 'testString'
        environment_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        environment_lite_model['created_by'] = 'testString'
        environment_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        environment_lite_model['updated_by'] = 'testString'
        environment_lite_model['sys_lock'] = system_lock_model
        environment_lite_model['user_state'] = environment_user_state_model
        environment_lite_model['state'] = environment_state_model
        environment_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a EnvironmentList model
        environment_list_model_json = {}
        environment_list_model_json['total_count'] = 26
        environment_list_model_json['limit'] = 26
        environment_list_model_json['offset'] = 26
        environment_list_model_json['environments'] = [environment_lite_model]
        environment_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of EnvironmentList by calling from_dict on the json representation
        environment_list_model = EnvironmentList.from_dict(environment_list_model_json)
        assert environment_list_model != False

        # Construct a model instance of EnvironmentList by calling from_dict on the json representation
        environment_list_model_dict = EnvironmentList.from_dict(environment_list_model_json).__dict__
        environment_list_model2 = EnvironmentList(**environment_list_model_dict)

        # Verify the model instances are equivalent
        assert environment_list_model == environment_list_model2

        # Convert model instance back to dict and verify no loss of data
        environment_list_model_json2 = environment_list_model.to_dict()
        assert environment_list_model_json2 == environment_list_model_json

class TestEnvironmentLite():
    """
    Test Class for EnvironmentLite
    """

    def test_environment_lite_serialization(self):
        """
        Test serialization/deserialization for EnvironmentLite
        """

        # Construct dict forms of any model objects needed in order to build this model.

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        environment_user_state_model = {} # EnvironmentUserState
        environment_user_state_model['state'] = 'Environment_Create_Init'
        environment_user_state_model['set_by'] = 'testString'
        environment_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model['foo'] = { 'foo': 'bar' }

        environment_state_model = {} # EnvironmentState
        environment_state_model['status_code'] = 'normal'
        environment_state_model['status_message'] = 'testString'
        environment_state_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a EnvironmentLite model
        environment_lite_model_json = {}
        environment_lite_model_json['name'] = 'MySatelliteLocation'
        environment_lite_model_json['description'] = 'Creates satellite location in AWS'
        environment_lite_model_json['resource_group'] = 'testString'
        environment_lite_model_json['tags'] = ['testString']
        environment_lite_model_json['location'] = 'us-south'
        environment_lite_model_json['id'] = 'testString'
        environment_lite_model_json['crn'] = 'testString'
        environment_lite_model_json['account'] = 'testString'
        environment_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        environment_lite_model_json['created_by'] = 'testString'
        environment_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        environment_lite_model_json['updated_by'] = 'testString'
        environment_lite_model_json['sys_lock'] = system_lock_model
        environment_lite_model_json['user_state'] = environment_user_state_model
        environment_lite_model_json['state'] = environment_state_model
        environment_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of EnvironmentLite by calling from_dict on the json representation
        environment_lite_model = EnvironmentLite.from_dict(environment_lite_model_json)
        assert environment_lite_model != False

        # Construct a model instance of EnvironmentLite by calling from_dict on the json representation
        environment_lite_model_dict = EnvironmentLite.from_dict(environment_lite_model_json).__dict__
        environment_lite_model2 = EnvironmentLite(**environment_lite_model_dict)

        # Verify the model instances are equivalent
        assert environment_lite_model == environment_lite_model2

        # Convert model instance back to dict and verify no loss of data
        environment_lite_model_json2 = environment_lite_model.to_dict()
        assert environment_lite_model_json2 == environment_lite_model_json

class TestEnvironmentUserState():
    """
    Test Class for EnvironmentUserState
    """

    def test_environment_user_state_serialization(self):
        """
        Test serialization/deserialization for EnvironmentUserState
        """

        # Construct a json representation of a EnvironmentUserState model
        environment_user_state_model_json = {}
        environment_user_state_model_json['state'] = 'Environment_Create_Init'
        environment_user_state_model_json['set_by'] = 'testString'
        environment_user_state_model_json['set_at'] = '2020-01-28T18:40:40.123456Z'
        environment_user_state_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of EnvironmentUserState by calling from_dict on the json representation
        environment_user_state_model = EnvironmentUserState.from_dict(environment_user_state_model_json)
        assert environment_user_state_model != False

        # Construct a model instance of EnvironmentUserState by calling from_dict on the json representation
        environment_user_state_model_dict = EnvironmentUserState.from_dict(environment_user_state_model_json).__dict__
        environment_user_state_model2 = EnvironmentUserState(**environment_user_state_model_dict)

        # Verify the model instances are equivalent
        assert environment_user_state_model == environment_user_state_model2

        # Convert model instance back to dict and verify no loss of data
        environment_user_state_model_json2 = environment_user_state_model.to_dict()
        assert environment_user_state_model_json2 == environment_user_state_model_json

class TestEnvironmentState():
    """
    Test Class for EnvironmentState
    """

    def test_environment_state_serialization(self):
        """
        Test serialization/deserialization for EnvironmentState
        """

        # Construct a json representation of a EnvironmentState model
        environment_state_model_json = {}
        environment_state_model_json['status_code'] = 'normal'
        environment_state_model_json['status_message'] = 'testString'
        environment_state_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of EnvironmentState by calling from_dict on the json representation
        environment_state_model = EnvironmentState.from_dict(environment_state_model_json)
        assert environment_state_model != False

        # Construct a model instance of EnvironmentState by calling from_dict on the json representation
        environment_state_model_dict = EnvironmentState.from_dict(environment_state_model_json).__dict__
        environment_state_model2 = EnvironmentState(**environment_state_model_dict)

        # Verify the model instances are equivalent
        assert environment_state_model == environment_state_model2

        # Convert model instance back to dict and verify no loss of data
        environment_state_model_json2 = environment_state_model.to_dict()
        assert environment_state_model_json2 == environment_state_model_json

class TestExternalSource():
    """
    Test Class for ExternalSource
    """

    def test_external_source_serialization(self):
        """
        Test serialization/deserialization for ExternalSource
        """

        # Construct dict forms of any model objects needed in order to build this model.

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ExternalSource model
        external_source_model_json = {}
        external_source_model_json['source_type'] = 'local'
        external_source_model_json['git'] = external_source_git_model
        external_source_model_json['catalog'] = external_source_catalog_model
        external_source_model_json['cos_bucket'] = external_source_cos_bucket_model
        external_source_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ExternalSource by calling from_dict on the json representation
        external_source_model = ExternalSource.from_dict(external_source_model_json)
        assert external_source_model != False

        # Construct a model instance of ExternalSource by calling from_dict on the json representation
        external_source_model_dict = ExternalSource.from_dict(external_source_model_json).__dict__
        external_source_model2 = ExternalSource(**external_source_model_dict)

        # Verify the model instances are equivalent
        assert external_source_model == external_source_model2

        # Convert model instance back to dict and verify no loss of data
        external_source_model_json2 = external_source_model.to_dict()
        assert external_source_model_json2 == external_source_model_json

class TestExternalSourceCatalog():
    """
    Test Class for ExternalSourceCatalog
    """

    def test_external_source_catalog_serialization(self):
        """
        Test serialization/deserialization for ExternalSourceCatalog
        """

        # Construct a json representation of a ExternalSourceCatalog model
        external_source_catalog_model_json = {}
        external_source_catalog_model_json['catalog_name'] = 'testString'
        external_source_catalog_model_json['offering_name'] = 'testString'
        external_source_catalog_model_json['offering_version'] = 'testString'
        external_source_catalog_model_json['offering_kind'] = 'testString'
        external_source_catalog_model_json['offering_id'] = 'testString'
        external_source_catalog_model_json['offering_version_id'] = 'testString'
        external_source_catalog_model_json['offering_repo_url'] = 'testString'
        external_source_catalog_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ExternalSourceCatalog by calling from_dict on the json representation
        external_source_catalog_model = ExternalSourceCatalog.from_dict(external_source_catalog_model_json)
        assert external_source_catalog_model != False

        # Construct a model instance of ExternalSourceCatalog by calling from_dict on the json representation
        external_source_catalog_model_dict = ExternalSourceCatalog.from_dict(external_source_catalog_model_json).__dict__
        external_source_catalog_model2 = ExternalSourceCatalog(**external_source_catalog_model_dict)

        # Verify the model instances are equivalent
        assert external_source_catalog_model == external_source_catalog_model2

        # Convert model instance back to dict and verify no loss of data
        external_source_catalog_model_json2 = external_source_catalog_model.to_dict()
        assert external_source_catalog_model_json2 == external_source_catalog_model_json

class TestExternalSourceCosBucket():
    """
    Test Class for ExternalSourceCosBucket
    """

    def test_external_source_cos_bucket_serialization(self):
        """
        Test serialization/deserialization for ExternalSourceCosBucket
        """

        # Construct a json representation of a ExternalSourceCosBucket model
        external_source_cos_bucket_model_json = {}
        external_source_cos_bucket_model_json['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ExternalSourceCosBucket by calling from_dict on the json representation
        external_source_cos_bucket_model = ExternalSourceCosBucket.from_dict(external_source_cos_bucket_model_json)
        assert external_source_cos_bucket_model != False

        # Construct a model instance of ExternalSourceCosBucket by calling from_dict on the json representation
        external_source_cos_bucket_model_dict = ExternalSourceCosBucket.from_dict(external_source_cos_bucket_model_json).__dict__
        external_source_cos_bucket_model2 = ExternalSourceCosBucket(**external_source_cos_bucket_model_dict)

        # Verify the model instances are equivalent
        assert external_source_cos_bucket_model == external_source_cos_bucket_model2

        # Convert model instance back to dict and verify no loss of data
        external_source_cos_bucket_model_json2 = external_source_cos_bucket_model.to_dict()
        assert external_source_cos_bucket_model_json2 == external_source_cos_bucket_model_json

class TestExternalSourceGit():
    """
    Test Class for ExternalSourceGit
    """

    def test_external_source_git_serialization(self):
        """
        Test serialization/deserialization for ExternalSourceGit
        """

        # Construct a json representation of a ExternalSourceGit model
        external_source_git_model_json = {}
        external_source_git_model_json['computed_git_repo_url'] = 'testString'
        external_source_git_model_json['git_repo_url'] = 'testString'
        external_source_git_model_json['git_token'] = 'testString'
        external_source_git_model_json['git_repo_folder'] = 'testString'
        external_source_git_model_json['git_release'] = 'testString'
        external_source_git_model_json['git_branch'] = 'testString'
        external_source_git_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ExternalSourceGit by calling from_dict on the json representation
        external_source_git_model = ExternalSourceGit.from_dict(external_source_git_model_json)
        assert external_source_git_model != False

        # Construct a model instance of ExternalSourceGit by calling from_dict on the json representation
        external_source_git_model_dict = ExternalSourceGit.from_dict(external_source_git_model_json).__dict__
        external_source_git_model2 = ExternalSourceGit(**external_source_git_model_dict)

        # Verify the model instances are equivalent
        assert external_source_git_model == external_source_git_model2

        # Convert model instance back to dict and verify no loss of data
        external_source_git_model_json2 = external_source_git_model.to_dict()
        assert external_source_git_model_json2 == external_source_git_model_json

class TestFlow():
    """
    Test Class for Flow
    """

    def test_flow_serialization(self):
        """
        Test serialization/deserialization for Flow
        """

        # Construct dict forms of any model objects needed in order to build this model.

        flow_operations_model = {} # FlowOperations
        flow_operations_model['install'] = 'testString'
        flow_operations_model['update'] = 'testString'
        flow_operations_model['uninstall'] = 'testString'
        flow_operations_model['configure'] = 'testString'
        flow_operations_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Flow model
        flow_model_json = {}
        flow_model_json['type'] = 'testString'
        flow_model_json['operations'] = [flow_operations_model]
        flow_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Flow by calling from_dict on the json representation
        flow_model = Flow.from_dict(flow_model_json)
        assert flow_model != False

        # Construct a model instance of Flow by calling from_dict on the json representation
        flow_model_dict = Flow.from_dict(flow_model_json).__dict__
        flow_model2 = Flow(**flow_model_dict)

        # Verify the model instances are equivalent
        assert flow_model == flow_model2

        # Convert model instance back to dict and verify no loss of data
        flow_model_json2 = flow_model.to_dict()
        assert flow_model_json2 == flow_model_json

class TestFlowOperations():
    """
    Test Class for FlowOperations
    """

    def test_flow_operations_serialization(self):
        """
        Test serialization/deserialization for FlowOperations
        """

        # Construct a json representation of a FlowOperations model
        flow_operations_model_json = {}
        flow_operations_model_json['install'] = 'testString'
        flow_operations_model_json['update'] = 'testString'
        flow_operations_model_json['uninstall'] = 'testString'
        flow_operations_model_json['configure'] = 'testString'
        flow_operations_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of FlowOperations by calling from_dict on the json representation
        flow_operations_model = FlowOperations.from_dict(flow_operations_model_json)
        assert flow_operations_model != False

        # Construct a model instance of FlowOperations by calling from_dict on the json representation
        flow_operations_model_dict = FlowOperations.from_dict(flow_operations_model_json).__dict__
        flow_operations_model2 = FlowOperations(**flow_operations_model_dict)

        # Verify the model instances are equivalent
        assert flow_operations_model == flow_operations_model2

        # Convert model instance back to dict and verify no loss of data
        flow_operations_model_json2 = flow_operations_model.to_dict()
        assert flow_operations_model_json2 == flow_operations_model_json

class TestInputVariableDataList():
    """
    Test Class for InputVariableDataList
    """

    def test_input_variable_data_list_serialization(self):
        """
        Test serialization/deserialization for InputVariableDataList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a InputVariableDataList model
        input_variable_data_list_model_json = {}
        input_variable_data_list_model_json['total_count'] = 26
        input_variable_data_list_model_json['limit'] = 26
        input_variable_data_list_model_json['offset'] = 26
        input_variable_data_list_model_json['inputs'] = [variable_data_model]
        input_variable_data_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of InputVariableDataList by calling from_dict on the json representation
        input_variable_data_list_model = InputVariableDataList.from_dict(input_variable_data_list_model_json)
        assert input_variable_data_list_model != False

        # Construct a model instance of InputVariableDataList by calling from_dict on the json representation
        input_variable_data_list_model_dict = InputVariableDataList.from_dict(input_variable_data_list_model_json).__dict__
        input_variable_data_list_model2 = InputVariableDataList(**input_variable_data_list_model_dict)

        # Verify the model instances are equivalent
        assert input_variable_data_list_model == input_variable_data_list_model2

        # Convert model instance back to dict and verify no loss of data
        input_variable_data_list_model_json2 = input_variable_data_list_model.to_dict()
        assert input_variable_data_list_model_json2 == input_variable_data_list_model_json

class TestInventoryResourceDefinition():
    """
    Test Class for InventoryResourceDefinition
    """

    def test_inventory_resource_definition_serialization(self):
        """
        Test serialization/deserialization for InventoryResourceDefinition
        """

        # Construct a json representation of a InventoryResourceDefinition model
        inventory_resource_definition_model_json = {}
        inventory_resource_definition_model_json['name'] = 'testString'
        inventory_resource_definition_model_json['description'] = 'testString'
        inventory_resource_definition_model_json['location'] = 'us-south'
        inventory_resource_definition_model_json['resource_group'] = 'testString'
        inventory_resource_definition_model_json['inventories_ini'] = 'testString'
        inventory_resource_definition_model_json['resource_queries'] = ['testString']
        inventory_resource_definition_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of InventoryResourceDefinition by calling from_dict on the json representation
        inventory_resource_definition_model = InventoryResourceDefinition.from_dict(inventory_resource_definition_model_json)
        assert inventory_resource_definition_model != False

        # Construct a model instance of InventoryResourceDefinition by calling from_dict on the json representation
        inventory_resource_definition_model_dict = InventoryResourceDefinition.from_dict(inventory_resource_definition_model_json).__dict__
        inventory_resource_definition_model2 = InventoryResourceDefinition(**inventory_resource_definition_model_dict)

        # Verify the model instances are equivalent
        assert inventory_resource_definition_model == inventory_resource_definition_model2

        # Convert model instance back to dict and verify no loss of data
        inventory_resource_definition_model_json2 = inventory_resource_definition_model.to_dict()
        assert inventory_resource_definition_model_json2 == inventory_resource_definition_model_json

class TestInventoryResourceRecord():
    """
    Test Class for InventoryResourceRecord
    """

    def test_inventory_resource_record_serialization(self):
        """
        Test serialization/deserialization for InventoryResourceRecord
        """

        # Construct a json representation of a InventoryResourceRecord model
        inventory_resource_record_model_json = {}
        inventory_resource_record_model_json['name'] = 'testString'
        inventory_resource_record_model_json['id'] = 'testString'
        inventory_resource_record_model_json['description'] = 'testString'
        inventory_resource_record_model_json['location'] = 'us-south'
        inventory_resource_record_model_json['resource_group'] = 'testString'
        inventory_resource_record_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model_json['created_by'] = 'testString'
        inventory_resource_record_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model_json['updated_by'] = 'testString'
        inventory_resource_record_model_json['inventories_ini'] = 'testString'
        inventory_resource_record_model_json['resource_queries'] = ['testString']
        inventory_resource_record_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of InventoryResourceRecord by calling from_dict on the json representation
        inventory_resource_record_model = InventoryResourceRecord.from_dict(inventory_resource_record_model_json)
        assert inventory_resource_record_model != False

        # Construct a model instance of InventoryResourceRecord by calling from_dict on the json representation
        inventory_resource_record_model_dict = InventoryResourceRecord.from_dict(inventory_resource_record_model_json).__dict__
        inventory_resource_record_model2 = InventoryResourceRecord(**inventory_resource_record_model_dict)

        # Verify the model instances are equivalent
        assert inventory_resource_record_model == inventory_resource_record_model2

        # Convert model instance back to dict and verify no loss of data
        inventory_resource_record_model_json2 = inventory_resource_record_model.to_dict()
        assert inventory_resource_record_model_json2 == inventory_resource_record_model_json

class TestInventoryResourceRecordList():
    """
    Test Class for InventoryResourceRecordList
    """

    def test_inventory_resource_record_list_serialization(self):
        """
        Test serialization/deserialization for InventoryResourceRecordList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        inventory_resource_record_model = {} # InventoryResourceRecord
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['id'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['created_by'] = 'testString'
        inventory_resource_record_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['updated_by'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a InventoryResourceRecordList model
        inventory_resource_record_list_model_json = {}
        inventory_resource_record_list_model_json['total_count'] = 26
        inventory_resource_record_list_model_json['limit'] = 26
        inventory_resource_record_list_model_json['offset'] = 26
        inventory_resource_record_list_model_json['inventories'] = [inventory_resource_record_model]
        inventory_resource_record_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of InventoryResourceRecordList by calling from_dict on the json representation
        inventory_resource_record_list_model = InventoryResourceRecordList.from_dict(inventory_resource_record_list_model_json)
        assert inventory_resource_record_list_model != False

        # Construct a model instance of InventoryResourceRecordList by calling from_dict on the json representation
        inventory_resource_record_list_model_dict = InventoryResourceRecordList.from_dict(inventory_resource_record_list_model_json).__dict__
        inventory_resource_record_list_model2 = InventoryResourceRecordList(**inventory_resource_record_list_model_dict)

        # Verify the model instances are equivalent
        assert inventory_resource_record_list_model == inventory_resource_record_list_model2

        # Convert model instance back to dict and verify no loss of data
        inventory_resource_record_list_model_json2 = inventory_resource_record_list_model.to_dict()
        assert inventory_resource_record_list_model_json2 == inventory_resource_record_list_model_json

class TestItemMetadata():
    """
    Test Class for ItemMetadata
    """

    def test_item_metadata_serialization(self):
        """
        Test serialization/deserialization for ItemMetadata
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ItemMetadata model
        item_metadata_model_json = {}
        item_metadata_model_json['item_id'] = 'testString'
        item_metadata_model_json['offering_id'] = 'testString'
        item_metadata_model_json['offering_kind_id'] = 'testString'
        item_metadata_model_json['offering_version_id'] = 'testString'
        item_metadata_model_json['name'] = 'AWS Satellite'
        item_metadata_model_json['description'] = 'Create satellite location in AWS'
        item_metadata_model_json['operations'] = ['install']
        item_metadata_model_json['inputs'] = [variable_data_model]
        item_metadata_model_json['settings'] = [variable_data_model]
        item_metadata_model_json['outputs'] = [variable_data_model]
        item_metadata_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ItemMetadata by calling from_dict on the json representation
        item_metadata_model = ItemMetadata.from_dict(item_metadata_model_json)
        assert item_metadata_model != False

        # Construct a model instance of ItemMetadata by calling from_dict on the json representation
        item_metadata_model_dict = ItemMetadata.from_dict(item_metadata_model_json).__dict__
        item_metadata_model2 = ItemMetadata(**item_metadata_model_dict)

        # Verify the model instances are equivalent
        assert item_metadata_model == item_metadata_model2

        # Convert model instance back to dict and verify no loss of data
        item_metadata_model_json2 = item_metadata_model.to_dict()
        assert item_metadata_model_json2 == item_metadata_model_json

class TestItemSKU():
    """
    Test Class for ItemSKU
    """

    def test_item_sku_serialization(self):
        """
        Test serialization/deserialization for ItemSKU
        """

        # Construct dict forms of any model objects needed in order to build this model.

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        sku_user_state_model = {} # SKUUserState
        sku_user_state_model['state'] = 'testString'
        sku_user_state_model['set_by'] = 'testString'
        sku_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        sku_user_state_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ItemSKU model
        item_sku_model_json = {}
        item_sku_model_json['sku_id'] = 'testString'
        item_sku_model_json['sku_type'] = 'testString'
        item_sku_model_json['sku_sys_lock'] = system_lock_model
        item_sku_model_json['sku_user_state'] = sku_user_state_model
        item_sku_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ItemSKU by calling from_dict on the json representation
        item_sku_model = ItemSKU.from_dict(item_sku_model_json)
        assert item_sku_model != False

        # Construct a model instance of ItemSKU by calling from_dict on the json representation
        item_sku_model_dict = ItemSKU.from_dict(item_sku_model_json).__dict__
        item_sku_model2 = ItemSKU(**item_sku_model_dict)

        # Verify the model instances are equivalent
        assert item_sku_model == item_sku_model2

        # Convert model instance back to dict and verify no loss of data
        item_sku_model_json2 = item_sku_model.to_dict()
        assert item_sku_model_json2 == item_sku_model_json

class TestJob():
    """
    Test Class for Job
    """

    def test_job_serialization(self):
        """
        Test serialization/deserialization for Job
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        job_status_workitem_model = {} # JobStatusWorkitem
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        job_status_flow_model = {} # JobStatusFlow
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_model = {} # JobStatusWorkspace
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        job_status_action_model = {} # JobStatusAction
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        job_status_schematics_resources_model = {} # JobStatusSchematicsResources
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        job_status_system_model = {} # JobStatusSystem
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        job_status_model = {} # JobStatus
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        job_data_template_model = {} # JobDataTemplate
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        job_data_workspace_model = {} # JobDataWorkspace
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        inventory_resource_record_model = {} # InventoryResourceRecord
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['id'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['created_by'] = 'testString'
        inventory_resource_record_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['updated_by'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        job_data_action_model = {} # JobDataAction
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        job_data_system_model = {} # JobDataSystem
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_last_job_model = {} # JobDataWorkItemLastJob
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_model = {} # JobDataWorkItem
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        job_data_flow_model = {} # JobDataFlow
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        job_data_model = {} # JobData
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        bastion_resource_definition_model = {} # BastionResourceDefinition
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        job_log_summary_log_errors_model = {} # JobLogSummaryLogErrors
        job_log_summary_log_errors_model['error_code'] = 'testString'
        job_log_summary_log_errors_model['error_msg'] = 'testString'
        job_log_summary_log_errors_model['error_count'] = 72.5
        job_log_summary_log_errors_model['foo'] = { 'foo': 'bar' }

        job_log_summary_repo_download_job_model = {} # JobLogSummaryRepoDownloadJob
        job_log_summary_repo_download_job_model['scanned_file_count'] = 72.5
        job_log_summary_repo_download_job_model['quarantined_file_count'] = 72.5
        job_log_summary_repo_download_job_model['detected_filetype'] = 'testString'
        job_log_summary_repo_download_job_model['inputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['outputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workspace_job_model = {} # JobLogSummaryWorkspaceJob
        job_log_summary_workspace_job_model['resources_add'] = 72.5
        job_log_summary_workspace_job_model['resources_modify'] = 72.5
        job_log_summary_workspace_job_model['resources_destroy'] = 72.5
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workitems_model = {} # JobLogSummaryWorkitems
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['resources_add'] = 72.5
        job_log_summary_workitems_model['resources_modify'] = 72.5
        job_log_summary_workitems_model['resources_destroy'] = 72.5
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        job_log_summary_flow_job_model = {} # JobLogSummaryFlowJob
        job_log_summary_flow_job_model['workitems_completed'] = 72.5
        job_log_summary_flow_job_model['workitems_pending'] = 72.5
        job_log_summary_flow_job_model['workitems_failed'] = 72.5
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_recap_model = {} # JobLogSummaryActionJobRecap
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_model = {} # JobLogSummaryActionJob
        job_log_summary_action_job_model['target_count'] = 72.5
        job_log_summary_action_job_model['task_count'] = 72.5
        job_log_summary_action_job_model['play_count'] = 72.5
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_system_job_model = {} # JobLogSummarySystemJob
        job_log_summary_system_job_model['target_count'] = 72.5
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_model = {} # JobLogSummary
        job_log_summary_model['job_id'] = 'testString'
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['log_start_at'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['log_analyzed_till'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['elapsed_time'] = 72.5
        job_log_summary_model['log_errors'] = [job_log_summary_log_errors_model]
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Job model
        job_model_json = {}
        job_model_json['command_object'] = 'workspace'
        job_model_json['command_object_id'] = 'testString'
        job_model_json['command_name'] = 'workspace_plan'
        job_model_json['command_parameter'] = 'testString'
        job_model_json['command_options'] = ['testString']
        job_model_json['inputs'] = [variable_data_model]
        job_model_json['settings'] = [variable_data_model]
        job_model_json['tags'] = ['testString']
        job_model_json['id'] = 'testString'
        job_model_json['name'] = 'testString'
        job_model_json['description'] = 'testString'
        job_model_json['location'] = 'us-south'
        job_model_json['resource_group'] = 'testString'
        job_model_json['submitted_at'] = '2020-01-28T18:40:40.123456Z'
        job_model_json['submitted_by'] = 'testString'
        job_model_json['start_at'] = '2020-01-28T18:40:40.123456Z'
        job_model_json['end_at'] = '2020-01-28T18:40:40.123456Z'
        job_model_json['duration'] = 'testString'
        job_model_json['status'] = job_status_model
        job_model_json['data'] = job_data_model
        job_model_json['bastion'] = bastion_resource_definition_model
        job_model_json['log_summary'] = job_log_summary_model
        job_model_json['log_store_url'] = 'testString'
        job_model_json['state_store_url'] = 'testString'
        job_model_json['results_url'] = 'testString'
        job_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Job by calling from_dict on the json representation
        job_model = Job.from_dict(job_model_json)
        assert job_model != False

        # Construct a model instance of Job by calling from_dict on the json representation
        job_model_dict = Job.from_dict(job_model_json).__dict__
        job_model2 = Job(**job_model_dict)

        # Verify the model instances are equivalent
        assert job_model == job_model2

        # Convert model instance back to dict and verify no loss of data
        job_model_json2 = job_model.to_dict()
        assert job_model_json2 == job_model_json

class TestJobData():
    """
    Test Class for JobData
    """

    def test_job_data_serialization(self):
        """
        Test serialization/deserialization for JobData
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        job_data_template_model = {} # JobDataTemplate
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        job_data_workspace_model = {} # JobDataWorkspace
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        inventory_resource_record_model = {} # InventoryResourceRecord
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['id'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['created_by'] = 'testString'
        inventory_resource_record_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['updated_by'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        job_data_action_model = {} # JobDataAction
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        job_data_system_model = {} # JobDataSystem
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_last_job_model = {} # JobDataWorkItemLastJob
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_model = {} # JobDataWorkItem
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        job_data_flow_model = {} # JobDataFlow
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobData model
        job_data_model_json = {}
        job_data_model_json['job_type'] = 'repo_download_job'
        job_data_model_json['workspace_job_data'] = job_data_workspace_model
        job_data_model_json['action_job_data'] = job_data_action_model
        job_data_model_json['system_job_data'] = job_data_system_model
        job_data_model_json['flow_job_data'] = job_data_flow_model
        job_data_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobData by calling from_dict on the json representation
        job_data_model = JobData.from_dict(job_data_model_json)
        assert job_data_model != False

        # Construct a model instance of JobData by calling from_dict on the json representation
        job_data_model_dict = JobData.from_dict(job_data_model_json).__dict__
        job_data_model2 = JobData(**job_data_model_dict)

        # Verify the model instances are equivalent
        assert job_data_model == job_data_model2

        # Convert model instance back to dict and verify no loss of data
        job_data_model_json2 = job_data_model.to_dict()
        assert job_data_model_json2 == job_data_model_json

class TestJobDataAction():
    """
    Test Class for JobDataAction
    """

    def test_job_data_action_serialization(self):
        """
        Test serialization/deserialization for JobDataAction
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        inventory_resource_record_model = {} # InventoryResourceRecord
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['id'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['created_by'] = 'testString'
        inventory_resource_record_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['updated_by'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobDataAction model
        job_data_action_model_json = {}
        job_data_action_model_json['action_name'] = 'testString'
        job_data_action_model_json['inputs'] = [variable_data_model]
        job_data_action_model_json['outputs'] = [variable_data_model]
        job_data_action_model_json['settings'] = [variable_data_model]
        job_data_action_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model_json['inventory_record'] = inventory_resource_record_model
        job_data_action_model_json['materialized_inventory'] = 'testString'
        job_data_action_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobDataAction by calling from_dict on the json representation
        job_data_action_model = JobDataAction.from_dict(job_data_action_model_json)
        assert job_data_action_model != False

        # Construct a model instance of JobDataAction by calling from_dict on the json representation
        job_data_action_model_dict = JobDataAction.from_dict(job_data_action_model_json).__dict__
        job_data_action_model2 = JobDataAction(**job_data_action_model_dict)

        # Verify the model instances are equivalent
        assert job_data_action_model == job_data_action_model2

        # Convert model instance back to dict and verify no loss of data
        job_data_action_model_json2 = job_data_action_model.to_dict()
        assert job_data_action_model_json2 == job_data_action_model_json

class TestJobDataCapsule():
    """
    Test Class for JobDataCapsule
    """

    def test_job_data_capsule_serialization(self):
        """
        Test serialization/deserialization for JobDataCapsule
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        capsule_result_resources_model = {} # CapsuleResultResources
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        capsule_result_evidences_model = {} # CapsuleResultEvidences
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        job_result_capsule_model = {} # JobResultCapsule
        job_result_capsule_model['job_id'] = 'testString'
        job_result_capsule_model['job_name'] = 'testString'
        job_result_capsule_model['policy'] = 'testString'
        job_result_capsule_model['severity'] = 1
        job_result_capsule_model['job_state'] = 'success'
        job_result_capsule_model['failures'] = ['testString']
        job_result_capsule_model['passed'] = ['testString']
        job_result_capsule_model['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobDataCapsule model
        job_data_capsule_model_json = {}
        job_data_capsule_model_json['capsule_id'] = 'testString'
        job_data_capsule_model_json['calsule_name'] = 'testString'
        job_data_capsule_model_json['inputs'] = [variable_data_model]
        job_data_capsule_model_json['results'] = [job_result_capsule_model]
        job_data_capsule_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_capsule_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobDataCapsule by calling from_dict on the json representation
        job_data_capsule_model = JobDataCapsule.from_dict(job_data_capsule_model_json)
        assert job_data_capsule_model != False

        # Construct a model instance of JobDataCapsule by calling from_dict on the json representation
        job_data_capsule_model_dict = JobDataCapsule.from_dict(job_data_capsule_model_json).__dict__
        job_data_capsule_model2 = JobDataCapsule(**job_data_capsule_model_dict)

        # Verify the model instances are equivalent
        assert job_data_capsule_model == job_data_capsule_model2

        # Convert model instance back to dict and verify no loss of data
        job_data_capsule_model_json2 = job_data_capsule_model.to_dict()
        assert job_data_capsule_model_json2 == job_data_capsule_model_json

class TestJobDataFlow():
    """
    Test Class for JobDataFlow
    """

    def test_job_data_flow_serialization(self):
        """
        Test serialization/deserialization for JobDataFlow
        """

        # Construct dict forms of any model objects needed in order to build this model.

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_last_job_model = {} # JobDataWorkItemLastJob
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_model = {} # JobDataWorkItem
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobDataFlow model
        job_data_flow_model_json = {}
        job_data_flow_model_json['flow_id'] = 'testString'
        job_data_flow_model_json['flow_name'] = 'testString'
        job_data_flow_model_json['workitems'] = [job_data_work_item_model]
        job_data_flow_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobDataFlow by calling from_dict on the json representation
        job_data_flow_model = JobDataFlow.from_dict(job_data_flow_model_json)
        assert job_data_flow_model != False

        # Construct a model instance of JobDataFlow by calling from_dict on the json representation
        job_data_flow_model_dict = JobDataFlow.from_dict(job_data_flow_model_json).__dict__
        job_data_flow_model2 = JobDataFlow(**job_data_flow_model_dict)

        # Verify the model instances are equivalent
        assert job_data_flow_model == job_data_flow_model2

        # Convert model instance back to dict and verify no loss of data
        job_data_flow_model_json2 = job_data_flow_model.to_dict()
        assert job_data_flow_model_json2 == job_data_flow_model_json

class TestJobDataSystem():
    """
    Test Class for JobDataSystem
    """

    def test_job_data_system_serialization(self):
        """
        Test serialization/deserialization for JobDataSystem
        """

        # Construct a json representation of a JobDataSystem model
        job_data_system_model_json = {}
        job_data_system_model_json['key_id'] = 'testString'
        job_data_system_model_json['schematics_resource_id'] = ['testString']
        job_data_system_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobDataSystem by calling from_dict on the json representation
        job_data_system_model = JobDataSystem.from_dict(job_data_system_model_json)
        assert job_data_system_model != False

        # Construct a model instance of JobDataSystem by calling from_dict on the json representation
        job_data_system_model_dict = JobDataSystem.from_dict(job_data_system_model_json).__dict__
        job_data_system_model2 = JobDataSystem(**job_data_system_model_dict)

        # Verify the model instances are equivalent
        assert job_data_system_model == job_data_system_model2

        # Convert model instance back to dict and verify no loss of data
        job_data_system_model_json2 = job_data_system_model.to_dict()
        assert job_data_system_model_json2 == job_data_system_model_json

class TestJobDataTemplate():
    """
    Test Class for JobDataTemplate
    """

    def test_job_data_template_serialization(self):
        """
        Test serialization/deserialization for JobDataTemplate
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobDataTemplate model
        job_data_template_model_json = {}
        job_data_template_model_json['template_id'] = 'testString'
        job_data_template_model_json['template_name'] = 'testString'
        job_data_template_model_json['flow_index'] = 38
        job_data_template_model_json['inputs'] = [variable_data_model]
        job_data_template_model_json['outputs'] = [variable_data_model]
        job_data_template_model_json['settings'] = [variable_data_model]
        job_data_template_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobDataTemplate by calling from_dict on the json representation
        job_data_template_model = JobDataTemplate.from_dict(job_data_template_model_json)
        assert job_data_template_model != False

        # Construct a model instance of JobDataTemplate by calling from_dict on the json representation
        job_data_template_model_dict = JobDataTemplate.from_dict(job_data_template_model_json).__dict__
        job_data_template_model2 = JobDataTemplate(**job_data_template_model_dict)

        # Verify the model instances are equivalent
        assert job_data_template_model == job_data_template_model2

        # Convert model instance back to dict and verify no loss of data
        job_data_template_model_json2 = job_data_template_model.to_dict()
        assert job_data_template_model_json2 == job_data_template_model_json

class TestJobDataWorkItem():
    """
    Test Class for JobDataWorkItem
    """

    def test_job_data_work_item_serialization(self):
        """
        Test serialization/deserialization for JobDataWorkItem
        """

        # Construct dict forms of any model objects needed in order to build this model.

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_last_job_model = {} # JobDataWorkItemLastJob
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobDataWorkItem model
        job_data_work_item_model_json = {}
        job_data_work_item_model_json['command_object_id'] = 'testString'
        job_data_work_item_model_json['command_object_name'] = 'testString'
        job_data_work_item_model_json['layers'] = 'testString'
        job_data_work_item_model_json['source_type'] = 'local'
        job_data_work_item_model_json['source'] = external_source_model
        job_data_work_item_model_json['inputs'] = [variable_data_model]
        job_data_work_item_model_json['outputs'] = [variable_data_model]
        job_data_work_item_model_json['settings'] = [variable_data_model]
        job_data_work_item_model_json['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobDataWorkItem by calling from_dict on the json representation
        job_data_work_item_model = JobDataWorkItem.from_dict(job_data_work_item_model_json)
        assert job_data_work_item_model != False

        # Construct a model instance of JobDataWorkItem by calling from_dict on the json representation
        job_data_work_item_model_dict = JobDataWorkItem.from_dict(job_data_work_item_model_json).__dict__
        job_data_work_item_model2 = JobDataWorkItem(**job_data_work_item_model_dict)

        # Verify the model instances are equivalent
        assert job_data_work_item_model == job_data_work_item_model2

        # Convert model instance back to dict and verify no loss of data
        job_data_work_item_model_json2 = job_data_work_item_model.to_dict()
        assert job_data_work_item_model_json2 == job_data_work_item_model_json

class TestJobDataWorkItemLastJob():
    """
    Test Class for JobDataWorkItemLastJob
    """

    def test_job_data_work_item_last_job_serialization(self):
        """
        Test serialization/deserialization for JobDataWorkItemLastJob
        """

        # Construct a json representation of a JobDataWorkItemLastJob model
        job_data_work_item_last_job_model_json = {}
        job_data_work_item_last_job_model_json['command_object'] = 'workspace'
        job_data_work_item_last_job_model_json['command_object_name'] = 'testString'
        job_data_work_item_last_job_model_json['command_object_id'] = 'testString'
        job_data_work_item_last_job_model_json['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model_json['job_id'] = 'testString'
        job_data_work_item_last_job_model_json['job_status'] = 'job_pending'
        job_data_work_item_last_job_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobDataWorkItemLastJob by calling from_dict on the json representation
        job_data_work_item_last_job_model = JobDataWorkItemLastJob.from_dict(job_data_work_item_last_job_model_json)
        assert job_data_work_item_last_job_model != False

        # Construct a model instance of JobDataWorkItemLastJob by calling from_dict on the json representation
        job_data_work_item_last_job_model_dict = JobDataWorkItemLastJob.from_dict(job_data_work_item_last_job_model_json).__dict__
        job_data_work_item_last_job_model2 = JobDataWorkItemLastJob(**job_data_work_item_last_job_model_dict)

        # Verify the model instances are equivalent
        assert job_data_work_item_last_job_model == job_data_work_item_last_job_model2

        # Convert model instance back to dict and verify no loss of data
        job_data_work_item_last_job_model_json2 = job_data_work_item_last_job_model.to_dict()
        assert job_data_work_item_last_job_model_json2 == job_data_work_item_last_job_model_json

class TestJobDataWorkspace():
    """
    Test Class for JobDataWorkspace
    """

    def test_job_data_workspace_serialization(self):
        """
        Test serialization/deserialization for JobDataWorkspace
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        job_data_template_model = {} # JobDataTemplate
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobDataWorkspace model
        job_data_workspace_model_json = {}
        job_data_workspace_model_json['workspace_name'] = 'testString'
        job_data_workspace_model_json['flow_id'] = 'testString'
        job_data_workspace_model_json['flow_name'] = 'testString'
        job_data_workspace_model_json['inputs'] = [variable_data_model]
        job_data_workspace_model_json['outputs'] = [variable_data_model]
        job_data_workspace_model_json['settings'] = [variable_data_model]
        job_data_workspace_model_json['template_data'] = [job_data_template_model]
        job_data_workspace_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobDataWorkspace by calling from_dict on the json representation
        job_data_workspace_model = JobDataWorkspace.from_dict(job_data_workspace_model_json)
        assert job_data_workspace_model != False

        # Construct a model instance of JobDataWorkspace by calling from_dict on the json representation
        job_data_workspace_model_dict = JobDataWorkspace.from_dict(job_data_workspace_model_json).__dict__
        job_data_workspace_model2 = JobDataWorkspace(**job_data_workspace_model_dict)

        # Verify the model instances are equivalent
        assert job_data_workspace_model == job_data_workspace_model2

        # Convert model instance back to dict and verify no loss of data
        job_data_workspace_model_json2 = job_data_workspace_model.to_dict()
        assert job_data_workspace_model_json2 == job_data_workspace_model_json

class TestJobList():
    """
    Test Class for JobList
    """

    def test_job_list_serialization(self):
        """
        Test serialization/deserialization for JobList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        job_status_workitem_model = {} # JobStatusWorkitem
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        job_status_flow_model = {} # JobStatusFlow
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_model = {} # JobStatusWorkspace
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        job_status_action_model = {} # JobStatusAction
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        job_status_schematics_resources_model = {} # JobStatusSchematicsResources
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        job_status_system_model = {} # JobStatusSystem
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        job_status_model = {} # JobStatus
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        job_log_summary_log_errors_model = {} # JobLogSummaryLogErrors
        job_log_summary_log_errors_model['error_code'] = 'testString'
        job_log_summary_log_errors_model['error_msg'] = 'testString'
        job_log_summary_log_errors_model['error_count'] = 72.5
        job_log_summary_log_errors_model['foo'] = { 'foo': 'bar' }

        job_log_summary_repo_download_job_model = {} # JobLogSummaryRepoDownloadJob
        job_log_summary_repo_download_job_model['scanned_file_count'] = 72.5
        job_log_summary_repo_download_job_model['quarantined_file_count'] = 72.5
        job_log_summary_repo_download_job_model['detected_filetype'] = 'testString'
        job_log_summary_repo_download_job_model['inputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['outputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workspace_job_model = {} # JobLogSummaryWorkspaceJob
        job_log_summary_workspace_job_model['resources_add'] = 72.5
        job_log_summary_workspace_job_model['resources_modify'] = 72.5
        job_log_summary_workspace_job_model['resources_destroy'] = 72.5
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workitems_model = {} # JobLogSummaryWorkitems
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['resources_add'] = 72.5
        job_log_summary_workitems_model['resources_modify'] = 72.5
        job_log_summary_workitems_model['resources_destroy'] = 72.5
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        job_log_summary_flow_job_model = {} # JobLogSummaryFlowJob
        job_log_summary_flow_job_model['workitems_completed'] = 72.5
        job_log_summary_flow_job_model['workitems_pending'] = 72.5
        job_log_summary_flow_job_model['workitems_failed'] = 72.5
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_recap_model = {} # JobLogSummaryActionJobRecap
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_model = {} # JobLogSummaryActionJob
        job_log_summary_action_job_model['target_count'] = 72.5
        job_log_summary_action_job_model['task_count'] = 72.5
        job_log_summary_action_job_model['play_count'] = 72.5
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_system_job_model = {} # JobLogSummarySystemJob
        job_log_summary_system_job_model['target_count'] = 72.5
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_model = {} # JobLogSummary
        job_log_summary_model['job_id'] = 'testString'
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['log_start_at'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['log_analyzed_till'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['elapsed_time'] = 72.5
        job_log_summary_model['log_errors'] = [job_log_summary_log_errors_model]
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        job_lite_model = {} # JobLite
        job_lite_model['id'] = 'testString'
        job_lite_model['name'] = 'testString'
        job_lite_model['description'] = 'testString'
        job_lite_model['command_object'] = 'workspace'
        job_lite_model['command_object_id'] = 'testString'
        job_lite_model['command_name'] = 'workspace_plan'
        job_lite_model['tags'] = ['testString']
        job_lite_model['location'] = 'us-south'
        job_lite_model['resource_group'] = 'testString'
        job_lite_model['submitted_at'] = '2020-01-28T18:40:40.123456Z'
        job_lite_model['submitted_by'] = 'testString'
        job_lite_model['duration'] = 'testString'
        job_lite_model['start_at'] = '2020-01-28T18:40:40.123456Z'
        job_lite_model['end_at'] = '2020-01-28T18:40:40.123456Z'
        job_lite_model['status'] = job_status_model
        job_lite_model['log_summary'] = job_log_summary_model
        job_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobList model
        job_list_model_json = {}
        job_list_model_json['total_count'] = 26
        job_list_model_json['limit'] = 26
        job_list_model_json['offset'] = 26
        job_list_model_json['jobs'] = [job_lite_model]
        job_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobList by calling from_dict on the json representation
        job_list_model = JobList.from_dict(job_list_model_json)
        assert job_list_model != False

        # Construct a model instance of JobList by calling from_dict on the json representation
        job_list_model_dict = JobList.from_dict(job_list_model_json).__dict__
        job_list_model2 = JobList(**job_list_model_dict)

        # Verify the model instances are equivalent
        assert job_list_model == job_list_model2

        # Convert model instance back to dict and verify no loss of data
        job_list_model_json2 = job_list_model.to_dict()
        assert job_list_model_json2 == job_list_model_json

class TestJobLite():
    """
    Test Class for JobLite
    """

    def test_job_lite_serialization(self):
        """
        Test serialization/deserialization for JobLite
        """

        # Construct dict forms of any model objects needed in order to build this model.

        job_status_workitem_model = {} # JobStatusWorkitem
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        job_status_flow_model = {} # JobStatusFlow
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_model = {} # JobStatusWorkspace
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        job_status_action_model = {} # JobStatusAction
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        job_status_schematics_resources_model = {} # JobStatusSchematicsResources
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        job_status_system_model = {} # JobStatusSystem
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        job_status_model = {} # JobStatus
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        job_log_summary_log_errors_model = {} # JobLogSummaryLogErrors
        job_log_summary_log_errors_model['error_code'] = 'testString'
        job_log_summary_log_errors_model['error_msg'] = 'testString'
        job_log_summary_log_errors_model['error_count'] = 72.5
        job_log_summary_log_errors_model['foo'] = { 'foo': 'bar' }

        job_log_summary_repo_download_job_model = {} # JobLogSummaryRepoDownloadJob
        job_log_summary_repo_download_job_model['scanned_file_count'] = 72.5
        job_log_summary_repo_download_job_model['quarantined_file_count'] = 72.5
        job_log_summary_repo_download_job_model['detected_filetype'] = 'testString'
        job_log_summary_repo_download_job_model['inputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['outputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workspace_job_model = {} # JobLogSummaryWorkspaceJob
        job_log_summary_workspace_job_model['resources_add'] = 72.5
        job_log_summary_workspace_job_model['resources_modify'] = 72.5
        job_log_summary_workspace_job_model['resources_destroy'] = 72.5
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workitems_model = {} # JobLogSummaryWorkitems
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['resources_add'] = 72.5
        job_log_summary_workitems_model['resources_modify'] = 72.5
        job_log_summary_workitems_model['resources_destroy'] = 72.5
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        job_log_summary_flow_job_model = {} # JobLogSummaryFlowJob
        job_log_summary_flow_job_model['workitems_completed'] = 72.5
        job_log_summary_flow_job_model['workitems_pending'] = 72.5
        job_log_summary_flow_job_model['workitems_failed'] = 72.5
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_recap_model = {} # JobLogSummaryActionJobRecap
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_model = {} # JobLogSummaryActionJob
        job_log_summary_action_job_model['target_count'] = 72.5
        job_log_summary_action_job_model['task_count'] = 72.5
        job_log_summary_action_job_model['play_count'] = 72.5
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_system_job_model = {} # JobLogSummarySystemJob
        job_log_summary_system_job_model['target_count'] = 72.5
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_model = {} # JobLogSummary
        job_log_summary_model['job_id'] = 'testString'
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['log_start_at'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['log_analyzed_till'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['elapsed_time'] = 72.5
        job_log_summary_model['log_errors'] = [job_log_summary_log_errors_model]
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobLite model
        job_lite_model_json = {}
        job_lite_model_json['id'] = 'testString'
        job_lite_model_json['name'] = 'testString'
        job_lite_model_json['description'] = 'testString'
        job_lite_model_json['command_object'] = 'workspace'
        job_lite_model_json['command_object_id'] = 'testString'
        job_lite_model_json['command_name'] = 'workspace_plan'
        job_lite_model_json['tags'] = ['testString']
        job_lite_model_json['location'] = 'us-south'
        job_lite_model_json['resource_group'] = 'testString'
        job_lite_model_json['submitted_at'] = '2020-01-28T18:40:40.123456Z'
        job_lite_model_json['submitted_by'] = 'testString'
        job_lite_model_json['duration'] = 'testString'
        job_lite_model_json['start_at'] = '2020-01-28T18:40:40.123456Z'
        job_lite_model_json['end_at'] = '2020-01-28T18:40:40.123456Z'
        job_lite_model_json['status'] = job_status_model
        job_lite_model_json['log_summary'] = job_log_summary_model
        job_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobLite by calling from_dict on the json representation
        job_lite_model = JobLite.from_dict(job_lite_model_json)
        assert job_lite_model != False

        # Construct a model instance of JobLite by calling from_dict on the json representation
        job_lite_model_dict = JobLite.from_dict(job_lite_model_json).__dict__
        job_lite_model2 = JobLite(**job_lite_model_dict)

        # Verify the model instances are equivalent
        assert job_lite_model == job_lite_model2

        # Convert model instance back to dict and verify no loss of data
        job_lite_model_json2 = job_lite_model.to_dict()
        assert job_lite_model_json2 == job_lite_model_json

class TestJobLog():
    """
    Test Class for JobLog
    """

    def test_job_log_serialization(self):
        """
        Test serialization/deserialization for JobLog
        """

        # Construct dict forms of any model objects needed in order to build this model.

        job_log_summary_log_errors_model = {} # JobLogSummaryLogErrors
        job_log_summary_log_errors_model['error_code'] = 'testString'
        job_log_summary_log_errors_model['error_msg'] = 'testString'
        job_log_summary_log_errors_model['error_count'] = 72.5
        job_log_summary_log_errors_model['foo'] = { 'foo': 'bar' }

        job_log_summary_repo_download_job_model = {} # JobLogSummaryRepoDownloadJob
        job_log_summary_repo_download_job_model['scanned_file_count'] = 72.5
        job_log_summary_repo_download_job_model['quarantined_file_count'] = 72.5
        job_log_summary_repo_download_job_model['detected_filetype'] = 'testString'
        job_log_summary_repo_download_job_model['inputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['outputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workspace_job_model = {} # JobLogSummaryWorkspaceJob
        job_log_summary_workspace_job_model['resources_add'] = 72.5
        job_log_summary_workspace_job_model['resources_modify'] = 72.5
        job_log_summary_workspace_job_model['resources_destroy'] = 72.5
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workitems_model = {} # JobLogSummaryWorkitems
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['resources_add'] = 72.5
        job_log_summary_workitems_model['resources_modify'] = 72.5
        job_log_summary_workitems_model['resources_destroy'] = 72.5
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        job_log_summary_flow_job_model = {} # JobLogSummaryFlowJob
        job_log_summary_flow_job_model['workitems_completed'] = 72.5
        job_log_summary_flow_job_model['workitems_pending'] = 72.5
        job_log_summary_flow_job_model['workitems_failed'] = 72.5
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_recap_model = {} # JobLogSummaryActionJobRecap
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_model = {} # JobLogSummaryActionJob
        job_log_summary_action_job_model['target_count'] = 72.5
        job_log_summary_action_job_model['task_count'] = 72.5
        job_log_summary_action_job_model['play_count'] = 72.5
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_system_job_model = {} # JobLogSummarySystemJob
        job_log_summary_system_job_model['target_count'] = 72.5
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_model = {} # JobLogSummary
        job_log_summary_model['job_id'] = 'testString'
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['log_start_at'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['log_analyzed_till'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['elapsed_time'] = 72.5
        job_log_summary_model['log_errors'] = [job_log_summary_log_errors_model]
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobLog model
        job_log_model_json = {}
        job_log_model_json['job_id'] = 'testString'
        job_log_model_json['job_name'] = 'testString'
        job_log_model_json['log_summary'] = job_log_summary_model
        job_log_model_json['format'] = 'json'
        job_log_model_json['details'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        job_log_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_log_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobLog by calling from_dict on the json representation
        job_log_model = JobLog.from_dict(job_log_model_json)
        assert job_log_model != False

        # Construct a model instance of JobLog by calling from_dict on the json representation
        job_log_model_dict = JobLog.from_dict(job_log_model_json).__dict__
        job_log_model2 = JobLog(**job_log_model_dict)

        # Verify the model instances are equivalent
        assert job_log_model == job_log_model2

        # Convert model instance back to dict and verify no loss of data
        job_log_model_json2 = job_log_model.to_dict()
        assert job_log_model_json2 == job_log_model_json

class TestJobLogSummary():
    """
    Test Class for JobLogSummary
    """

    def test_job_log_summary_serialization(self):
        """
        Test serialization/deserialization for JobLogSummary
        """

        # Construct dict forms of any model objects needed in order to build this model.

        job_log_summary_log_errors_model = {} # JobLogSummaryLogErrors
        job_log_summary_log_errors_model['error_code'] = 'testString'
        job_log_summary_log_errors_model['error_msg'] = 'testString'
        job_log_summary_log_errors_model['error_count'] = 72.5
        job_log_summary_log_errors_model['foo'] = { 'foo': 'bar' }

        job_log_summary_repo_download_job_model = {} # JobLogSummaryRepoDownloadJob
        job_log_summary_repo_download_job_model['scanned_file_count'] = 72.5
        job_log_summary_repo_download_job_model['quarantined_file_count'] = 72.5
        job_log_summary_repo_download_job_model['detected_filetype'] = 'testString'
        job_log_summary_repo_download_job_model['inputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['outputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workspace_job_model = {} # JobLogSummaryWorkspaceJob
        job_log_summary_workspace_job_model['resources_add'] = 72.5
        job_log_summary_workspace_job_model['resources_modify'] = 72.5
        job_log_summary_workspace_job_model['resources_destroy'] = 72.5
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workitems_model = {} # JobLogSummaryWorkitems
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['resources_add'] = 72.5
        job_log_summary_workitems_model['resources_modify'] = 72.5
        job_log_summary_workitems_model['resources_destroy'] = 72.5
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        job_log_summary_flow_job_model = {} # JobLogSummaryFlowJob
        job_log_summary_flow_job_model['workitems_completed'] = 72.5
        job_log_summary_flow_job_model['workitems_pending'] = 72.5
        job_log_summary_flow_job_model['workitems_failed'] = 72.5
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_recap_model = {} # JobLogSummaryActionJobRecap
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_model = {} # JobLogSummaryActionJob
        job_log_summary_action_job_model['target_count'] = 72.5
        job_log_summary_action_job_model['task_count'] = 72.5
        job_log_summary_action_job_model['play_count'] = 72.5
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_system_job_model = {} # JobLogSummarySystemJob
        job_log_summary_system_job_model['target_count'] = 72.5
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobLogSummary model
        job_log_summary_model_json = {}
        job_log_summary_model_json['job_id'] = 'testString'
        job_log_summary_model_json['job_type'] = 'repo_download_job'
        job_log_summary_model_json['log_start_at'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model_json['log_analyzed_till'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model_json['elapsed_time'] = 72.5
        job_log_summary_model_json['log_errors'] = [job_log_summary_log_errors_model]
        job_log_summary_model_json['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model_json['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model_json['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model_json['action_job'] = job_log_summary_action_job_model
        job_log_summary_model_json['system_job'] = job_log_summary_system_job_model
        job_log_summary_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobLogSummary by calling from_dict on the json representation
        job_log_summary_model = JobLogSummary.from_dict(job_log_summary_model_json)
        assert job_log_summary_model != False

        # Construct a model instance of JobLogSummary by calling from_dict on the json representation
        job_log_summary_model_dict = JobLogSummary.from_dict(job_log_summary_model_json).__dict__
        job_log_summary_model2 = JobLogSummary(**job_log_summary_model_dict)

        # Verify the model instances are equivalent
        assert job_log_summary_model == job_log_summary_model2

        # Convert model instance back to dict and verify no loss of data
        job_log_summary_model_json2 = job_log_summary_model.to_dict()
        assert job_log_summary_model_json2 == job_log_summary_model_json

class TestJobLogSummaryWorkitems():
    """
    Test Class for JobLogSummaryWorkitems
    """

    def test_job_log_summary_workitems_serialization(self):
        """
        Test serialization/deserialization for JobLogSummaryWorkitems
        """

        # Construct a json representation of a JobLogSummaryWorkitems model
        job_log_summary_workitems_model_json = {}
        job_log_summary_workitems_model_json['workspace_id'] = 'testString'
        job_log_summary_workitems_model_json['job_id'] = 'testString'
        job_log_summary_workitems_model_json['resources_add'] = 72.5
        job_log_summary_workitems_model_json['resources_modify'] = 72.5
        job_log_summary_workitems_model_json['resources_destroy'] = 72.5
        job_log_summary_workitems_model_json['log_url'] = 'testString'
        job_log_summary_workitems_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobLogSummaryWorkitems by calling from_dict on the json representation
        job_log_summary_workitems_model = JobLogSummaryWorkitems.from_dict(job_log_summary_workitems_model_json)
        assert job_log_summary_workitems_model != False

        # Construct a model instance of JobLogSummaryWorkitems by calling from_dict on the json representation
        job_log_summary_workitems_model_dict = JobLogSummaryWorkitems.from_dict(job_log_summary_workitems_model_json).__dict__
        job_log_summary_workitems_model2 = JobLogSummaryWorkitems(**job_log_summary_workitems_model_dict)

        # Verify the model instances are equivalent
        assert job_log_summary_workitems_model == job_log_summary_workitems_model2

        # Convert model instance back to dict and verify no loss of data
        job_log_summary_workitems_model_json2 = job_log_summary_workitems_model.to_dict()
        assert job_log_summary_workitems_model_json2 == job_log_summary_workitems_model_json

class TestJobLogSummaryActionJob():
    """
    Test Class for JobLogSummaryActionJob
    """

    def test_job_log_summary_action_job_serialization(self):
        """
        Test serialization/deserialization for JobLogSummaryActionJob
        """

        # Construct dict forms of any model objects needed in order to build this model.

        job_log_summary_action_job_recap_model = {} # JobLogSummaryActionJobRecap
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobLogSummaryActionJob model
        job_log_summary_action_job_model_json = {}
        job_log_summary_action_job_model_json['target_count'] = 72.5
        job_log_summary_action_job_model_json['task_count'] = 72.5
        job_log_summary_action_job_model_json['play_count'] = 72.5
        job_log_summary_action_job_model_json['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobLogSummaryActionJob by calling from_dict on the json representation
        job_log_summary_action_job_model = JobLogSummaryActionJob.from_dict(job_log_summary_action_job_model_json)
        assert job_log_summary_action_job_model != False

        # Construct a model instance of JobLogSummaryActionJob by calling from_dict on the json representation
        job_log_summary_action_job_model_dict = JobLogSummaryActionJob.from_dict(job_log_summary_action_job_model_json).__dict__
        job_log_summary_action_job_model2 = JobLogSummaryActionJob(**job_log_summary_action_job_model_dict)

        # Verify the model instances are equivalent
        assert job_log_summary_action_job_model == job_log_summary_action_job_model2

        # Convert model instance back to dict and verify no loss of data
        job_log_summary_action_job_model_json2 = job_log_summary_action_job_model.to_dict()
        assert job_log_summary_action_job_model_json2 == job_log_summary_action_job_model_json

class TestJobLogSummaryActionJobRecap():
    """
    Test Class for JobLogSummaryActionJobRecap
    """

    def test_job_log_summary_action_job_recap_serialization(self):
        """
        Test serialization/deserialization for JobLogSummaryActionJobRecap
        """

        # Construct a json representation of a JobLogSummaryActionJobRecap model
        job_log_summary_action_job_recap_model_json = {}
        job_log_summary_action_job_recap_model_json['target'] = ['testString']
        job_log_summary_action_job_recap_model_json['ok'] = 72.5
        job_log_summary_action_job_recap_model_json['changed'] = 72.5
        job_log_summary_action_job_recap_model_json['failed'] = 72.5
        job_log_summary_action_job_recap_model_json['skipped'] = 72.5
        job_log_summary_action_job_recap_model_json['unreachable'] = 72.5
        job_log_summary_action_job_recap_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobLogSummaryActionJobRecap by calling from_dict on the json representation
        job_log_summary_action_job_recap_model = JobLogSummaryActionJobRecap.from_dict(job_log_summary_action_job_recap_model_json)
        assert job_log_summary_action_job_recap_model != False

        # Construct a model instance of JobLogSummaryActionJobRecap by calling from_dict on the json representation
        job_log_summary_action_job_recap_model_dict = JobLogSummaryActionJobRecap.from_dict(job_log_summary_action_job_recap_model_json).__dict__
        job_log_summary_action_job_recap_model2 = JobLogSummaryActionJobRecap(**job_log_summary_action_job_recap_model_dict)

        # Verify the model instances are equivalent
        assert job_log_summary_action_job_recap_model == job_log_summary_action_job_recap_model2

        # Convert model instance back to dict and verify no loss of data
        job_log_summary_action_job_recap_model_json2 = job_log_summary_action_job_recap_model.to_dict()
        assert job_log_summary_action_job_recap_model_json2 == job_log_summary_action_job_recap_model_json

class TestJobLogSummaryFlowJob():
    """
    Test Class for JobLogSummaryFlowJob
    """

    def test_job_log_summary_flow_job_serialization(self):
        """
        Test serialization/deserialization for JobLogSummaryFlowJob
        """

        # Construct dict forms of any model objects needed in order to build this model.

        job_log_summary_workitems_model = {} # JobLogSummaryWorkitems
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['resources_add'] = 72.5
        job_log_summary_workitems_model['resources_modify'] = 72.5
        job_log_summary_workitems_model['resources_destroy'] = 72.5
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobLogSummaryFlowJob model
        job_log_summary_flow_job_model_json = {}
        job_log_summary_flow_job_model_json['workitems_completed'] = 72.5
        job_log_summary_flow_job_model_json['workitems_pending'] = 72.5
        job_log_summary_flow_job_model_json['workitems_failed'] = 72.5
        job_log_summary_flow_job_model_json['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobLogSummaryFlowJob by calling from_dict on the json representation
        job_log_summary_flow_job_model = JobLogSummaryFlowJob.from_dict(job_log_summary_flow_job_model_json)
        assert job_log_summary_flow_job_model != False

        # Construct a model instance of JobLogSummaryFlowJob by calling from_dict on the json representation
        job_log_summary_flow_job_model_dict = JobLogSummaryFlowJob.from_dict(job_log_summary_flow_job_model_json).__dict__
        job_log_summary_flow_job_model2 = JobLogSummaryFlowJob(**job_log_summary_flow_job_model_dict)

        # Verify the model instances are equivalent
        assert job_log_summary_flow_job_model == job_log_summary_flow_job_model2

        # Convert model instance back to dict and verify no loss of data
        job_log_summary_flow_job_model_json2 = job_log_summary_flow_job_model.to_dict()
        assert job_log_summary_flow_job_model_json2 == job_log_summary_flow_job_model_json

class TestJobLogSummaryLogErrors():
    """
    Test Class for JobLogSummaryLogErrors
    """

    def test_job_log_summary_log_errors_serialization(self):
        """
        Test serialization/deserialization for JobLogSummaryLogErrors
        """

        # Construct a json representation of a JobLogSummaryLogErrors model
        job_log_summary_log_errors_model_json = {}
        job_log_summary_log_errors_model_json['error_code'] = 'testString'
        job_log_summary_log_errors_model_json['error_msg'] = 'testString'
        job_log_summary_log_errors_model_json['error_count'] = 72.5
        job_log_summary_log_errors_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobLogSummaryLogErrors by calling from_dict on the json representation
        job_log_summary_log_errors_model = JobLogSummaryLogErrors.from_dict(job_log_summary_log_errors_model_json)
        assert job_log_summary_log_errors_model != False

        # Construct a model instance of JobLogSummaryLogErrors by calling from_dict on the json representation
        job_log_summary_log_errors_model_dict = JobLogSummaryLogErrors.from_dict(job_log_summary_log_errors_model_json).__dict__
        job_log_summary_log_errors_model2 = JobLogSummaryLogErrors(**job_log_summary_log_errors_model_dict)

        # Verify the model instances are equivalent
        assert job_log_summary_log_errors_model == job_log_summary_log_errors_model2

        # Convert model instance back to dict and verify no loss of data
        job_log_summary_log_errors_model_json2 = job_log_summary_log_errors_model.to_dict()
        assert job_log_summary_log_errors_model_json2 == job_log_summary_log_errors_model_json

class TestJobLogSummaryRepoDownloadJob():
    """
    Test Class for JobLogSummaryRepoDownloadJob
    """

    def test_job_log_summary_repo_download_job_serialization(self):
        """
        Test serialization/deserialization for JobLogSummaryRepoDownloadJob
        """

        # Construct a json representation of a JobLogSummaryRepoDownloadJob model
        job_log_summary_repo_download_job_model_json = {}
        job_log_summary_repo_download_job_model_json['scanned_file_count'] = 72.5
        job_log_summary_repo_download_job_model_json['quarantined_file_count'] = 72.5
        job_log_summary_repo_download_job_model_json['detected_filetype'] = 'testString'
        job_log_summary_repo_download_job_model_json['inputs_count'] = 'testString'
        job_log_summary_repo_download_job_model_json['outputs_count'] = 'testString'
        job_log_summary_repo_download_job_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobLogSummaryRepoDownloadJob by calling from_dict on the json representation
        job_log_summary_repo_download_job_model = JobLogSummaryRepoDownloadJob.from_dict(job_log_summary_repo_download_job_model_json)
        assert job_log_summary_repo_download_job_model != False

        # Construct a model instance of JobLogSummaryRepoDownloadJob by calling from_dict on the json representation
        job_log_summary_repo_download_job_model_dict = JobLogSummaryRepoDownloadJob.from_dict(job_log_summary_repo_download_job_model_json).__dict__
        job_log_summary_repo_download_job_model2 = JobLogSummaryRepoDownloadJob(**job_log_summary_repo_download_job_model_dict)

        # Verify the model instances are equivalent
        assert job_log_summary_repo_download_job_model == job_log_summary_repo_download_job_model2

        # Convert model instance back to dict and verify no loss of data
        job_log_summary_repo_download_job_model_json2 = job_log_summary_repo_download_job_model.to_dict()
        assert job_log_summary_repo_download_job_model_json2 == job_log_summary_repo_download_job_model_json

class TestJobLogSummarySystemJob():
    """
    Test Class for JobLogSummarySystemJob
    """

    def test_job_log_summary_system_job_serialization(self):
        """
        Test serialization/deserialization for JobLogSummarySystemJob
        """

        # Construct a json representation of a JobLogSummarySystemJob model
        job_log_summary_system_job_model_json = {}
        job_log_summary_system_job_model_json['target_count'] = 72.5
        job_log_summary_system_job_model_json['success'] = 72.5
        job_log_summary_system_job_model_json['failed'] = 72.5
        job_log_summary_system_job_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobLogSummarySystemJob by calling from_dict on the json representation
        job_log_summary_system_job_model = JobLogSummarySystemJob.from_dict(job_log_summary_system_job_model_json)
        assert job_log_summary_system_job_model != False

        # Construct a model instance of JobLogSummarySystemJob by calling from_dict on the json representation
        job_log_summary_system_job_model_dict = JobLogSummarySystemJob.from_dict(job_log_summary_system_job_model_json).__dict__
        job_log_summary_system_job_model2 = JobLogSummarySystemJob(**job_log_summary_system_job_model_dict)

        # Verify the model instances are equivalent
        assert job_log_summary_system_job_model == job_log_summary_system_job_model2

        # Convert model instance back to dict and verify no loss of data
        job_log_summary_system_job_model_json2 = job_log_summary_system_job_model.to_dict()
        assert job_log_summary_system_job_model_json2 == job_log_summary_system_job_model_json

class TestJobLogSummaryWorkspaceJob():
    """
    Test Class for JobLogSummaryWorkspaceJob
    """

    def test_job_log_summary_workspace_job_serialization(self):
        """
        Test serialization/deserialization for JobLogSummaryWorkspaceJob
        """

        # Construct a json representation of a JobLogSummaryWorkspaceJob model
        job_log_summary_workspace_job_model_json = {}
        job_log_summary_workspace_job_model_json['resources_add'] = 72.5
        job_log_summary_workspace_job_model_json['resources_modify'] = 72.5
        job_log_summary_workspace_job_model_json['resources_destroy'] = 72.5
        job_log_summary_workspace_job_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobLogSummaryWorkspaceJob by calling from_dict on the json representation
        job_log_summary_workspace_job_model = JobLogSummaryWorkspaceJob.from_dict(job_log_summary_workspace_job_model_json)
        assert job_log_summary_workspace_job_model != False

        # Construct a model instance of JobLogSummaryWorkspaceJob by calling from_dict on the json representation
        job_log_summary_workspace_job_model_dict = JobLogSummaryWorkspaceJob.from_dict(job_log_summary_workspace_job_model_json).__dict__
        job_log_summary_workspace_job_model2 = JobLogSummaryWorkspaceJob(**job_log_summary_workspace_job_model_dict)

        # Verify the model instances are equivalent
        assert job_log_summary_workspace_job_model == job_log_summary_workspace_job_model2

        # Convert model instance back to dict and verify no loss of data
        job_log_summary_workspace_job_model_json2 = job_log_summary_workspace_job_model.to_dict()
        assert job_log_summary_workspace_job_model_json2 == job_log_summary_workspace_job_model_json

class TestJobResultCapsule():
    """
    Test Class for JobResultCapsule
    """

    def test_job_result_capsule_serialization(self):
        """
        Test serialization/deserialization for JobResultCapsule
        """

        # Construct dict forms of any model objects needed in order to build this model.

        capsule_result_resources_model = {} # CapsuleResultResources
        capsule_result_resources_model['name'] = 'testString'
        capsule_result_resources_model['type'] = 'testString'
        capsule_result_resources_model['foo'] = { 'foo': 'bar' }

        capsule_result_evidences_model = {} # CapsuleResultEvidences
        capsule_result_evidences_model['resources'] = [capsule_result_resources_model]
        capsule_result_evidences_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobResultCapsule model
        job_result_capsule_model_json = {}
        job_result_capsule_model_json['job_id'] = 'testString'
        job_result_capsule_model_json['job_name'] = 'testString'
        job_result_capsule_model_json['policy'] = 'testString'
        job_result_capsule_model_json['severity'] = 1
        job_result_capsule_model_json['job_state'] = 'success'
        job_result_capsule_model_json['failures'] = ['testString']
        job_result_capsule_model_json['passed'] = ['testString']
        job_result_capsule_model_json['evidences'] = [capsule_result_evidences_model]
        job_result_capsule_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_result_capsule_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobResultCapsule by calling from_dict on the json representation
        job_result_capsule_model = JobResultCapsule.from_dict(job_result_capsule_model_json)
        assert job_result_capsule_model != False

        # Construct a model instance of JobResultCapsule by calling from_dict on the json representation
        job_result_capsule_model_dict = JobResultCapsule.from_dict(job_result_capsule_model_json).__dict__
        job_result_capsule_model2 = JobResultCapsule(**job_result_capsule_model_dict)

        # Verify the model instances are equivalent
        assert job_result_capsule_model == job_result_capsule_model2

        # Convert model instance back to dict and verify no loss of data
        job_result_capsule_model_json2 = job_result_capsule_model.to_dict()
        assert job_result_capsule_model_json2 == job_result_capsule_model_json

class TestJobStateData():
    """
    Test Class for JobStateData
    """

    def test_job_state_data_serialization(self):
        """
        Test serialization/deserialization for JobStateData
        """

        # Construct dict forms of any model objects needed in order to build this model.

        job_state_data_summary_model = {} # JobStateDataSummary
        job_state_data_summary_model['name'] = 'testString'
        job_state_data_summary_model['type'] = 'number'
        job_state_data_summary_model['value'] = 'testString'
        job_state_data_summary_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobStateData model
        job_state_data_model_json = {}
        job_state_data_model_json['job_id'] = 'testString'
        job_state_data_model_json['job_name'] = 'testString'
        job_state_data_model_json['summary'] = [job_state_data_summary_model]
        job_state_data_model_json['format'] = 'testString'
        job_state_data_model_json['details'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        job_state_data_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_state_data_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobStateData by calling from_dict on the json representation
        job_state_data_model = JobStateData.from_dict(job_state_data_model_json)
        assert job_state_data_model != False

        # Construct a model instance of JobStateData by calling from_dict on the json representation
        job_state_data_model_dict = JobStateData.from_dict(job_state_data_model_json).__dict__
        job_state_data_model2 = JobStateData(**job_state_data_model_dict)

        # Verify the model instances are equivalent
        assert job_state_data_model == job_state_data_model2

        # Convert model instance back to dict and verify no loss of data
        job_state_data_model_json2 = job_state_data_model.to_dict()
        assert job_state_data_model_json2 == job_state_data_model_json

class TestJobStateDataSummary():
    """
    Test Class for JobStateDataSummary
    """

    def test_job_state_data_summary_serialization(self):
        """
        Test serialization/deserialization for JobStateDataSummary
        """

        # Construct a json representation of a JobStateDataSummary model
        job_state_data_summary_model_json = {}
        job_state_data_summary_model_json['name'] = 'testString'
        job_state_data_summary_model_json['type'] = 'number'
        job_state_data_summary_model_json['value'] = 'testString'
        job_state_data_summary_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobStateDataSummary by calling from_dict on the json representation
        job_state_data_summary_model = JobStateDataSummary.from_dict(job_state_data_summary_model_json)
        assert job_state_data_summary_model != False

        # Construct a model instance of JobStateDataSummary by calling from_dict on the json representation
        job_state_data_summary_model_dict = JobStateDataSummary.from_dict(job_state_data_summary_model_json).__dict__
        job_state_data_summary_model2 = JobStateDataSummary(**job_state_data_summary_model_dict)

        # Verify the model instances are equivalent
        assert job_state_data_summary_model == job_state_data_summary_model2

        # Convert model instance back to dict and verify no loss of data
        job_state_data_summary_model_json2 = job_state_data_summary_model.to_dict()
        assert job_state_data_summary_model_json2 == job_state_data_summary_model_json

class TestJobStatus():
    """
    Test Class for JobStatus
    """

    def test_job_status_serialization(self):
        """
        Test serialization/deserialization for JobStatus
        """

        # Construct dict forms of any model objects needed in order to build this model.

        job_status_workitem_model = {} # JobStatusWorkitem
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        job_status_flow_model = {} # JobStatusFlow
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_model = {} # JobStatusWorkspace
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        job_status_action_model = {} # JobStatusAction
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        job_status_schematics_resources_model = {} # JobStatusSchematicsResources
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        job_status_system_model = {} # JobStatusSystem
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobStatus model
        job_status_model_json = {}
        job_status_model_json['workspace_job_status'] = job_status_workspace_model
        job_status_model_json['action_job_status'] = job_status_action_model
        job_status_model_json['system_job_status'] = job_status_system_model
        job_status_model_json['flow_job_status'] = job_status_flow_model
        job_status_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobStatus by calling from_dict on the json representation
        job_status_model = JobStatus.from_dict(job_status_model_json)
        assert job_status_model != False

        # Construct a model instance of JobStatus by calling from_dict on the json representation
        job_status_model_dict = JobStatus.from_dict(job_status_model_json).__dict__
        job_status_model2 = JobStatus(**job_status_model_dict)

        # Verify the model instances are equivalent
        assert job_status_model == job_status_model2

        # Convert model instance back to dict and verify no loss of data
        job_status_model_json2 = job_status_model.to_dict()
        assert job_status_model_json2 == job_status_model_json

class TestJobStatusAction():
    """
    Test Class for JobStatusAction
    """

    def test_job_status_action_serialization(self):
        """
        Test serialization/deserialization for JobStatusAction
        """

        # Construct a json representation of a JobStatusAction model
        job_status_action_model_json = {}
        job_status_action_model_json['action_name'] = 'testString'
        job_status_action_model_json['status_code'] = 'job_pending'
        job_status_action_model_json['status_message'] = 'testString'
        job_status_action_model_json['bastion_status_code'] = 'none'
        job_status_action_model_json['bastion_status_message'] = 'testString'
        job_status_action_model_json['targets_status_code'] = 'none'
        job_status_action_model_json['targets_status_message'] = 'testString'
        job_status_action_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobStatusAction by calling from_dict on the json representation
        job_status_action_model = JobStatusAction.from_dict(job_status_action_model_json)
        assert job_status_action_model != False

        # Construct a model instance of JobStatusAction by calling from_dict on the json representation
        job_status_action_model_dict = JobStatusAction.from_dict(job_status_action_model_json).__dict__
        job_status_action_model2 = JobStatusAction(**job_status_action_model_dict)

        # Verify the model instances are equivalent
        assert job_status_action_model == job_status_action_model2

        # Convert model instance back to dict and verify no loss of data
        job_status_action_model_json2 = job_status_action_model.to_dict()
        assert job_status_action_model_json2 == job_status_action_model_json

class TestJobStatusFlow():
    """
    Test Class for JobStatusFlow
    """

    def test_job_status_flow_serialization(self):
        """
        Test serialization/deserialization for JobStatusFlow
        """

        # Construct dict forms of any model objects needed in order to build this model.

        job_status_workitem_model = {} # JobStatusWorkitem
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobStatusFlow model
        job_status_flow_model_json = {}
        job_status_flow_model_json['flow_id'] = 'testString'
        job_status_flow_model_json['flow_name'] = 'testString'
        job_status_flow_model_json['status_code'] = 'job_pending'
        job_status_flow_model_json['status_message'] = 'testString'
        job_status_flow_model_json['workitems'] = [job_status_workitem_model]
        job_status_flow_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobStatusFlow by calling from_dict on the json representation
        job_status_flow_model = JobStatusFlow.from_dict(job_status_flow_model_json)
        assert job_status_flow_model != False

        # Construct a model instance of JobStatusFlow by calling from_dict on the json representation
        job_status_flow_model_dict = JobStatusFlow.from_dict(job_status_flow_model_json).__dict__
        job_status_flow_model2 = JobStatusFlow(**job_status_flow_model_dict)

        # Verify the model instances are equivalent
        assert job_status_flow_model == job_status_flow_model2

        # Convert model instance back to dict and verify no loss of data
        job_status_flow_model_json2 = job_status_flow_model.to_dict()
        assert job_status_flow_model_json2 == job_status_flow_model_json

class TestJobStatusSchematicsResources():
    """
    Test Class for JobStatusSchematicsResources
    """

    def test_job_status_schematics_resources_serialization(self):
        """
        Test serialization/deserialization for JobStatusSchematicsResources
        """

        # Construct a json representation of a JobStatusSchematicsResources model
        job_status_schematics_resources_model_json = {}
        job_status_schematics_resources_model_json['status_code'] = 'job_pending'
        job_status_schematics_resources_model_json['status_message'] = 'testString'
        job_status_schematics_resources_model_json['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobStatusSchematicsResources by calling from_dict on the json representation
        job_status_schematics_resources_model = JobStatusSchematicsResources.from_dict(job_status_schematics_resources_model_json)
        assert job_status_schematics_resources_model != False

        # Construct a model instance of JobStatusSchematicsResources by calling from_dict on the json representation
        job_status_schematics_resources_model_dict = JobStatusSchematicsResources.from_dict(job_status_schematics_resources_model_json).__dict__
        job_status_schematics_resources_model2 = JobStatusSchematicsResources(**job_status_schematics_resources_model_dict)

        # Verify the model instances are equivalent
        assert job_status_schematics_resources_model == job_status_schematics_resources_model2

        # Convert model instance back to dict and verify no loss of data
        job_status_schematics_resources_model_json2 = job_status_schematics_resources_model.to_dict()
        assert job_status_schematics_resources_model_json2 == job_status_schematics_resources_model_json

class TestJobStatusSystem():
    """
    Test Class for JobStatusSystem
    """

    def test_job_status_system_serialization(self):
        """
        Test serialization/deserialization for JobStatusSystem
        """

        # Construct dict forms of any model objects needed in order to build this model.

        job_status_schematics_resources_model = {} # JobStatusSchematicsResources
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobStatusSystem model
        job_status_system_model_json = {}
        job_status_system_model_json['system_status_message'] = 'testString'
        job_status_system_model_json['system_status_code'] = 'job_pending'
        job_status_system_model_json['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobStatusSystem by calling from_dict on the json representation
        job_status_system_model = JobStatusSystem.from_dict(job_status_system_model_json)
        assert job_status_system_model != False

        # Construct a model instance of JobStatusSystem by calling from_dict on the json representation
        job_status_system_model_dict = JobStatusSystem.from_dict(job_status_system_model_json).__dict__
        job_status_system_model2 = JobStatusSystem(**job_status_system_model_dict)

        # Verify the model instances are equivalent
        assert job_status_system_model == job_status_system_model2

        # Convert model instance back to dict and verify no loss of data
        job_status_system_model_json2 = job_status_system_model.to_dict()
        assert job_status_system_model_json2 == job_status_system_model_json

class TestJobStatusTemplate():
    """
    Test Class for JobStatusTemplate
    """

    def test_job_status_template_serialization(self):
        """
        Test serialization/deserialization for JobStatusTemplate
        """

        # Construct a json representation of a JobStatusTemplate model
        job_status_template_model_json = {}
        job_status_template_model_json['template_id'] = 'testString'
        job_status_template_model_json['template_name'] = 'testString'
        job_status_template_model_json['flow_index'] = 38
        job_status_template_model_json['status_code'] = 'job_pending'
        job_status_template_model_json['status_message'] = 'testString'
        job_status_template_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobStatusTemplate by calling from_dict on the json representation
        job_status_template_model = JobStatusTemplate.from_dict(job_status_template_model_json)
        assert job_status_template_model != False

        # Construct a model instance of JobStatusTemplate by calling from_dict on the json representation
        job_status_template_model_dict = JobStatusTemplate.from_dict(job_status_template_model_json).__dict__
        job_status_template_model2 = JobStatusTemplate(**job_status_template_model_dict)

        # Verify the model instances are equivalent
        assert job_status_template_model == job_status_template_model2

        # Convert model instance back to dict and verify no loss of data
        job_status_template_model_json2 = job_status_template_model.to_dict()
        assert job_status_template_model_json2 == job_status_template_model_json

class TestJobStatusWorkitem():
    """
    Test Class for JobStatusWorkitem
    """

    def test_job_status_workitem_serialization(self):
        """
        Test serialization/deserialization for JobStatusWorkitem
        """

        # Construct a json representation of a JobStatusWorkitem model
        job_status_workitem_model_json = {}
        job_status_workitem_model_json['workspace_id'] = 'testString'
        job_status_workitem_model_json['workspace_name'] = 'testString'
        job_status_workitem_model_json['job_id'] = 'testString'
        job_status_workitem_model_json['status_code'] = 'job_pending'
        job_status_workitem_model_json['status_message'] = 'testString'
        job_status_workitem_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobStatusWorkitem by calling from_dict on the json representation
        job_status_workitem_model = JobStatusWorkitem.from_dict(job_status_workitem_model_json)
        assert job_status_workitem_model != False

        # Construct a model instance of JobStatusWorkitem by calling from_dict on the json representation
        job_status_workitem_model_dict = JobStatusWorkitem.from_dict(job_status_workitem_model_json).__dict__
        job_status_workitem_model2 = JobStatusWorkitem(**job_status_workitem_model_dict)

        # Verify the model instances are equivalent
        assert job_status_workitem_model == job_status_workitem_model2

        # Convert model instance back to dict and verify no loss of data
        job_status_workitem_model_json2 = job_status_workitem_model.to_dict()
        assert job_status_workitem_model_json2 == job_status_workitem_model_json

class TestJobStatusWorkspace():
    """
    Test Class for JobStatusWorkspace
    """

    def test_job_status_workspace_serialization(self):
        """
        Test serialization/deserialization for JobStatusWorkspace
        """

        # Construct dict forms of any model objects needed in order to build this model.

        job_status_workitem_model = {} # JobStatusWorkitem
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        job_status_flow_model = {} # JobStatusFlow
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a JobStatusWorkspace model
        job_status_workspace_model_json = {}
        job_status_workspace_model_json['workspace_name'] = 'testString'
        job_status_workspace_model_json['status_code'] = 'job_pending'
        job_status_workspace_model_json['status_message'] = 'testString'
        job_status_workspace_model_json['flow_status'] = job_status_flow_model
        job_status_workspace_model_json['template_status'] = [job_status_template_model]
        job_status_workspace_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobStatusWorkspace by calling from_dict on the json representation
        job_status_workspace_model = JobStatusWorkspace.from_dict(job_status_workspace_model_json)
        assert job_status_workspace_model != False

        # Construct a model instance of JobStatusWorkspace by calling from_dict on the json representation
        job_status_workspace_model_dict = JobStatusWorkspace.from_dict(job_status_workspace_model_json).__dict__
        job_status_workspace_model2 = JobStatusWorkspace(**job_status_workspace_model_dict)

        # Verify the model instances are equivalent
        assert job_status_workspace_model == job_status_workspace_model2

        # Convert model instance back to dict and verify no loss of data
        job_status_workspace_model_json2 = job_status_workspace_model.to_dict()
        assert job_status_workspace_model_json2 == job_status_workspace_model_json

class TestJobStatusWorkspaceTemplateFlow():
    """
    Test Class for JobStatusWorkspaceTemplateFlow
    """

    def test_job_status_workspace_template_flow_serialization(self):
        """
        Test serialization/deserialization for JobStatusWorkspaceTemplateFlow
        """

        # Construct a json representation of a JobStatusWorkspaceTemplateFlow model
        job_status_workspace_template_flow_model_json = {}
        job_status_workspace_template_flow_model_json['flow_id'] = 'testString'
        job_status_workspace_template_flow_model_json['flow_name'] = 'testString'
        job_status_workspace_template_flow_model_json['status_code'] = 'job_pending'
        job_status_workspace_template_flow_model_json['status_message'] = 'testString'
        job_status_workspace_template_flow_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_template_flow_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of JobStatusWorkspaceTemplateFlow by calling from_dict on the json representation
        job_status_workspace_template_flow_model = JobStatusWorkspaceTemplateFlow.from_dict(job_status_workspace_template_flow_model_json)
        assert job_status_workspace_template_flow_model != False

        # Construct a model instance of JobStatusWorkspaceTemplateFlow by calling from_dict on the json representation
        job_status_workspace_template_flow_model_dict = JobStatusWorkspaceTemplateFlow.from_dict(job_status_workspace_template_flow_model_json).__dict__
        job_status_workspace_template_flow_model2 = JobStatusWorkspaceTemplateFlow(**job_status_workspace_template_flow_model_dict)

        # Verify the model instances are equivalent
        assert job_status_workspace_template_flow_model == job_status_workspace_template_flow_model2

        # Convert model instance back to dict and verify no loss of data
        job_status_workspace_template_flow_model_json2 = job_status_workspace_template_flow_model.to_dict()
        assert job_status_workspace_template_flow_model_json2 == job_status_workspace_template_flow_model_json

class TestKMSDiscovery():
    """
    Test Class for KMSDiscovery
    """

    def test_kms_discovery_serialization(self):
        """
        Test serialization/deserialization for KMSDiscovery
        """

        # Construct dict forms of any model objects needed in order to build this model.

        kms_instances_keys_model = {} # KMSInstancesKeys
        kms_instances_keys_model['name'] = 'testString'
        kms_instances_keys_model['crn'] = 'testString'
        kms_instances_keys_model['error'] = 'testString'
        kms_instances_keys_model['foo'] = { 'foo': 'bar' }

        kms_instances_model = {} # KMSInstances
        kms_instances_model['location'] = 'testString'
        kms_instances_model['encryption_scheme'] = 'testString'
        kms_instances_model['resource_group'] = 'testString'
        kms_instances_model['kms_crn'] = 'testString'
        kms_instances_model['kms_name'] = 'testString'
        kms_instances_model['kms_private_endpoint'] = 'testString'
        kms_instances_model['kms_public_endpoint'] = 'testString'
        kms_instances_model['keys'] = [kms_instances_keys_model]
        kms_instances_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a KMSDiscovery model
        kms_discovery_model_json = {}
        kms_discovery_model_json['total_count'] = 26
        kms_discovery_model_json['limit'] = 26
        kms_discovery_model_json['offset'] = 26
        kms_discovery_model_json['kms_instances'] = [kms_instances_model]
        kms_discovery_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of KMSDiscovery by calling from_dict on the json representation
        kms_discovery_model = KMSDiscovery.from_dict(kms_discovery_model_json)
        assert kms_discovery_model != False

        # Construct a model instance of KMSDiscovery by calling from_dict on the json representation
        kms_discovery_model_dict = KMSDiscovery.from_dict(kms_discovery_model_json).__dict__
        kms_discovery_model2 = KMSDiscovery(**kms_discovery_model_dict)

        # Verify the model instances are equivalent
        assert kms_discovery_model == kms_discovery_model2

        # Convert model instance back to dict and verify no loss of data
        kms_discovery_model_json2 = kms_discovery_model.to_dict()
        assert kms_discovery_model_json2 == kms_discovery_model_json

class TestKMSInstances():
    """
    Test Class for KMSInstances
    """

    def test_kms_instances_serialization(self):
        """
        Test serialization/deserialization for KMSInstances
        """

        # Construct dict forms of any model objects needed in order to build this model.

        kms_instances_keys_model = {} # KMSInstancesKeys
        kms_instances_keys_model['name'] = 'testString'
        kms_instances_keys_model['crn'] = 'testString'
        kms_instances_keys_model['error'] = 'testString'
        kms_instances_keys_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a KMSInstances model
        kms_instances_model_json = {}
        kms_instances_model_json['location'] = 'testString'
        kms_instances_model_json['encryption_scheme'] = 'testString'
        kms_instances_model_json['resource_group'] = 'testString'
        kms_instances_model_json['kms_crn'] = 'testString'
        kms_instances_model_json['kms_name'] = 'testString'
        kms_instances_model_json['kms_private_endpoint'] = 'testString'
        kms_instances_model_json['kms_public_endpoint'] = 'testString'
        kms_instances_model_json['keys'] = [kms_instances_keys_model]
        kms_instances_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of KMSInstances by calling from_dict on the json representation
        kms_instances_model = KMSInstances.from_dict(kms_instances_model_json)
        assert kms_instances_model != False

        # Construct a model instance of KMSInstances by calling from_dict on the json representation
        kms_instances_model_dict = KMSInstances.from_dict(kms_instances_model_json).__dict__
        kms_instances_model2 = KMSInstances(**kms_instances_model_dict)

        # Verify the model instances are equivalent
        assert kms_instances_model == kms_instances_model2

        # Convert model instance back to dict and verify no loss of data
        kms_instances_model_json2 = kms_instances_model.to_dict()
        assert kms_instances_model_json2 == kms_instances_model_json

class TestKMSInstancesKeys():
    """
    Test Class for KMSInstancesKeys
    """

    def test_kms_instances_keys_serialization(self):
        """
        Test serialization/deserialization for KMSInstancesKeys
        """

        # Construct a json representation of a KMSInstancesKeys model
        kms_instances_keys_model_json = {}
        kms_instances_keys_model_json['name'] = 'testString'
        kms_instances_keys_model_json['crn'] = 'testString'
        kms_instances_keys_model_json['error'] = 'testString'
        kms_instances_keys_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of KMSInstancesKeys by calling from_dict on the json representation
        kms_instances_keys_model = KMSInstancesKeys.from_dict(kms_instances_keys_model_json)
        assert kms_instances_keys_model != False

        # Construct a model instance of KMSInstancesKeys by calling from_dict on the json representation
        kms_instances_keys_model_dict = KMSInstancesKeys.from_dict(kms_instances_keys_model_json).__dict__
        kms_instances_keys_model2 = KMSInstancesKeys(**kms_instances_keys_model_dict)

        # Verify the model instances are equivalent
        assert kms_instances_keys_model == kms_instances_keys_model2

        # Convert model instance back to dict and verify no loss of data
        kms_instances_keys_model_json2 = kms_instances_keys_model.to_dict()
        assert kms_instances_keys_model_json2 == kms_instances_keys_model_json

class TestKMSSettings():
    """
    Test Class for KMSSettings
    """

    def test_kms_settings_serialization(self):
        """
        Test serialization/deserialization for KMSSettings
        """

        # Construct dict forms of any model objects needed in order to build this model.

        kms_settings_primary_crk_model = {} # KMSSettingsPrimaryCrk
        kms_settings_primary_crk_model['kms_name'] = 'testString'
        kms_settings_primary_crk_model['kms_private_endpoint'] = 'testString'
        kms_settings_primary_crk_model['key_crn'] = 'testString'
        kms_settings_primary_crk_model['foo'] = { 'foo': 'bar' }

        kms_settings_secondary_crk_model = {} # KMSSettingsSecondaryCrk
        kms_settings_secondary_crk_model['kms_name'] = 'testString'
        kms_settings_secondary_crk_model['kms_private_endpoint'] = 'testString'
        kms_settings_secondary_crk_model['key_crn'] = 'testString'
        kms_settings_secondary_crk_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a KMSSettings model
        kms_settings_model_json = {}
        kms_settings_model_json['location'] = 'testString'
        kms_settings_model_json['encryption_scheme'] = 'testString'
        kms_settings_model_json['resource_group'] = 'testString'
        kms_settings_model_json['primary_crk'] = kms_settings_primary_crk_model
        kms_settings_model_json['secondary_crk'] = kms_settings_secondary_crk_model
        kms_settings_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of KMSSettings by calling from_dict on the json representation
        kms_settings_model = KMSSettings.from_dict(kms_settings_model_json)
        assert kms_settings_model != False

        # Construct a model instance of KMSSettings by calling from_dict on the json representation
        kms_settings_model_dict = KMSSettings.from_dict(kms_settings_model_json).__dict__
        kms_settings_model2 = KMSSettings(**kms_settings_model_dict)

        # Verify the model instances are equivalent
        assert kms_settings_model == kms_settings_model2

        # Convert model instance back to dict and verify no loss of data
        kms_settings_model_json2 = kms_settings_model.to_dict()
        assert kms_settings_model_json2 == kms_settings_model_json

class TestKMSSettingsPrimaryCrk():
    """
    Test Class for KMSSettingsPrimaryCrk
    """

    def test_kms_settings_primary_crk_serialization(self):
        """
        Test serialization/deserialization for KMSSettingsPrimaryCrk
        """

        # Construct a json representation of a KMSSettingsPrimaryCrk model
        kms_settings_primary_crk_model_json = {}
        kms_settings_primary_crk_model_json['kms_name'] = 'testString'
        kms_settings_primary_crk_model_json['kms_private_endpoint'] = 'testString'
        kms_settings_primary_crk_model_json['key_crn'] = 'testString'
        kms_settings_primary_crk_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of KMSSettingsPrimaryCrk by calling from_dict on the json representation
        kms_settings_primary_crk_model = KMSSettingsPrimaryCrk.from_dict(kms_settings_primary_crk_model_json)
        assert kms_settings_primary_crk_model != False

        # Construct a model instance of KMSSettingsPrimaryCrk by calling from_dict on the json representation
        kms_settings_primary_crk_model_dict = KMSSettingsPrimaryCrk.from_dict(kms_settings_primary_crk_model_json).__dict__
        kms_settings_primary_crk_model2 = KMSSettingsPrimaryCrk(**kms_settings_primary_crk_model_dict)

        # Verify the model instances are equivalent
        assert kms_settings_primary_crk_model == kms_settings_primary_crk_model2

        # Convert model instance back to dict and verify no loss of data
        kms_settings_primary_crk_model_json2 = kms_settings_primary_crk_model.to_dict()
        assert kms_settings_primary_crk_model_json2 == kms_settings_primary_crk_model_json

class TestKMSSettingsSecondaryCrk():
    """
    Test Class for KMSSettingsSecondaryCrk
    """

    def test_kms_settings_secondary_crk_serialization(self):
        """
        Test serialization/deserialization for KMSSettingsSecondaryCrk
        """

        # Construct a json representation of a KMSSettingsSecondaryCrk model
        kms_settings_secondary_crk_model_json = {}
        kms_settings_secondary_crk_model_json['kms_name'] = 'testString'
        kms_settings_secondary_crk_model_json['kms_private_endpoint'] = 'testString'
        kms_settings_secondary_crk_model_json['key_crn'] = 'testString'
        kms_settings_secondary_crk_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of KMSSettingsSecondaryCrk by calling from_dict on the json representation
        kms_settings_secondary_crk_model = KMSSettingsSecondaryCrk.from_dict(kms_settings_secondary_crk_model_json)
        assert kms_settings_secondary_crk_model != False

        # Construct a model instance of KMSSettingsSecondaryCrk by calling from_dict on the json representation
        kms_settings_secondary_crk_model_dict = KMSSettingsSecondaryCrk.from_dict(kms_settings_secondary_crk_model_json).__dict__
        kms_settings_secondary_crk_model2 = KMSSettingsSecondaryCrk(**kms_settings_secondary_crk_model_dict)

        # Verify the model instances are equivalent
        assert kms_settings_secondary_crk_model == kms_settings_secondary_crk_model2

        # Convert model instance back to dict and verify no loss of data
        kms_settings_secondary_crk_model_json2 = kms_settings_secondary_crk_model.to_dict()
        assert kms_settings_secondary_crk_model_json2 == kms_settings_secondary_crk_model_json

class TestOrderItemConfiguration():
    """
    Test Class for OrderItemConfiguration
    """

    def test_order_item_configuration_serialization(self):
        """
        Test serialization/deserialization for OrderItemConfiguration
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        target_request_model = {} # TargetRequest
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        service_mapping_rule_model = {} # ServiceMappingRule
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        service_variable_data_model = {} # ServiceVariableData
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        sku_user_state_model = {} # SKUUserState
        sku_user_state_model['state'] = 'testString'
        sku_user_state_model['set_by'] = 'testString'
        sku_user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        sku_user_state_model['foo'] = { 'foo': 'bar' }

        item_sku_model = {} # ItemSKU
        item_sku_model['sku_id'] = 'testString'
        item_sku_model['sku_type'] = 'testString'
        item_sku_model['sku_sys_lock'] = system_lock_model
        item_sku_model['sku_user_state'] = sku_user_state_model
        item_sku_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a OrderItemConfiguration model
        order_item_configuration_model_json = {}
        order_item_configuration_model_json['name'] = 'AWS Satellite'
        order_item_configuration_model_json['description'] = 'Create satellite location in AWS'
        order_item_configuration_model_json['inputs'] = [variable_data_model]
        order_item_configuration_model_json['settings'] = [variable_data_model]
        order_item_configuration_model_json['outputs'] = [variable_data_model]
        order_item_configuration_model_json['target'] = target_request_model
        order_item_configuration_model_json['operation'] = 'install'
        order_item_configuration_model_json['service_data'] = [service_variable_data_model]
        order_item_configuration_model_json['catalog_id'] = 'testString'
        order_item_configuration_model_json['offering_id'] = 'testString'
        order_item_configuration_model_json['owning_account'] = 'testString'
        order_item_configuration_model_json['owning_account_crn'] = 'testString'
        order_item_configuration_model_json['offering_kind_id'] = 'testString'
        order_item_configuration_model_json['offering_target_kind'] = 'testString'
        order_item_configuration_model_json['offering_version_id'] = 'testString'
        order_item_configuration_model_json['offering_kind'] = 'testString'
        order_item_configuration_model_json['offering_fulfilment_kind'] = 'testString'
        order_item_configuration_model_json['offering_version'] = 'testString'
        order_item_configuration_model_json['offering_provisioner_url'] = 'testString'
        order_item_configuration_model_json['offering_provisioner_ssh'] = 'testString'
        order_item_configuration_model_json['offering_provisioner_working_directory'] = 'testString'
        order_item_configuration_model_json['item_sku'] = item_sku_model
        order_item_configuration_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of OrderItemConfiguration by calling from_dict on the json representation
        order_item_configuration_model = OrderItemConfiguration.from_dict(order_item_configuration_model_json)
        assert order_item_configuration_model != False

        # Construct a model instance of OrderItemConfiguration by calling from_dict on the json representation
        order_item_configuration_model_dict = OrderItemConfiguration.from_dict(order_item_configuration_model_json).__dict__
        order_item_configuration_model2 = OrderItemConfiguration(**order_item_configuration_model_dict)

        # Verify the model instances are equivalent
        assert order_item_configuration_model == order_item_configuration_model2

        # Convert model instance back to dict and verify no loss of data
        order_item_configuration_model_json2 = order_item_configuration_model.to_dict()
        assert order_item_configuration_model_json2 == order_item_configuration_model_json

class TestOutputVariableDataList():
    """
    Test Class for OutputVariableDataList
    """

    def test_output_variable_data_list_serialization(self):
        """
        Test serialization/deserialization for OutputVariableDataList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a OutputVariableDataList model
        output_variable_data_list_model_json = {}
        output_variable_data_list_model_json['total_count'] = 26
        output_variable_data_list_model_json['limit'] = 26
        output_variable_data_list_model_json['offset'] = 26
        output_variable_data_list_model_json['outputs'] = [variable_data_model]
        output_variable_data_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of OutputVariableDataList by calling from_dict on the json representation
        output_variable_data_list_model = OutputVariableDataList.from_dict(output_variable_data_list_model_json)
        assert output_variable_data_list_model != False

        # Construct a model instance of OutputVariableDataList by calling from_dict on the json representation
        output_variable_data_list_model_dict = OutputVariableDataList.from_dict(output_variable_data_list_model_json).__dict__
        output_variable_data_list_model2 = OutputVariableDataList(**output_variable_data_list_model_dict)

        # Verify the model instances are equivalent
        assert output_variable_data_list_model == output_variable_data_list_model2

        # Convert model instance back to dict and verify no loss of data
        output_variable_data_list_model_json2 = output_variable_data_list_model.to_dict()
        assert output_variable_data_list_model_json2 == output_variable_data_list_model_json

class TestPrivateCluster():
    """
    Test Class for PrivateCluster
    """

    def test_private_cluster_serialization(self):
        """
        Test serialization/deserialization for PrivateCluster
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a PrivateCluster model
        private_cluster_model_json = {}
        private_cluster_model_json['cluster_id'] = 'testString'
        private_cluster_model_json['kube_config'] = 'testString'
        private_cluster_model_json['tags'] = ['testString']
        private_cluster_model_json['user_state'] = user_state_model
        private_cluster_model_json['registered_by'] = 'testString'
        private_cluster_model_json['registered_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model_json['updated_by'] = 'testString'
        private_cluster_model_json['sys_lock'] = system_lock_model
        private_cluster_model_json['cluster_health'] = 'active'
        private_cluster_model_json['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of PrivateCluster by calling from_dict on the json representation
        private_cluster_model = PrivateCluster.from_dict(private_cluster_model_json)
        assert private_cluster_model != False

        # Construct a model instance of PrivateCluster by calling from_dict on the json representation
        private_cluster_model_dict = PrivateCluster.from_dict(private_cluster_model_json).__dict__
        private_cluster_model2 = PrivateCluster(**private_cluster_model_dict)

        # Verify the model instances are equivalent
        assert private_cluster_model == private_cluster_model2

        # Convert model instance back to dict and verify no loss of data
        private_cluster_model_json2 = private_cluster_model.to_dict()
        assert private_cluster_model_json2 == private_cluster_model_json

class TestPrivateClusterList():
    """
    Test Class for PrivateClusterList
    """

    def test_private_cluster_list_serialization(self):
        """
        Test serialization/deserialization for PrivateClusterList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        private_cluster_model = {} # PrivateCluster
        private_cluster_model['cluster_id'] = 'testString'
        private_cluster_model['kube_config'] = 'testString'
        private_cluster_model['tags'] = ['testString']
        private_cluster_model['user_state'] = user_state_model
        private_cluster_model['registered_by'] = 'testString'
        private_cluster_model['registered_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model['updated_by'] = 'testString'
        private_cluster_model['sys_lock'] = system_lock_model
        private_cluster_model['cluster_health'] = 'active'
        private_cluster_model['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        private_cluster_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a PrivateClusterList model
        private_cluster_list_model_json = {}
        private_cluster_list_model_json['total_count'] = 26
        private_cluster_list_model_json['limit'] = 26
        private_cluster_list_model_json['offset'] = 26
        private_cluster_list_model_json['clusters'] = [private_cluster_model]
        private_cluster_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of PrivateClusterList by calling from_dict on the json representation
        private_cluster_list_model = PrivateClusterList.from_dict(private_cluster_list_model_json)
        assert private_cluster_list_model != False

        # Construct a model instance of PrivateClusterList by calling from_dict on the json representation
        private_cluster_list_model_dict = PrivateClusterList.from_dict(private_cluster_list_model_json).__dict__
        private_cluster_list_model2 = PrivateClusterList(**private_cluster_list_model_dict)

        # Verify the model instances are equivalent
        assert private_cluster_list_model == private_cluster_list_model2

        # Convert model instance back to dict and verify no loss of data
        private_cluster_list_model_json2 = private_cluster_list_model.to_dict()
        assert private_cluster_list_model_json2 == private_cluster_list_model_json

class TestResourceQuery():
    """
    Test Class for ResourceQuery
    """

    def test_resource_query_serialization(self):
        """
        Test serialization/deserialization for ResourceQuery
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_query_param_model = {} # ResourceQueryParam
        resource_query_param_model['name'] = 'testString'
        resource_query_param_model['value'] = 'testString'
        resource_query_param_model['description'] = 'testString'
        resource_query_param_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ResourceQuery model
        resource_query_model_json = {}
        resource_query_model_json['query_type'] = 'workspaces'
        resource_query_model_json['query_condition'] = [resource_query_param_model]
        resource_query_model_json['query_select'] = ['testString']
        resource_query_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ResourceQuery by calling from_dict on the json representation
        resource_query_model = ResourceQuery.from_dict(resource_query_model_json)
        assert resource_query_model != False

        # Construct a model instance of ResourceQuery by calling from_dict on the json representation
        resource_query_model_dict = ResourceQuery.from_dict(resource_query_model_json).__dict__
        resource_query_model2 = ResourceQuery(**resource_query_model_dict)

        # Verify the model instances are equivalent
        assert resource_query_model == resource_query_model2

        # Convert model instance back to dict and verify no loss of data
        resource_query_model_json2 = resource_query_model.to_dict()
        assert resource_query_model_json2 == resource_query_model_json

class TestResourceQueryDefinition():
    """
    Test Class for ResourceQueryDefinition
    """

    def test_resource_query_definition_serialization(self):
        """
        Test serialization/deserialization for ResourceQueryDefinition
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_query_param_model = {} # ResourceQueryParam
        resource_query_param_model['name'] = 'testString'
        resource_query_param_model['value'] = 'testString'
        resource_query_param_model['description'] = 'testString'
        resource_query_param_model['foo'] = { 'foo': 'bar' }

        resource_query_model = {} # ResourceQuery
        resource_query_model['query_type'] = 'workspaces'
        resource_query_model['query_condition'] = [resource_query_param_model]
        resource_query_model['query_select'] = ['testString']
        resource_query_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ResourceQueryDefinition model
        resource_query_definition_model_json = {}
        resource_query_definition_model_json['type'] = 'vsi'
        resource_query_definition_model_json['name'] = 'testString'
        resource_query_definition_model_json['queries'] = [resource_query_model]
        resource_query_definition_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ResourceQueryDefinition by calling from_dict on the json representation
        resource_query_definition_model = ResourceQueryDefinition.from_dict(resource_query_definition_model_json)
        assert resource_query_definition_model != False

        # Construct a model instance of ResourceQueryDefinition by calling from_dict on the json representation
        resource_query_definition_model_dict = ResourceQueryDefinition.from_dict(resource_query_definition_model_json).__dict__
        resource_query_definition_model2 = ResourceQueryDefinition(**resource_query_definition_model_dict)

        # Verify the model instances are equivalent
        assert resource_query_definition_model == resource_query_definition_model2

        # Convert model instance back to dict and verify no loss of data
        resource_query_definition_model_json2 = resource_query_definition_model.to_dict()
        assert resource_query_definition_model_json2 == resource_query_definition_model_json

class TestResourceQueryParam():
    """
    Test Class for ResourceQueryParam
    """

    def test_resource_query_param_serialization(self):
        """
        Test serialization/deserialization for ResourceQueryParam
        """

        # Construct a json representation of a ResourceQueryParam model
        resource_query_param_model_json = {}
        resource_query_param_model_json['name'] = 'testString'
        resource_query_param_model_json['value'] = 'testString'
        resource_query_param_model_json['description'] = 'testString'
        resource_query_param_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ResourceQueryParam by calling from_dict on the json representation
        resource_query_param_model = ResourceQueryParam.from_dict(resource_query_param_model_json)
        assert resource_query_param_model != False

        # Construct a model instance of ResourceQueryParam by calling from_dict on the json representation
        resource_query_param_model_dict = ResourceQueryParam.from_dict(resource_query_param_model_json).__dict__
        resource_query_param_model2 = ResourceQueryParam(**resource_query_param_model_dict)

        # Verify the model instances are equivalent
        assert resource_query_param_model == resource_query_param_model2

        # Convert model instance back to dict and verify no loss of data
        resource_query_param_model_json2 = resource_query_param_model.to_dict()
        assert resource_query_param_model_json2 == resource_query_param_model_json

class TestResourceQueryRecord():
    """
    Test Class for ResourceQueryRecord
    """

    def test_resource_query_record_serialization(self):
        """
        Test serialization/deserialization for ResourceQueryRecord
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_query_param_model = {} # ResourceQueryParam
        resource_query_param_model['name'] = 'testString'
        resource_query_param_model['value'] = 'testString'
        resource_query_param_model['description'] = 'testString'
        resource_query_param_model['foo'] = { 'foo': 'bar' }

        resource_query_model = {} # ResourceQuery
        resource_query_model['query_type'] = 'workspaces'
        resource_query_model['query_condition'] = [resource_query_param_model]
        resource_query_model['query_select'] = ['testString']
        resource_query_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ResourceQueryRecord model
        resource_query_record_model_json = {}
        resource_query_record_model_json['type'] = 'vsi'
        resource_query_record_model_json['name'] = 'testString'
        resource_query_record_model_json['id'] = 'testString'
        resource_query_record_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        resource_query_record_model_json['created_by'] = 'testString'
        resource_query_record_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        resource_query_record_model_json['updated_by'] = 'testString'
        resource_query_record_model_json['queries'] = [resource_query_model]
        resource_query_record_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ResourceQueryRecord by calling from_dict on the json representation
        resource_query_record_model = ResourceQueryRecord.from_dict(resource_query_record_model_json)
        assert resource_query_record_model != False

        # Construct a model instance of ResourceQueryRecord by calling from_dict on the json representation
        resource_query_record_model_dict = ResourceQueryRecord.from_dict(resource_query_record_model_json).__dict__
        resource_query_record_model2 = ResourceQueryRecord(**resource_query_record_model_dict)

        # Verify the model instances are equivalent
        assert resource_query_record_model == resource_query_record_model2

        # Convert model instance back to dict and verify no loss of data
        resource_query_record_model_json2 = resource_query_record_model.to_dict()
        assert resource_query_record_model_json2 == resource_query_record_model_json

class TestResourceQueryRecordList():
    """
    Test Class for ResourceQueryRecordList
    """

    def test_resource_query_record_list_serialization(self):
        """
        Test serialization/deserialization for ResourceQueryRecordList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_query_param_model = {} # ResourceQueryParam
        resource_query_param_model['name'] = 'testString'
        resource_query_param_model['value'] = 'testString'
        resource_query_param_model['description'] = 'testString'
        resource_query_param_model['foo'] = { 'foo': 'bar' }

        resource_query_model = {} # ResourceQuery
        resource_query_model['query_type'] = 'workspaces'
        resource_query_model['query_condition'] = [resource_query_param_model]
        resource_query_model['query_select'] = ['testString']
        resource_query_model['foo'] = { 'foo': 'bar' }

        resource_query_record_model = {} # ResourceQueryRecord
        resource_query_record_model['type'] = 'vsi'
        resource_query_record_model['name'] = 'testString'
        resource_query_record_model['id'] = 'testString'
        resource_query_record_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        resource_query_record_model['created_by'] = 'testString'
        resource_query_record_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        resource_query_record_model['updated_by'] = 'testString'
        resource_query_record_model['queries'] = [resource_query_model]
        resource_query_record_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ResourceQueryRecordList model
        resource_query_record_list_model_json = {}
        resource_query_record_list_model_json['total_count'] = 26
        resource_query_record_list_model_json['limit'] = 26
        resource_query_record_list_model_json['offset'] = 26
        resource_query_record_list_model_json['resource_queries'] = [resource_query_record_model]
        resource_query_record_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ResourceQueryRecordList by calling from_dict on the json representation
        resource_query_record_list_model = ResourceQueryRecordList.from_dict(resource_query_record_list_model_json)
        assert resource_query_record_list_model != False

        # Construct a model instance of ResourceQueryRecordList by calling from_dict on the json representation
        resource_query_record_list_model_dict = ResourceQueryRecordList.from_dict(resource_query_record_list_model_json).__dict__
        resource_query_record_list_model2 = ResourceQueryRecordList(**resource_query_record_list_model_dict)

        # Verify the model instances are equivalent
        assert resource_query_record_list_model == resource_query_record_list_model2

        # Convert model instance back to dict and verify no loss of data
        resource_query_record_list_model_json2 = resource_query_record_list_model.to_dict()
        assert resource_query_record_list_model_json2 == resource_query_record_list_model_json

class TestResourceQueryResponseRecord():
    """
    Test Class for ResourceQueryResponseRecord
    """

    def test_resource_query_response_record_serialization(self):
        """
        Test serialization/deserialization for ResourceQueryResponseRecord
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_query_param_model = {} # ResourceQueryParam
        resource_query_param_model['name'] = 'testString'
        resource_query_param_model['value'] = 'testString'
        resource_query_param_model['description'] = 'testString'
        resource_query_param_model['foo'] = { 'foo': 'bar' }

        resource_query_response_record_query_output_model = {} # ResourceQueryResponseRecordQueryOutput
        resource_query_response_record_query_output_model['name'] = 'testString'
        resource_query_response_record_query_output_model['value'] = 'testString'
        resource_query_response_record_query_output_model['foo'] = { 'foo': 'bar' }

        resource_query_response_record_response_model = {} # ResourceQueryResponseRecordResponse
        resource_query_response_record_response_model['query_type'] = 'workspaces'
        resource_query_response_record_response_model['query_condition'] = [resource_query_param_model]
        resource_query_response_record_response_model['query_select'] = ['testString']
        resource_query_response_record_response_model['query_output'] = [resource_query_response_record_query_output_model]
        resource_query_response_record_response_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ResourceQueryResponseRecord model
        resource_query_response_record_model_json = {}
        resource_query_response_record_model_json['response'] = [resource_query_response_record_response_model]
        resource_query_response_record_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ResourceQueryResponseRecord by calling from_dict on the json representation
        resource_query_response_record_model = ResourceQueryResponseRecord.from_dict(resource_query_response_record_model_json)
        assert resource_query_response_record_model != False

        # Construct a model instance of ResourceQueryResponseRecord by calling from_dict on the json representation
        resource_query_response_record_model_dict = ResourceQueryResponseRecord.from_dict(resource_query_response_record_model_json).__dict__
        resource_query_response_record_model2 = ResourceQueryResponseRecord(**resource_query_response_record_model_dict)

        # Verify the model instances are equivalent
        assert resource_query_response_record_model == resource_query_response_record_model2

        # Convert model instance back to dict and verify no loss of data
        resource_query_response_record_model_json2 = resource_query_response_record_model.to_dict()
        assert resource_query_response_record_model_json2 == resource_query_response_record_model_json

class TestResourceQueryResponseRecordQueryOutput():
    """
    Test Class for ResourceQueryResponseRecordQueryOutput
    """

    def test_resource_query_response_record_query_output_serialization(self):
        """
        Test serialization/deserialization for ResourceQueryResponseRecordQueryOutput
        """

        # Construct a json representation of a ResourceQueryResponseRecordQueryOutput model
        resource_query_response_record_query_output_model_json = {}
        resource_query_response_record_query_output_model_json['name'] = 'testString'
        resource_query_response_record_query_output_model_json['value'] = 'testString'
        resource_query_response_record_query_output_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ResourceQueryResponseRecordQueryOutput by calling from_dict on the json representation
        resource_query_response_record_query_output_model = ResourceQueryResponseRecordQueryOutput.from_dict(resource_query_response_record_query_output_model_json)
        assert resource_query_response_record_query_output_model != False

        # Construct a model instance of ResourceQueryResponseRecordQueryOutput by calling from_dict on the json representation
        resource_query_response_record_query_output_model_dict = ResourceQueryResponseRecordQueryOutput.from_dict(resource_query_response_record_query_output_model_json).__dict__
        resource_query_response_record_query_output_model2 = ResourceQueryResponseRecordQueryOutput(**resource_query_response_record_query_output_model_dict)

        # Verify the model instances are equivalent
        assert resource_query_response_record_query_output_model == resource_query_response_record_query_output_model2

        # Convert model instance back to dict and verify no loss of data
        resource_query_response_record_query_output_model_json2 = resource_query_response_record_query_output_model.to_dict()
        assert resource_query_response_record_query_output_model_json2 == resource_query_response_record_query_output_model_json

class TestResourceQueryResponseRecordResponse():
    """
    Test Class for ResourceQueryResponseRecordResponse
    """

    def test_resource_query_response_record_response_serialization(self):
        """
        Test serialization/deserialization for ResourceQueryResponseRecordResponse
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_query_param_model = {} # ResourceQueryParam
        resource_query_param_model['name'] = 'testString'
        resource_query_param_model['value'] = 'testString'
        resource_query_param_model['description'] = 'testString'
        resource_query_param_model['foo'] = { 'foo': 'bar' }

        resource_query_response_record_query_output_model = {} # ResourceQueryResponseRecordQueryOutput
        resource_query_response_record_query_output_model['name'] = 'testString'
        resource_query_response_record_query_output_model['value'] = 'testString'
        resource_query_response_record_query_output_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ResourceQueryResponseRecordResponse model
        resource_query_response_record_response_model_json = {}
        resource_query_response_record_response_model_json['query_type'] = 'workspaces'
        resource_query_response_record_response_model_json['query_condition'] = [resource_query_param_model]
        resource_query_response_record_response_model_json['query_select'] = ['testString']
        resource_query_response_record_response_model_json['query_output'] = [resource_query_response_record_query_output_model]
        resource_query_response_record_response_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ResourceQueryResponseRecordResponse by calling from_dict on the json representation
        resource_query_response_record_response_model = ResourceQueryResponseRecordResponse.from_dict(resource_query_response_record_response_model_json)
        assert resource_query_response_record_response_model != False

        # Construct a model instance of ResourceQueryResponseRecordResponse by calling from_dict on the json representation
        resource_query_response_record_response_model_dict = ResourceQueryResponseRecordResponse.from_dict(resource_query_response_record_response_model_json).__dict__
        resource_query_response_record_response_model2 = ResourceQueryResponseRecordResponse(**resource_query_response_record_response_model_dict)

        # Verify the model instances are equivalent
        assert resource_query_response_record_response_model == resource_query_response_record_response_model2

        # Convert model instance back to dict and verify no loss of data
        resource_query_response_record_response_model_json2 = resource_query_response_record_response_model.to_dict()
        assert resource_query_response_record_response_model_json2 == resource_query_response_record_response_model_json

class TestSKUUserState():
    """
    Test Class for SKUUserState
    """

    def test_sku_user_state_serialization(self):
        """
        Test serialization/deserialization for SKUUserState
        """

        # Construct a json representation of a SKUUserState model
        sku_user_state_model_json = {}
        sku_user_state_model_json['state'] = 'testString'
        sku_user_state_model_json['set_by'] = 'testString'
        sku_user_state_model_json['set_at'] = '2020-01-28T18:40:40.123456Z'
        sku_user_state_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of SKUUserState by calling from_dict on the json representation
        sku_user_state_model = SKUUserState.from_dict(sku_user_state_model_json)
        assert sku_user_state_model != False

        # Construct a model instance of SKUUserState by calling from_dict on the json representation
        sku_user_state_model_dict = SKUUserState.from_dict(sku_user_state_model_json).__dict__
        sku_user_state_model2 = SKUUserState(**sku_user_state_model_dict)

        # Verify the model instances are equivalent
        assert sku_user_state_model == sku_user_state_model2

        # Convert model instance back to dict and verify no loss of data
        sku_user_state_model_json2 = sku_user_state_model.to_dict()
        assert sku_user_state_model_json2 == sku_user_state_model_json

class TestSchematicsAccessRule():
    """
    Test Class for SchematicsAccessRule
    """

    def test_schematics_access_rule_serialization(self):
        """
        Test serialization/deserialization for SchematicsAccessRule
        """

        # Construct a json representation of a SchematicsAccessRule model
        schematics_access_rule_model_json = {}
        schematics_access_rule_model_json['effect'] = 'allow'
        schematics_access_rule_model_json['command_name'] = 'workspace_plan'
        schematics_access_rule_model_json['command_parameter'] = 'testString'
        schematics_access_rule_model_json['principal'] = 'testString'
        schematics_access_rule_model_json['origin'] = 'workspaces'
        schematics_access_rule_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of SchematicsAccessRule by calling from_dict on the json representation
        schematics_access_rule_model = SchematicsAccessRule.from_dict(schematics_access_rule_model_json)
        assert schematics_access_rule_model != False

        # Construct a model instance of SchematicsAccessRule by calling from_dict on the json representation
        schematics_access_rule_model_dict = SchematicsAccessRule.from_dict(schematics_access_rule_model_json).__dict__
        schematics_access_rule_model2 = SchematicsAccessRule(**schematics_access_rule_model_dict)

        # Verify the model instances are equivalent
        assert schematics_access_rule_model == schematics_access_rule_model2

        # Convert model instance back to dict and verify no loss of data
        schematics_access_rule_model_json2 = schematics_access_rule_model.to_dict()
        assert schematics_access_rule_model_json2 == schematics_access_rule_model_json

class TestSchematicsAccessRuleList():
    """
    Test Class for SchematicsAccessRuleList
    """

    def test_schematics_access_rule_list_serialization(self):
        """
        Test serialization/deserialization for SchematicsAccessRuleList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        schematics_access_rule_model = {} # SchematicsAccessRule
        schematics_access_rule_model['effect'] = 'allow'
        schematics_access_rule_model['command_name'] = 'workspace_plan'
        schematics_access_rule_model['command_parameter'] = 'testString'
        schematics_access_rule_model['principal'] = 'testString'
        schematics_access_rule_model['origin'] = 'workspaces'
        schematics_access_rule_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a SchematicsAccessRuleList model
        schematics_access_rule_list_model_json = {}
        schematics_access_rule_list_model_json['total_count'] = 26
        schematics_access_rule_list_model_json['limit'] = 26
        schematics_access_rule_list_model_json['offset'] = 26
        schematics_access_rule_list_model_json['access_rules'] = [schematics_access_rule_model]
        schematics_access_rule_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of SchematicsAccessRuleList by calling from_dict on the json representation
        schematics_access_rule_list_model = SchematicsAccessRuleList.from_dict(schematics_access_rule_list_model_json)
        assert schematics_access_rule_list_model != False

        # Construct a model instance of SchematicsAccessRuleList by calling from_dict on the json representation
        schematics_access_rule_list_model_dict = SchematicsAccessRuleList.from_dict(schematics_access_rule_list_model_json).__dict__
        schematics_access_rule_list_model2 = SchematicsAccessRuleList(**schematics_access_rule_list_model_dict)

        # Verify the model instances are equivalent
        assert schematics_access_rule_list_model == schematics_access_rule_list_model2

        # Convert model instance back to dict and verify no loss of data
        schematics_access_rule_list_model_json2 = schematics_access_rule_list_model.to_dict()
        assert schematics_access_rule_list_model_json2 == schematics_access_rule_list_model_json

class TestSchematicsInfo():
    """
    Test Class for SchematicsInfo
    """

    def test_schematics_info_serialization(self):
        """
        Test serialization/deserialization for SchematicsInfo
        """

        # Construct dict forms of any model objects needed in order to build this model.

        schematics_runtime_info_model = {} # SchematicsRuntimeInfo
        schematics_runtime_info_model['runtime_image'] = 'testString'
        schematics_runtime_info_model['runtime_properties'] = {}
        schematics_runtime_info_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a SchematicsInfo model
        schematics_info_model_json = {}
        schematics_info_model_json['schematics_version'] = 'testString'
        schematics_info_model_json['schematics_build'] = 'testString'
        schematics_info_model_json['supported_locations'] = ['us-south']
        schematics_info_model_json['supported_templates'] = {}
        schematics_info_model_json['supported_runtimes'] = {}
        schematics_info_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of SchematicsInfo by calling from_dict on the json representation
        schematics_info_model = SchematicsInfo.from_dict(schematics_info_model_json)
        assert schematics_info_model != False

        # Construct a model instance of SchematicsInfo by calling from_dict on the json representation
        schematics_info_model_dict = SchematicsInfo.from_dict(schematics_info_model_json).__dict__
        schematics_info_model2 = SchematicsInfo(**schematics_info_model_dict)

        # Verify the model instances are equivalent
        assert schematics_info_model == schematics_info_model2

        # Convert model instance back to dict and verify no loss of data
        schematics_info_model_json2 = schematics_info_model.to_dict()
        assert schematics_info_model_json2 == schematics_info_model_json

class TestSchematicsLocationsList():
    """
    Test Class for SchematicsLocationsList
    """

    def test_schematics_locations_list_serialization(self):
        """
        Test serialization/deserialization for SchematicsLocationsList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        schematics_locations_lite_model = {} # SchematicsLocationsLite
        schematics_locations_lite_model['region'] = 'testString'
        schematics_locations_lite_model['metro'] = 'testString'
        schematics_locations_lite_model['geography_code'] = 'testString'
        schematics_locations_lite_model['geography'] = 'testString'
        schematics_locations_lite_model['country'] = 'testString'
        schematics_locations_lite_model['kind'] = 'testString'
        schematics_locations_lite_model['paired_region'] = ['testString']
        schematics_locations_lite_model['restricted'] = True
        schematics_locations_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a SchematicsLocationsList model
        schematics_locations_list_model_json = {}
        schematics_locations_list_model_json['locations'] = [schematics_locations_lite_model]
        schematics_locations_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of SchematicsLocationsList by calling from_dict on the json representation
        schematics_locations_list_model = SchematicsLocationsList.from_dict(schematics_locations_list_model_json)
        assert schematics_locations_list_model != False

        # Construct a model instance of SchematicsLocationsList by calling from_dict on the json representation
        schematics_locations_list_model_dict = SchematicsLocationsList.from_dict(schematics_locations_list_model_json).__dict__
        schematics_locations_list_model2 = SchematicsLocationsList(**schematics_locations_list_model_dict)

        # Verify the model instances are equivalent
        assert schematics_locations_list_model == schematics_locations_list_model2

        # Convert model instance back to dict and verify no loss of data
        schematics_locations_list_model_json2 = schematics_locations_list_model.to_dict()
        assert schematics_locations_list_model_json2 == schematics_locations_list_model_json

class TestSchematicsLocationsLite():
    """
    Test Class for SchematicsLocationsLite
    """

    def test_schematics_locations_lite_serialization(self):
        """
        Test serialization/deserialization for SchematicsLocationsLite
        """

        # Construct a json representation of a SchematicsLocationsLite model
        schematics_locations_lite_model_json = {}
        schematics_locations_lite_model_json['region'] = 'testString'
        schematics_locations_lite_model_json['metro'] = 'testString'
        schematics_locations_lite_model_json['geography_code'] = 'testString'
        schematics_locations_lite_model_json['geography'] = 'testString'
        schematics_locations_lite_model_json['country'] = 'testString'
        schematics_locations_lite_model_json['kind'] = 'testString'
        schematics_locations_lite_model_json['paired_region'] = ['testString']
        schematics_locations_lite_model_json['restricted'] = True
        schematics_locations_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of SchematicsLocationsLite by calling from_dict on the json representation
        schematics_locations_lite_model = SchematicsLocationsLite.from_dict(schematics_locations_lite_model_json)
        assert schematics_locations_lite_model != False

        # Construct a model instance of SchematicsLocationsLite by calling from_dict on the json representation
        schematics_locations_lite_model_dict = SchematicsLocationsLite.from_dict(schematics_locations_lite_model_json).__dict__
        schematics_locations_lite_model2 = SchematicsLocationsLite(**schematics_locations_lite_model_dict)

        # Verify the model instances are equivalent
        assert schematics_locations_lite_model == schematics_locations_lite_model2

        # Convert model instance back to dict and verify no loss of data
        schematics_locations_lite_model_json2 = schematics_locations_lite_model.to_dict()
        assert schematics_locations_lite_model_json2 == schematics_locations_lite_model_json

class TestSchematicsRuntimeInfo():
    """
    Test Class for SchematicsRuntimeInfo
    """

    def test_schematics_runtime_info_serialization(self):
        """
        Test serialization/deserialization for SchematicsRuntimeInfo
        """

        # Construct a json representation of a SchematicsRuntimeInfo model
        schematics_runtime_info_model_json = {}
        schematics_runtime_info_model_json['runtime_image'] = 'testString'
        schematics_runtime_info_model_json['runtime_properties'] = {}
        schematics_runtime_info_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of SchematicsRuntimeInfo by calling from_dict on the json representation
        schematics_runtime_info_model = SchematicsRuntimeInfo.from_dict(schematics_runtime_info_model_json)
        assert schematics_runtime_info_model != False

        # Construct a model instance of SchematicsRuntimeInfo by calling from_dict on the json representation
        schematics_runtime_info_model_dict = SchematicsRuntimeInfo.from_dict(schematics_runtime_info_model_json).__dict__
        schematics_runtime_info_model2 = SchematicsRuntimeInfo(**schematics_runtime_info_model_dict)

        # Verify the model instances are equivalent
        assert schematics_runtime_info_model == schematics_runtime_info_model2

        # Convert model instance back to dict and verify no loss of data
        schematics_runtime_info_model_json2 = schematics_runtime_info_model.to_dict()
        assert schematics_runtime_info_model_json2 == schematics_runtime_info_model_json

class TestServiceMappingRule():
    """
    Test Class for ServiceMappingRule
    """

    def test_service_mapping_rule_serialization(self):
        """
        Test serialization/deserialization for ServiceMappingRule
        """

        # Construct a json representation of a ServiceMappingRule model
        service_mapping_rule_model_json = {}
        service_mapping_rule_model_json['type'] = 'testString'
        service_mapping_rule_model_json['input_param_name'] = 'testString'
        service_mapping_rule_model_json['output_param_name'] = 'testString'
        service_mapping_rule_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ServiceMappingRule by calling from_dict on the json representation
        service_mapping_rule_model = ServiceMappingRule.from_dict(service_mapping_rule_model_json)
        assert service_mapping_rule_model != False

        # Construct a model instance of ServiceMappingRule by calling from_dict on the json representation
        service_mapping_rule_model_dict = ServiceMappingRule.from_dict(service_mapping_rule_model_json).__dict__
        service_mapping_rule_model2 = ServiceMappingRule(**service_mapping_rule_model_dict)

        # Verify the model instances are equivalent
        assert service_mapping_rule_model == service_mapping_rule_model2

        # Convert model instance back to dict and verify no loss of data
        service_mapping_rule_model_json2 = service_mapping_rule_model.to_dict()
        assert service_mapping_rule_model_json2 == service_mapping_rule_model_json

class TestServiceVariableData():
    """
    Test Class for ServiceVariableData
    """

    def test_service_variable_data_serialization(self):
        """
        Test serialization/deserialization for ServiceVariableData
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        service_mapping_rule_model = {} # ServiceMappingRule
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a ServiceVariableData model
        service_variable_data_model_json = {}
        service_variable_data_model_json['name'] = 'testString'
        service_variable_data_model_json['value'] = 'testString'
        service_variable_data_model_json['metadata'] = variable_metadata_model
        service_variable_data_model_json['mapping'] = [service_mapping_rule_model]
        service_variable_data_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ServiceVariableData by calling from_dict on the json representation
        service_variable_data_model = ServiceVariableData.from_dict(service_variable_data_model_json)
        assert service_variable_data_model != False

        # Construct a model instance of ServiceVariableData by calling from_dict on the json representation
        service_variable_data_model_dict = ServiceVariableData.from_dict(service_variable_data_model_json).__dict__
        service_variable_data_model2 = ServiceVariableData(**service_variable_data_model_dict)

        # Verify the model instances are equivalent
        assert service_variable_data_model == service_variable_data_model2

        # Convert model instance back to dict and verify no loss of data
        service_variable_data_model_json2 = service_variable_data_model.to_dict()
        assert service_variable_data_model_json2 == service_variable_data_model_json

class TestSystemLock():
    """
    Test Class for SystemLock
    """

    def test_system_lock_serialization(self):
        """
        Test serialization/deserialization for SystemLock
        """

        # Construct a json representation of a SystemLock model
        system_lock_model_json = {}
        system_lock_model_json['sys_locked'] = True
        system_lock_model_json['sys_locked_by'] = 'testString'
        system_lock_model_json['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of SystemLock by calling from_dict on the json representation
        system_lock_model = SystemLock.from_dict(system_lock_model_json)
        assert system_lock_model != False

        # Construct a model instance of SystemLock by calling from_dict on the json representation
        system_lock_model_dict = SystemLock.from_dict(system_lock_model_json).__dict__
        system_lock_model2 = SystemLock(**system_lock_model_dict)

        # Verify the model instances are equivalent
        assert system_lock_model == system_lock_model2

        # Convert model instance back to dict and verify no loss of data
        system_lock_model_json2 = system_lock_model.to_dict()
        assert system_lock_model_json2 == system_lock_model_json

class TestTargetRequest():
    """
    Test Class for TargetRequest
    """

    def test_target_request_serialization(self):
        """
        Test serialization/deserialization for TargetRequest
        """

        # Construct a json representation of a TargetRequest model
        target_request_model_json = {}
        target_request_model_json['cluster_id'] = 'testString'
        target_request_model_json['cluster_name'] = 'testString'
        target_request_model_json['entitlement_key'] = { 'foo': 'bar' }
        target_request_model_json['namespace'] = 'testString'
        target_request_model_json['region'] = 'testString'
        target_request_model_json['resource_group_id'] = 'testString'
        target_request_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TargetRequest by calling from_dict on the json representation
        target_request_model = TargetRequest.from_dict(target_request_model_json)
        assert target_request_model != False

        # Construct a model instance of TargetRequest by calling from_dict on the json representation
        target_request_model_dict = TargetRequest.from_dict(target_request_model_json).__dict__
        target_request_model2 = TargetRequest(**target_request_model_dict)

        # Verify the model instances are equivalent
        assert target_request_model == target_request_model2

        # Convert model instance back to dict and verify no loss of data
        target_request_model_json2 = target_request_model.to_dict()
        assert target_request_model_json2 == target_request_model_json

class TestTemplate():
    """
    Test Class for Template
    """

    def test_template_serialization(self):
        """
        Test serialization/deserialization for Template
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Template model
        template_model_json = {}
        template_model_json['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_model_json['description'] = 'This template provisions clusters in production environment'
        template_model_json['type'] = 'testString'
        template_model_json['user_state'] = user_state_model
        template_model_json['source_type'] = 'local'
        template_model_json['source'] = external_source_model
        template_model_json['source_readme_url'] = 'testString'
        template_model_json['inputs'] = [variable_data_model]
        template_model_json['outputs'] = [variable_data_model]
        template_model_json['settings'] = [variable_data_model]
        template_model_json['inventory'] = 'testString'
        template_model_json['id'] = 'testString'
        template_model_json['source_created_at'] = '2020-01-28T18:40:40.123456Z'
        template_model_json['source_created_by'] = 'testString'
        template_model_json['source_updated_at'] = '2020-01-28T18:40:40.123456Z'
        template_model_json['source_updated_by'] = 'testString'
        template_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        template_model_json['created_by'] = 'testString'
        template_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        template_model_json['updated_by'] = 'testString'
        template_model_json['status'] = job_status_template_model
        template_model_json['sys_lock'] = system_lock_model
        template_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Template by calling from_dict on the json representation
        template_model = Template.from_dict(template_model_json)
        assert template_model != False

        # Construct a model instance of Template by calling from_dict on the json representation
        template_model_dict = Template.from_dict(template_model_json).__dict__
        template_model2 = Template(**template_model_dict)

        # Verify the model instances are equivalent
        assert template_model == template_model2

        # Convert model instance back to dict and verify no loss of data
        template_model_json2 = template_model.to_dict()
        assert template_model_json2 == template_model_json

class TestTemplateCommand():
    """
    Test Class for TemplateCommand
    """

    def test_template_command_serialization(self):
        """
        Test serialization/deserialization for TemplateCommand
        """

        # Construct a json representation of a TemplateCommand model
        template_command_model_json = {}
        template_command_model_json['command'] = 'workspace_plan'
        template_command_model_json['command_options'] = ['testString']
        template_command_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateCommand by calling from_dict on the json representation
        template_command_model = TemplateCommand.from_dict(template_command_model_json)
        assert template_command_model != False

        # Construct a model instance of TemplateCommand by calling from_dict on the json representation
        template_command_model_dict = TemplateCommand.from_dict(template_command_model_json).__dict__
        template_command_model2 = TemplateCommand(**template_command_model_dict)

        # Verify the model instances are equivalent
        assert template_command_model == template_command_model2

        # Convert model instance back to dict and verify no loss of data
        template_command_model_json2 = template_command_model.to_dict()
        assert template_command_model_json2 == template_command_model_json

class TestTemplateFlow():
    """
    Test Class for TemplateFlow
    """

    def test_template_flow_serialization(self):
        """
        Test serialization/deserialization for TemplateFlow
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        template_command_model = {} # TemplateCommand
        template_command_model['command'] = 'workspace_plan'
        template_command_model['command_options'] = ['testString']
        template_command_model['foo'] = { 'foo': 'bar' }

        template_flow_definition_template_operation_model = {} # TemplateFlowDefinitionTemplateOperation
        template_flow_definition_template_operation_model['pre_condition'] = 'testString'
        template_flow_definition_template_operation_model['template_id'] = 'testString'
        template_flow_definition_template_operation_model['override_command'] = template_command_model
        template_flow_definition_template_operation_model['post_condition'] = 'testString'
        template_flow_definition_template_operation_model['on_error'] = 'testString'
        template_flow_definition_template_operation_model['foo'] = { 'foo': 'bar' }

        template_flow_definition_simple_flow_model = {} # TemplateFlowDefinitionSimpleFlow
        template_flow_definition_simple_flow_model['index'] = 38
        template_flow_definition_simple_flow_model['control'] = 'do'
        template_flow_definition_simple_flow_model['template_operation'] = template_flow_definition_template_operation_model
        template_flow_definition_simple_flow_model['foo'] = { 'foo': 'bar' }

        template_flow_definition_model = {} # TemplateFlowDefinition
        template_flow_definition_model['flow_type'] = 'simple'
        template_flow_definition_model['id'] = 'testString'
        template_flow_definition_model['simple_flow'] = [template_flow_definition_simple_flow_model]
        template_flow_definition_model['custom_flow'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        template_flow_definition_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_template_flow_model = {} # JobStatusWorkspaceTemplateFlow
        job_status_workspace_template_flow_model['flow_id'] = 'testString'
        job_status_workspace_template_flow_model['flow_name'] = 'testString'
        job_status_workspace_template_flow_model['status_code'] = 'job_pending'
        job_status_workspace_template_flow_model['status_message'] = 'testString'
        job_status_workspace_template_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_template_flow_model['foo'] = { 'foo': 'bar' }

        template_flow_validation_summary_model = {} # TemplateFlowValidationSummary
        template_flow_validation_summary_model['warning_count'] = 72.5
        template_flow_validation_summary_model['error_count'] = 72.5
        template_flow_validation_summary_model['foo'] = { 'foo': 'bar' }

        template_flow_data_validation_status_model = {} # TemplateFlowDataValidationStatus
        template_flow_data_validation_status_model['log_level'] = 'info'
        template_flow_data_validation_status_model['var_name'] = 'testString'
        template_flow_data_validation_status_model['var_status'] = 'testString'
        template_flow_data_validation_status_model['foo'] = { 'foo': 'bar' }

        template_flow_validation_logs_model = {} # TemplateFlowValidationLogs
        template_flow_validation_logs_model['flow_index'] = 38
        template_flow_validation_logs_model['inputs_status'] = [template_flow_data_validation_status_model]
        template_flow_validation_logs_model['outputs_status'] = [template_flow_data_validation_status_model]
        template_flow_validation_logs_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateFlow model
        template_flow_model_json = {}
        template_flow_model_json['name'] = 'testString'
        template_flow_model_json['version'] = 'testString'
        template_flow_model_json['type'] = 'simple_flow'
        template_flow_model_json['user_state'] = user_state_model
        template_flow_model_json['definition'] = template_flow_definition_model
        template_flow_model_json['id'] = 'testString'
        template_flow_model_json['sys_lock'] = system_lock_model
        template_flow_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        template_flow_model_json['created_by'] = 'testString'
        template_flow_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        template_flow_model_json['updated_by'] = 'testString'
        template_flow_model_json['status'] = job_status_workspace_template_flow_model
        template_flow_model_json['validation_summary'] = template_flow_validation_summary_model
        template_flow_model_json['validation_logs'] = [template_flow_validation_logs_model]
        template_flow_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateFlow by calling from_dict on the json representation
        template_flow_model = TemplateFlow.from_dict(template_flow_model_json)
        assert template_flow_model != False

        # Construct a model instance of TemplateFlow by calling from_dict on the json representation
        template_flow_model_dict = TemplateFlow.from_dict(template_flow_model_json).__dict__
        template_flow_model2 = TemplateFlow(**template_flow_model_dict)

        # Verify the model instances are equivalent
        assert template_flow_model == template_flow_model2

        # Convert model instance back to dict and verify no loss of data
        template_flow_model_json2 = template_flow_model.to_dict()
        assert template_flow_model_json2 == template_flow_model_json

class TestTemplateFlowDataValidationStatus():
    """
    Test Class for TemplateFlowDataValidationStatus
    """

    def test_template_flow_data_validation_status_serialization(self):
        """
        Test serialization/deserialization for TemplateFlowDataValidationStatus
        """

        # Construct a json representation of a TemplateFlowDataValidationStatus model
        template_flow_data_validation_status_model_json = {}
        template_flow_data_validation_status_model_json['log_level'] = 'info'
        template_flow_data_validation_status_model_json['var_name'] = 'testString'
        template_flow_data_validation_status_model_json['var_status'] = 'testString'
        template_flow_data_validation_status_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateFlowDataValidationStatus by calling from_dict on the json representation
        template_flow_data_validation_status_model = TemplateFlowDataValidationStatus.from_dict(template_flow_data_validation_status_model_json)
        assert template_flow_data_validation_status_model != False

        # Construct a model instance of TemplateFlowDataValidationStatus by calling from_dict on the json representation
        template_flow_data_validation_status_model_dict = TemplateFlowDataValidationStatus.from_dict(template_flow_data_validation_status_model_json).__dict__
        template_flow_data_validation_status_model2 = TemplateFlowDataValidationStatus(**template_flow_data_validation_status_model_dict)

        # Verify the model instances are equivalent
        assert template_flow_data_validation_status_model == template_flow_data_validation_status_model2

        # Convert model instance back to dict and verify no loss of data
        template_flow_data_validation_status_model_json2 = template_flow_data_validation_status_model.to_dict()
        assert template_flow_data_validation_status_model_json2 == template_flow_data_validation_status_model_json

class TestTemplateFlowDefinition():
    """
    Test Class for TemplateFlowDefinition
    """

    def test_template_flow_definition_serialization(self):
        """
        Test serialization/deserialization for TemplateFlowDefinition
        """

        # Construct dict forms of any model objects needed in order to build this model.

        template_command_model = {} # TemplateCommand
        template_command_model['command'] = 'workspace_plan'
        template_command_model['command_options'] = ['testString']
        template_command_model['foo'] = { 'foo': 'bar' }

        template_flow_definition_template_operation_model = {} # TemplateFlowDefinitionTemplateOperation
        template_flow_definition_template_operation_model['pre_condition'] = 'testString'
        template_flow_definition_template_operation_model['template_id'] = 'testString'
        template_flow_definition_template_operation_model['override_command'] = template_command_model
        template_flow_definition_template_operation_model['post_condition'] = 'testString'
        template_flow_definition_template_operation_model['on_error'] = 'testString'
        template_flow_definition_template_operation_model['foo'] = { 'foo': 'bar' }

        template_flow_definition_simple_flow_model = {} # TemplateFlowDefinitionSimpleFlow
        template_flow_definition_simple_flow_model['index'] = 38
        template_flow_definition_simple_flow_model['control'] = 'do'
        template_flow_definition_simple_flow_model['template_operation'] = template_flow_definition_template_operation_model
        template_flow_definition_simple_flow_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateFlowDefinition model
        template_flow_definition_model_json = {}
        template_flow_definition_model_json['flow_type'] = 'simple'
        template_flow_definition_model_json['id'] = 'testString'
        template_flow_definition_model_json['simple_flow'] = [template_flow_definition_simple_flow_model]
        template_flow_definition_model_json['custom_flow'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        template_flow_definition_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateFlowDefinition by calling from_dict on the json representation
        template_flow_definition_model = TemplateFlowDefinition.from_dict(template_flow_definition_model_json)
        assert template_flow_definition_model != False

        # Construct a model instance of TemplateFlowDefinition by calling from_dict on the json representation
        template_flow_definition_model_dict = TemplateFlowDefinition.from_dict(template_flow_definition_model_json).__dict__
        template_flow_definition_model2 = TemplateFlowDefinition(**template_flow_definition_model_dict)

        # Verify the model instances are equivalent
        assert template_flow_definition_model == template_flow_definition_model2

        # Convert model instance back to dict and verify no loss of data
        template_flow_definition_model_json2 = template_flow_definition_model.to_dict()
        assert template_flow_definition_model_json2 == template_flow_definition_model_json

class TestTemplateFlowDefinitionSimpleFlow():
    """
    Test Class for TemplateFlowDefinitionSimpleFlow
    """

    def test_template_flow_definition_simple_flow_serialization(self):
        """
        Test serialization/deserialization for TemplateFlowDefinitionSimpleFlow
        """

        # Construct dict forms of any model objects needed in order to build this model.

        template_command_model = {} # TemplateCommand
        template_command_model['command'] = 'workspace_plan'
        template_command_model['command_options'] = ['testString']
        template_command_model['foo'] = { 'foo': 'bar' }

        template_flow_definition_template_operation_model = {} # TemplateFlowDefinitionTemplateOperation
        template_flow_definition_template_operation_model['pre_condition'] = 'testString'
        template_flow_definition_template_operation_model['template_id'] = 'testString'
        template_flow_definition_template_operation_model['override_command'] = template_command_model
        template_flow_definition_template_operation_model['post_condition'] = 'testString'
        template_flow_definition_template_operation_model['on_error'] = 'testString'
        template_flow_definition_template_operation_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateFlowDefinitionSimpleFlow model
        template_flow_definition_simple_flow_model_json = {}
        template_flow_definition_simple_flow_model_json['index'] = 38
        template_flow_definition_simple_flow_model_json['control'] = 'do'
        template_flow_definition_simple_flow_model_json['template_operation'] = template_flow_definition_template_operation_model
        template_flow_definition_simple_flow_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateFlowDefinitionSimpleFlow by calling from_dict on the json representation
        template_flow_definition_simple_flow_model = TemplateFlowDefinitionSimpleFlow.from_dict(template_flow_definition_simple_flow_model_json)
        assert template_flow_definition_simple_flow_model != False

        # Construct a model instance of TemplateFlowDefinitionSimpleFlow by calling from_dict on the json representation
        template_flow_definition_simple_flow_model_dict = TemplateFlowDefinitionSimpleFlow.from_dict(template_flow_definition_simple_flow_model_json).__dict__
        template_flow_definition_simple_flow_model2 = TemplateFlowDefinitionSimpleFlow(**template_flow_definition_simple_flow_model_dict)

        # Verify the model instances are equivalent
        assert template_flow_definition_simple_flow_model == template_flow_definition_simple_flow_model2

        # Convert model instance back to dict and verify no loss of data
        template_flow_definition_simple_flow_model_json2 = template_flow_definition_simple_flow_model.to_dict()
        assert template_flow_definition_simple_flow_model_json2 == template_flow_definition_simple_flow_model_json

class TestTemplateFlowDefinitionTemplateOperation():
    """
    Test Class for TemplateFlowDefinitionTemplateOperation
    """

    def test_template_flow_definition_template_operation_serialization(self):
        """
        Test serialization/deserialization for TemplateFlowDefinitionTemplateOperation
        """

        # Construct dict forms of any model objects needed in order to build this model.

        template_command_model = {} # TemplateCommand
        template_command_model['command'] = 'workspace_plan'
        template_command_model['command_options'] = ['testString']
        template_command_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateFlowDefinitionTemplateOperation model
        template_flow_definition_template_operation_model_json = {}
        template_flow_definition_template_operation_model_json['pre_condition'] = 'testString'
        template_flow_definition_template_operation_model_json['template_id'] = 'testString'
        template_flow_definition_template_operation_model_json['override_command'] = template_command_model
        template_flow_definition_template_operation_model_json['post_condition'] = 'testString'
        template_flow_definition_template_operation_model_json['on_error'] = 'testString'
        template_flow_definition_template_operation_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateFlowDefinitionTemplateOperation by calling from_dict on the json representation
        template_flow_definition_template_operation_model = TemplateFlowDefinitionTemplateOperation.from_dict(template_flow_definition_template_operation_model_json)
        assert template_flow_definition_template_operation_model != False

        # Construct a model instance of TemplateFlowDefinitionTemplateOperation by calling from_dict on the json representation
        template_flow_definition_template_operation_model_dict = TemplateFlowDefinitionTemplateOperation.from_dict(template_flow_definition_template_operation_model_json).__dict__
        template_flow_definition_template_operation_model2 = TemplateFlowDefinitionTemplateOperation(**template_flow_definition_template_operation_model_dict)

        # Verify the model instances are equivalent
        assert template_flow_definition_template_operation_model == template_flow_definition_template_operation_model2

        # Convert model instance back to dict and verify no loss of data
        template_flow_definition_template_operation_model_json2 = template_flow_definition_template_operation_model.to_dict()
        assert template_flow_definition_template_operation_model_json2 == template_flow_definition_template_operation_model_json

class TestTemplateFlowList():
    """
    Test Class for TemplateFlowList
    """

    def test_template_flow_list_serialization(self):
        """
        Test serialization/deserialization for TemplateFlowList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_template_flow_model = {} # JobStatusWorkspaceTemplateFlow
        job_status_workspace_template_flow_model['flow_id'] = 'testString'
        job_status_workspace_template_flow_model['flow_name'] = 'testString'
        job_status_workspace_template_flow_model['status_code'] = 'job_pending'
        job_status_workspace_template_flow_model['status_message'] = 'testString'
        job_status_workspace_template_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_template_flow_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        template_flow_lite_model = {} # TemplateFlowLite
        template_flow_lite_model['id'] = 'testString'
        template_flow_lite_model['name'] = 'testString'
        template_flow_lite_model['version'] = 'testString'
        template_flow_lite_model['type'] = 'simple_flow'
        template_flow_lite_model['user_state'] = user_state_model
        template_flow_lite_model['status'] = job_status_workspace_template_flow_model
        template_flow_lite_model['sys_lock'] = system_lock_model
        template_flow_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        template_flow_lite_model['created_by'] = 'testString'
        template_flow_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        template_flow_lite_model['updated_by'] = 'testString'
        template_flow_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateFlowList model
        template_flow_list_model_json = {}
        template_flow_list_model_json['total_count'] = 26
        template_flow_list_model_json['limit'] = 26
        template_flow_list_model_json['offset'] = 26
        template_flow_list_model_json['flows'] = [template_flow_lite_model]
        template_flow_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateFlowList by calling from_dict on the json representation
        template_flow_list_model = TemplateFlowList.from_dict(template_flow_list_model_json)
        assert template_flow_list_model != False

        # Construct a model instance of TemplateFlowList by calling from_dict on the json representation
        template_flow_list_model_dict = TemplateFlowList.from_dict(template_flow_list_model_json).__dict__
        template_flow_list_model2 = TemplateFlowList(**template_flow_list_model_dict)

        # Verify the model instances are equivalent
        assert template_flow_list_model == template_flow_list_model2

        # Convert model instance back to dict and verify no loss of data
        template_flow_list_model_json2 = template_flow_list_model.to_dict()
        assert template_flow_list_model_json2 == template_flow_list_model_json

class TestTemplateFlowLite():
    """
    Test Class for TemplateFlowLite
    """

    def test_template_flow_lite_serialization(self):
        """
        Test serialization/deserialization for TemplateFlowLite
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_template_flow_model = {} # JobStatusWorkspaceTemplateFlow
        job_status_workspace_template_flow_model['flow_id'] = 'testString'
        job_status_workspace_template_flow_model['flow_name'] = 'testString'
        job_status_workspace_template_flow_model['status_code'] = 'job_pending'
        job_status_workspace_template_flow_model['status_message'] = 'testString'
        job_status_workspace_template_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_template_flow_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateFlowLite model
        template_flow_lite_model_json = {}
        template_flow_lite_model_json['id'] = 'testString'
        template_flow_lite_model_json['name'] = 'testString'
        template_flow_lite_model_json['version'] = 'testString'
        template_flow_lite_model_json['type'] = 'simple_flow'
        template_flow_lite_model_json['user_state'] = user_state_model
        template_flow_lite_model_json['status'] = job_status_workspace_template_flow_model
        template_flow_lite_model_json['sys_lock'] = system_lock_model
        template_flow_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        template_flow_lite_model_json['created_by'] = 'testString'
        template_flow_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        template_flow_lite_model_json['updated_by'] = 'testString'
        template_flow_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateFlowLite by calling from_dict on the json representation
        template_flow_lite_model = TemplateFlowLite.from_dict(template_flow_lite_model_json)
        assert template_flow_lite_model != False

        # Construct a model instance of TemplateFlowLite by calling from_dict on the json representation
        template_flow_lite_model_dict = TemplateFlowLite.from_dict(template_flow_lite_model_json).__dict__
        template_flow_lite_model2 = TemplateFlowLite(**template_flow_lite_model_dict)

        # Verify the model instances are equivalent
        assert template_flow_lite_model == template_flow_lite_model2

        # Convert model instance back to dict and verify no loss of data
        template_flow_lite_model_json2 = template_flow_lite_model.to_dict()
        assert template_flow_lite_model_json2 == template_flow_lite_model_json

class TestTemplateFlowValidationLogs():
    """
    Test Class for TemplateFlowValidationLogs
    """

    def test_template_flow_validation_logs_serialization(self):
        """
        Test serialization/deserialization for TemplateFlowValidationLogs
        """

        # Construct dict forms of any model objects needed in order to build this model.

        template_flow_data_validation_status_model = {} # TemplateFlowDataValidationStatus
        template_flow_data_validation_status_model['log_level'] = 'info'
        template_flow_data_validation_status_model['var_name'] = 'testString'
        template_flow_data_validation_status_model['var_status'] = 'testString'
        template_flow_data_validation_status_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateFlowValidationLogs model
        template_flow_validation_logs_model_json = {}
        template_flow_validation_logs_model_json['flow_index'] = 38
        template_flow_validation_logs_model_json['inputs_status'] = [template_flow_data_validation_status_model]
        template_flow_validation_logs_model_json['outputs_status'] = [template_flow_data_validation_status_model]
        template_flow_validation_logs_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateFlowValidationLogs by calling from_dict on the json representation
        template_flow_validation_logs_model = TemplateFlowValidationLogs.from_dict(template_flow_validation_logs_model_json)
        assert template_flow_validation_logs_model != False

        # Construct a model instance of TemplateFlowValidationLogs by calling from_dict on the json representation
        template_flow_validation_logs_model_dict = TemplateFlowValidationLogs.from_dict(template_flow_validation_logs_model_json).__dict__
        template_flow_validation_logs_model2 = TemplateFlowValidationLogs(**template_flow_validation_logs_model_dict)

        # Verify the model instances are equivalent
        assert template_flow_validation_logs_model == template_flow_validation_logs_model2

        # Convert model instance back to dict and verify no loss of data
        template_flow_validation_logs_model_json2 = template_flow_validation_logs_model.to_dict()
        assert template_flow_validation_logs_model_json2 == template_flow_validation_logs_model_json

class TestTemplateFlowValidationSummary():
    """
    Test Class for TemplateFlowValidationSummary
    """

    def test_template_flow_validation_summary_serialization(self):
        """
        Test serialization/deserialization for TemplateFlowValidationSummary
        """

        # Construct a json representation of a TemplateFlowValidationSummary model
        template_flow_validation_summary_model_json = {}
        template_flow_validation_summary_model_json['warning_count'] = 72.5
        template_flow_validation_summary_model_json['error_count'] = 72.5
        template_flow_validation_summary_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateFlowValidationSummary by calling from_dict on the json representation
        template_flow_validation_summary_model = TemplateFlowValidationSummary.from_dict(template_flow_validation_summary_model_json)
        assert template_flow_validation_summary_model != False

        # Construct a model instance of TemplateFlowValidationSummary by calling from_dict on the json representation
        template_flow_validation_summary_model_dict = TemplateFlowValidationSummary.from_dict(template_flow_validation_summary_model_json).__dict__
        template_flow_validation_summary_model2 = TemplateFlowValidationSummary(**template_flow_validation_summary_model_dict)

        # Verify the model instances are equivalent
        assert template_flow_validation_summary_model == template_flow_validation_summary_model2

        # Convert model instance back to dict and verify no loss of data
        template_flow_validation_summary_model_json2 = template_flow_validation_summary_model.to_dict()
        assert template_flow_validation_summary_model_json2 == template_flow_validation_summary_model_json

class TestTemplateList():
    """
    Test Class for TemplateList
    """

    def test_template_list_serialization(self):
        """
        Test serialization/deserialization for TemplateList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        template_lite_model = {} # TemplateLite
        template_lite_model['id'] = 'testString'
        template_lite_model['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_lite_model['description'] = 'This template provisions clusters in production environment'
        template_lite_model['type'] = 'testString'
        template_lite_model['user_state'] = user_state_model
        template_lite_model['source_type'] = 'local'
        template_lite_model['status'] = job_status_template_model
        template_lite_model['sys_lock'] = system_lock_model
        template_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        template_lite_model['created_by'] = 'testString'
        template_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        template_lite_model['updated_by'] = 'testString'
        template_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateList model
        template_list_model_json = {}
        template_list_model_json['total_count'] = 26
        template_list_model_json['limit'] = 26
        template_list_model_json['offset'] = 26
        template_list_model_json['templates'] = [template_lite_model]
        template_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateList by calling from_dict on the json representation
        template_list_model = TemplateList.from_dict(template_list_model_json)
        assert template_list_model != False

        # Construct a model instance of TemplateList by calling from_dict on the json representation
        template_list_model_dict = TemplateList.from_dict(template_list_model_json).__dict__
        template_list_model2 = TemplateList(**template_list_model_dict)

        # Verify the model instances are equivalent
        assert template_list_model == template_list_model2

        # Convert model instance back to dict and verify no loss of data
        template_list_model_json2 = template_list_model.to_dict()
        assert template_list_model_json2 == template_list_model_json

class TestTemplateListRequest():
    """
    Test Class for TemplateListRequest
    """

    def test_template_list_request_serialization(self):
        """
        Test serialization/deserialization for TemplateListRequest
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        template_model = {} # Template
        template_model['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_model['description'] = 'This template provisions clusters in production environment'
        template_model['type'] = 'testString'
        template_model['user_state'] = user_state_model
        template_model['source_type'] = 'local'
        template_model['source'] = external_source_model
        template_model['source_readme_url'] = 'testString'
        template_model['inputs'] = [variable_data_model]
        template_model['outputs'] = [variable_data_model]
        template_model['settings'] = [variable_data_model]
        template_model['inventory'] = 'testString'
        template_model['id'] = 'testString'
        template_model['source_created_at'] = '2020-01-28T18:40:40.123456Z'
        template_model['source_created_by'] = 'testString'
        template_model['source_updated_at'] = '2020-01-28T18:40:40.123456Z'
        template_model['source_updated_by'] = 'testString'
        template_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        template_model['created_by'] = 'testString'
        template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        template_model['updated_by'] = 'testString'
        template_model['status'] = job_status_template_model
        template_model['sys_lock'] = system_lock_model
        template_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateListRequest model
        template_list_request_model_json = {}
        template_list_request_model_json['templates'] = [template_model]
        template_list_request_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateListRequest by calling from_dict on the json representation
        template_list_request_model = TemplateListRequest.from_dict(template_list_request_model_json)
        assert template_list_request_model != False

        # Construct a model instance of TemplateListRequest by calling from_dict on the json representation
        template_list_request_model_dict = TemplateListRequest.from_dict(template_list_request_model_json).__dict__
        template_list_request_model2 = TemplateListRequest(**template_list_request_model_dict)

        # Verify the model instances are equivalent
        assert template_list_request_model == template_list_request_model2

        # Convert model instance back to dict and verify no loss of data
        template_list_request_model_json2 = template_list_request_model.to_dict()
        assert template_list_request_model_json2 == template_list_request_model_json

class TestTemplateLite():
    """
    Test Class for TemplateLite
    """

    def test_template_lite_serialization(self):
        """
        Test serialization/deserialization for TemplateLite
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateLite model
        template_lite_model_json = {}
        template_lite_model_json['id'] = 'testString'
        template_lite_model_json['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_lite_model_json['description'] = 'This template provisions clusters in production environment'
        template_lite_model_json['type'] = 'testString'
        template_lite_model_json['user_state'] = user_state_model
        template_lite_model_json['source_type'] = 'local'
        template_lite_model_json['status'] = job_status_template_model
        template_lite_model_json['sys_lock'] = system_lock_model
        template_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        template_lite_model_json['created_by'] = 'testString'
        template_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        template_lite_model_json['updated_by'] = 'testString'
        template_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateLite by calling from_dict on the json representation
        template_lite_model = TemplateLite.from_dict(template_lite_model_json)
        assert template_lite_model != False

        # Construct a model instance of TemplateLite by calling from_dict on the json representation
        template_lite_model_dict = TemplateLite.from_dict(template_lite_model_json).__dict__
        template_lite_model2 = TemplateLite(**template_lite_model_dict)

        # Verify the model instances are equivalent
        assert template_lite_model == template_lite_model2

        # Convert model instance back to dict and verify no loss of data
        template_lite_model_json2 = template_lite_model.to_dict()
        assert template_lite_model_json2 == template_lite_model_json

class TestTemplateMetaDataRequest():
    """
    Test Class for TemplateMetaDataRequest
    """

    def test_template_meta_data_request_serialization(self):
        """
        Test serialization/deserialization for TemplateMetaDataRequest
        """

        # Construct dict forms of any model objects needed in order to build this model.

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateMetaDataRequest model
        template_meta_data_request_model_json = {}
        template_meta_data_request_model_json['region'] = 'testString'
        template_meta_data_request_model_json['template_type'] = 'testString'
        template_meta_data_request_model_json['source'] = external_source_model
        template_meta_data_request_model_json['source_type'] = 'local'
        template_meta_data_request_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateMetaDataRequest by calling from_dict on the json representation
        template_meta_data_request_model = TemplateMetaDataRequest.from_dict(template_meta_data_request_model_json)
        assert template_meta_data_request_model != False

        # Construct a model instance of TemplateMetaDataRequest by calling from_dict on the json representation
        template_meta_data_request_model_dict = TemplateMetaDataRequest.from_dict(template_meta_data_request_model_json).__dict__
        template_meta_data_request_model2 = TemplateMetaDataRequest(**template_meta_data_request_model_dict)

        # Verify the model instances are equivalent
        assert template_meta_data_request_model == template_meta_data_request_model2

        # Convert model instance back to dict and verify no loss of data
        template_meta_data_request_model_json2 = template_meta_data_request_model.to_dict()
        assert template_meta_data_request_model_json2 == template_meta_data_request_model_json

class TestTemplateMetaDataResponse():
    """
    Test Class for TemplateMetaDataResponse
    """

    def test_template_meta_data_response_serialization(self):
        """
        Test serialization/deserialization for TemplateMetaDataResponse
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TemplateMetaDataResponse model
        template_meta_data_response_model_json = {}
        template_meta_data_response_model_json['type'] = 'testString'
        template_meta_data_response_model_json['variables'] = [variable_data_model]
        template_meta_data_response_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateMetaDataResponse by calling from_dict on the json representation
        template_meta_data_response_model = TemplateMetaDataResponse.from_dict(template_meta_data_response_model_json)
        assert template_meta_data_response_model != False

        # Construct a model instance of TemplateMetaDataResponse by calling from_dict on the json representation
        template_meta_data_response_model_dict = TemplateMetaDataResponse.from_dict(template_meta_data_response_model_json).__dict__
        template_meta_data_response_model2 = TemplateMetaDataResponse(**template_meta_data_response_model_dict)

        # Verify the model instances are equivalent
        assert template_meta_data_response_model == template_meta_data_response_model2

        # Convert model instance back to dict and verify no loss of data
        template_meta_data_response_model_json2 = template_meta_data_response_model.to_dict()
        assert template_meta_data_response_model_json2 == template_meta_data_response_model_json

class TestTemplateRepoTarUploadResponse():
    """
    Test Class for TemplateRepoTarUploadResponse
    """

    def test_template_repo_tar_upload_response_serialization(self):
        """
        Test serialization/deserialization for TemplateRepoTarUploadResponse
        """

        # Construct a json representation of a TemplateRepoTarUploadResponse model
        template_repo_tar_upload_response_model_json = {}
        template_repo_tar_upload_response_model_json['file_value'] = 'testString'
        template_repo_tar_upload_response_model_json['has_received_file'] = True
        template_repo_tar_upload_response_model_json['id'] = 'testString'
        template_repo_tar_upload_response_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TemplateRepoTarUploadResponse by calling from_dict on the json representation
        template_repo_tar_upload_response_model = TemplateRepoTarUploadResponse.from_dict(template_repo_tar_upload_response_model_json)
        assert template_repo_tar_upload_response_model != False

        # Construct a model instance of TemplateRepoTarUploadResponse by calling from_dict on the json representation
        template_repo_tar_upload_response_model_dict = TemplateRepoTarUploadResponse.from_dict(template_repo_tar_upload_response_model_json).__dict__
        template_repo_tar_upload_response_model2 = TemplateRepoTarUploadResponse(**template_repo_tar_upload_response_model_dict)

        # Verify the model instances are equivalent
        assert template_repo_tar_upload_response_model == template_repo_tar_upload_response_model2

        # Convert model instance back to dict and verify no loss of data
        template_repo_tar_upload_response_model_json2 = template_repo_tar_upload_response_model.to_dict()
        assert template_repo_tar_upload_response_model_json2 == template_repo_tar_upload_response_model_json

class TestTrigger():
    """
    Test Class for Trigger
    """

    def test_trigger_serialization(self):
        """
        Test serialization/deserialization for Trigger
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        job_status_workitem_model = {} # JobStatusWorkitem
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        job_status_flow_model = {} # JobStatusFlow
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_model = {} # JobStatusWorkspace
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        job_status_action_model = {} # JobStatusAction
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        job_status_schematics_resources_model = {} # JobStatusSchematicsResources
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        job_status_system_model = {} # JobStatusSystem
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        job_status_model = {} # JobStatus
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        job_data_template_model = {} # JobDataTemplate
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        job_data_workspace_model = {} # JobDataWorkspace
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        inventory_resource_record_model = {} # InventoryResourceRecord
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['id'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['created_by'] = 'testString'
        inventory_resource_record_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['updated_by'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        job_data_action_model = {} # JobDataAction
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        job_data_system_model = {} # JobDataSystem
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_last_job_model = {} # JobDataWorkItemLastJob
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_model = {} # JobDataWorkItem
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        job_data_flow_model = {} # JobDataFlow
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        job_data_model = {} # JobData
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        bastion_resource_definition_model = {} # BastionResourceDefinition
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        job_log_summary_log_errors_model = {} # JobLogSummaryLogErrors
        job_log_summary_log_errors_model['error_code'] = 'testString'
        job_log_summary_log_errors_model['error_msg'] = 'testString'
        job_log_summary_log_errors_model['error_count'] = 72.5
        job_log_summary_log_errors_model['foo'] = { 'foo': 'bar' }

        job_log_summary_repo_download_job_model = {} # JobLogSummaryRepoDownloadJob
        job_log_summary_repo_download_job_model['scanned_file_count'] = 72.5
        job_log_summary_repo_download_job_model['quarantined_file_count'] = 72.5
        job_log_summary_repo_download_job_model['detected_filetype'] = 'testString'
        job_log_summary_repo_download_job_model['inputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['outputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workspace_job_model = {} # JobLogSummaryWorkspaceJob
        job_log_summary_workspace_job_model['resources_add'] = 72.5
        job_log_summary_workspace_job_model['resources_modify'] = 72.5
        job_log_summary_workspace_job_model['resources_destroy'] = 72.5
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workitems_model = {} # JobLogSummaryWorkitems
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['resources_add'] = 72.5
        job_log_summary_workitems_model['resources_modify'] = 72.5
        job_log_summary_workitems_model['resources_destroy'] = 72.5
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        job_log_summary_flow_job_model = {} # JobLogSummaryFlowJob
        job_log_summary_flow_job_model['workitems_completed'] = 72.5
        job_log_summary_flow_job_model['workitems_pending'] = 72.5
        job_log_summary_flow_job_model['workitems_failed'] = 72.5
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_recap_model = {} # JobLogSummaryActionJobRecap
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_model = {} # JobLogSummaryActionJob
        job_log_summary_action_job_model['target_count'] = 72.5
        job_log_summary_action_job_model['task_count'] = 72.5
        job_log_summary_action_job_model['play_count'] = 72.5
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_system_job_model = {} # JobLogSummarySystemJob
        job_log_summary_system_job_model['target_count'] = 72.5
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_model = {} # JobLogSummary
        job_log_summary_model['job_id'] = 'testString'
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['log_start_at'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['log_analyzed_till'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['elapsed_time'] = 72.5
        job_log_summary_model['log_errors'] = [job_log_summary_log_errors_model]
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        job_model = {} # Job
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['id'] = 'testString'
        job_model['name'] = 'testString'
        job_model['description'] = 'testString'
        job_model['location'] = 'us-south'
        job_model['resource_group'] = 'testString'
        job_model['submitted_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['submitted_by'] = 'testString'
        job_model['start_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['end_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['duration'] = 'testString'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['log_store_url'] = 'testString'
        job_model['state_store_url'] = 'testString'
        job_model['results_url'] = 'testString'
        job_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['foo'] = { 'foo': 'bar' }

        trigger_job_model = {} # TriggerJob
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        trigger_scheduled_model = {} # TriggerScheduled
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Trigger model
        trigger_model_json = {}
        trigger_model_json['name'] = 'testString'
        trigger_model_json['type'] = 'action'
        trigger_model_json['description'] = 'testString'
        trigger_model_json['resource_group'] = 'testString'
        trigger_model_json['service_id'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model_json['apikey'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model_json['location'] = 'us-south'
        trigger_model_json['tags'] = ['testString']
        trigger_model_json['job_triggers'] = [trigger_job_model]
        trigger_model_json['scheduled_triggers'] = [trigger_scheduled_model]
        trigger_model_json['user_state'] = user_state_model
        trigger_model_json['trigger_id'] = 'testString'
        trigger_model_json['registered_by'] = 'testString'
        trigger_model_json['registered_at'] = '2020-01-28T18:40:40.123456Z'
        trigger_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        trigger_model_json['updated_by'] = 'testString'
        trigger_model_json['sys_lock'] = system_lock_model
        trigger_model_json['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        trigger_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Trigger by calling from_dict on the json representation
        trigger_model = Trigger.from_dict(trigger_model_json)
        assert trigger_model != False

        # Construct a model instance of Trigger by calling from_dict on the json representation
        trigger_model_dict = Trigger.from_dict(trigger_model_json).__dict__
        trigger_model2 = Trigger(**trigger_model_dict)

        # Verify the model instances are equivalent
        assert trigger_model == trigger_model2

        # Convert model instance back to dict and verify no loss of data
        trigger_model_json2 = trigger_model.to_dict()
        assert trigger_model_json2 == trigger_model_json

class TestTriggerJob():
    """
    Test Class for TriggerJob
    """

    def test_trigger_job_serialization(self):
        """
        Test serialization/deserialization for TriggerJob
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        job_status_workitem_model = {} # JobStatusWorkitem
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        job_status_flow_model = {} # JobStatusFlow
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_model = {} # JobStatusWorkspace
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        job_status_action_model = {} # JobStatusAction
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        job_status_schematics_resources_model = {} # JobStatusSchematicsResources
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        job_status_system_model = {} # JobStatusSystem
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        job_status_model = {} # JobStatus
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        job_data_template_model = {} # JobDataTemplate
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        job_data_workspace_model = {} # JobDataWorkspace
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        inventory_resource_record_model = {} # InventoryResourceRecord
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['id'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['created_by'] = 'testString'
        inventory_resource_record_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['updated_by'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        job_data_action_model = {} # JobDataAction
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        job_data_system_model = {} # JobDataSystem
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_last_job_model = {} # JobDataWorkItemLastJob
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_model = {} # JobDataWorkItem
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        job_data_flow_model = {} # JobDataFlow
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        job_data_model = {} # JobData
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        bastion_resource_definition_model = {} # BastionResourceDefinition
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        job_log_summary_log_errors_model = {} # JobLogSummaryLogErrors
        job_log_summary_log_errors_model['error_code'] = 'testString'
        job_log_summary_log_errors_model['error_msg'] = 'testString'
        job_log_summary_log_errors_model['error_count'] = 72.5
        job_log_summary_log_errors_model['foo'] = { 'foo': 'bar' }

        job_log_summary_repo_download_job_model = {} # JobLogSummaryRepoDownloadJob
        job_log_summary_repo_download_job_model['scanned_file_count'] = 72.5
        job_log_summary_repo_download_job_model['quarantined_file_count'] = 72.5
        job_log_summary_repo_download_job_model['detected_filetype'] = 'testString'
        job_log_summary_repo_download_job_model['inputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['outputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workspace_job_model = {} # JobLogSummaryWorkspaceJob
        job_log_summary_workspace_job_model['resources_add'] = 72.5
        job_log_summary_workspace_job_model['resources_modify'] = 72.5
        job_log_summary_workspace_job_model['resources_destroy'] = 72.5
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workitems_model = {} # JobLogSummaryWorkitems
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['resources_add'] = 72.5
        job_log_summary_workitems_model['resources_modify'] = 72.5
        job_log_summary_workitems_model['resources_destroy'] = 72.5
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        job_log_summary_flow_job_model = {} # JobLogSummaryFlowJob
        job_log_summary_flow_job_model['workitems_completed'] = 72.5
        job_log_summary_flow_job_model['workitems_pending'] = 72.5
        job_log_summary_flow_job_model['workitems_failed'] = 72.5
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_recap_model = {} # JobLogSummaryActionJobRecap
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_model = {} # JobLogSummaryActionJob
        job_log_summary_action_job_model['target_count'] = 72.5
        job_log_summary_action_job_model['task_count'] = 72.5
        job_log_summary_action_job_model['play_count'] = 72.5
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_system_job_model = {} # JobLogSummarySystemJob
        job_log_summary_system_job_model['target_count'] = 72.5
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_model = {} # JobLogSummary
        job_log_summary_model['job_id'] = 'testString'
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['log_start_at'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['log_analyzed_till'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['elapsed_time'] = 72.5
        job_log_summary_model['log_errors'] = [job_log_summary_log_errors_model]
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        job_model = {} # Job
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['id'] = 'testString'
        job_model['name'] = 'testString'
        job_model['description'] = 'testString'
        job_model['location'] = 'us-south'
        job_model['resource_group'] = 'testString'
        job_model['submitted_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['submitted_by'] = 'testString'
        job_model['start_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['end_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['duration'] = 'testString'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['log_store_url'] = 'testString'
        job_model['state_store_url'] = 'testString'
        job_model['results_url'] = 'testString'
        job_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TriggerJob model
        trigger_job_model_json = {}
        trigger_job_model_json['event'] = 'before | after'
        trigger_job_model_json['job'] = job_model
        trigger_job_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TriggerJob by calling from_dict on the json representation
        trigger_job_model = TriggerJob.from_dict(trigger_job_model_json)
        assert trigger_job_model != False

        # Construct a model instance of TriggerJob by calling from_dict on the json representation
        trigger_job_model_dict = TriggerJob.from_dict(trigger_job_model_json).__dict__
        trigger_job_model2 = TriggerJob(**trigger_job_model_dict)

        # Verify the model instances are equivalent
        assert trigger_job_model == trigger_job_model2

        # Convert model instance back to dict and verify no loss of data
        trigger_job_model_json2 = trigger_job_model.to_dict()
        assert trigger_job_model_json2 == trigger_job_model_json

class TestTriggerList():
    """
    Test Class for TriggerList
    """

    def test_trigger_list_serialization(self):
        """
        Test serialization/deserialization for TriggerList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        job_status_workitem_model = {} # JobStatusWorkitem
        job_status_workitem_model['workspace_id'] = 'testString'
        job_status_workitem_model['workspace_name'] = 'testString'
        job_status_workitem_model['job_id'] = 'testString'
        job_status_workitem_model['status_code'] = 'job_pending'
        job_status_workitem_model['status_message'] = 'testString'
        job_status_workitem_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workitem_model['foo'] = { 'foo': 'bar' }

        job_status_flow_model = {} # JobStatusFlow
        job_status_flow_model['flow_id'] = 'testString'
        job_status_flow_model['flow_name'] = 'testString'
        job_status_flow_model['status_code'] = 'job_pending'
        job_status_flow_model['status_message'] = 'testString'
        job_status_flow_model['workitems'] = [job_status_workitem_model]
        job_status_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_flow_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        job_status_workspace_model = {} # JobStatusWorkspace
        job_status_workspace_model['workspace_name'] = 'testString'
        job_status_workspace_model['status_code'] = 'job_pending'
        job_status_workspace_model['status_message'] = 'testString'
        job_status_workspace_model['flow_status'] = job_status_flow_model
        job_status_workspace_model['template_status'] = [job_status_template_model]
        job_status_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_workspace_model['foo'] = { 'foo': 'bar' }

        job_status_action_model = {} # JobStatusAction
        job_status_action_model['action_name'] = 'testString'
        job_status_action_model['status_code'] = 'job_pending'
        job_status_action_model['status_message'] = 'testString'
        job_status_action_model['bastion_status_code'] = 'none'
        job_status_action_model['bastion_status_message'] = 'testString'
        job_status_action_model['targets_status_code'] = 'none'
        job_status_action_model['targets_status_message'] = 'testString'
        job_status_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_action_model['foo'] = { 'foo': 'bar' }

        job_status_schematics_resources_model = {} # JobStatusSchematicsResources
        job_status_schematics_resources_model['status_code'] = 'job_pending'
        job_status_schematics_resources_model['status_message'] = 'testString'
        job_status_schematics_resources_model['schematics_resource_id'] = 'testString'
        job_status_schematics_resources_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_schematics_resources_model['foo'] = { 'foo': 'bar' }

        job_status_system_model = {} # JobStatusSystem
        job_status_system_model['system_status_message'] = 'testString'
        job_status_system_model['system_status_code'] = 'job_pending'
        job_status_system_model['schematics_resource_status'] = [job_status_schematics_resources_model]
        job_status_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_system_model['foo'] = { 'foo': 'bar' }

        job_status_model = {} # JobStatus
        job_status_model['workspace_job_status'] = job_status_workspace_model
        job_status_model['action_job_status'] = job_status_action_model
        job_status_model['system_job_status'] = job_status_system_model
        job_status_model['flow_job_status'] = job_status_flow_model
        job_status_model['foo'] = { 'foo': 'bar' }

        job_data_template_model = {} # JobDataTemplate
        job_data_template_model['template_id'] = 'testString'
        job_data_template_model['template_name'] = 'testString'
        job_data_template_model['flow_index'] = 38
        job_data_template_model['inputs'] = [variable_data_model]
        job_data_template_model['outputs'] = [variable_data_model]
        job_data_template_model['settings'] = [variable_data_model]
        job_data_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_template_model['foo'] = { 'foo': 'bar' }

        job_data_workspace_model = {} # JobDataWorkspace
        job_data_workspace_model['workspace_name'] = 'testString'
        job_data_workspace_model['flow_id'] = 'testString'
        job_data_workspace_model['flow_name'] = 'testString'
        job_data_workspace_model['inputs'] = [variable_data_model]
        job_data_workspace_model['outputs'] = [variable_data_model]
        job_data_workspace_model['settings'] = [variable_data_model]
        job_data_workspace_model['template_data'] = [job_data_template_model]
        job_data_workspace_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_workspace_model['foo'] = { 'foo': 'bar' }

        inventory_resource_record_model = {} # InventoryResourceRecord
        inventory_resource_record_model['name'] = 'testString'
        inventory_resource_record_model['id'] = 'testString'
        inventory_resource_record_model['description'] = 'testString'
        inventory_resource_record_model['location'] = 'us-south'
        inventory_resource_record_model['resource_group'] = 'testString'
        inventory_resource_record_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['created_by'] = 'testString'
        inventory_resource_record_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        inventory_resource_record_model['updated_by'] = 'testString'
        inventory_resource_record_model['inventories_ini'] = 'testString'
        inventory_resource_record_model['resource_queries'] = ['testString']
        inventory_resource_record_model['foo'] = { 'foo': 'bar' }

        job_data_action_model = {} # JobDataAction
        job_data_action_model['action_name'] = 'testString'
        job_data_action_model['inputs'] = [variable_data_model]
        job_data_action_model['outputs'] = [variable_data_model]
        job_data_action_model['settings'] = [variable_data_model]
        job_data_action_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_action_model['inventory_record'] = inventory_resource_record_model
        job_data_action_model['materialized_inventory'] = 'testString'
        job_data_action_model['foo'] = { 'foo': 'bar' }

        job_data_system_model = {} # JobDataSystem
        job_data_system_model['key_id'] = 'testString'
        job_data_system_model['schematics_resource_id'] = ['testString']
        job_data_system_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_system_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_last_job_model = {} # JobDataWorkItemLastJob
        job_data_work_item_last_job_model['command_object'] = 'workspace'
        job_data_work_item_last_job_model['command_object_name'] = 'testString'
        job_data_work_item_last_job_model['command_object_id'] = 'testString'
        job_data_work_item_last_job_model['command_name'] = 'workspace_plan'
        job_data_work_item_last_job_model['job_id'] = 'testString'
        job_data_work_item_last_job_model['job_status'] = 'job_pending'
        job_data_work_item_last_job_model['foo'] = { 'foo': 'bar' }

        job_data_work_item_model = {} # JobDataWorkItem
        job_data_work_item_model['command_object_id'] = 'testString'
        job_data_work_item_model['command_object_name'] = 'testString'
        job_data_work_item_model['layers'] = 'testString'
        job_data_work_item_model['source_type'] = 'local'
        job_data_work_item_model['source'] = external_source_model
        job_data_work_item_model['inputs'] = [variable_data_model]
        job_data_work_item_model['outputs'] = [variable_data_model]
        job_data_work_item_model['settings'] = [variable_data_model]
        job_data_work_item_model['last_job'] = job_data_work_item_last_job_model
        job_data_work_item_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_work_item_model['foo'] = { 'foo': 'bar' }

        job_data_flow_model = {} # JobDataFlow
        job_data_flow_model['flow_id'] = 'testString'
        job_data_flow_model['flow_name'] = 'testString'
        job_data_flow_model['workitems'] = [job_data_work_item_model]
        job_data_flow_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_data_flow_model['foo'] = { 'foo': 'bar' }

        job_data_model = {} # JobData
        job_data_model['job_type'] = 'repo_download_job'
        job_data_model['workspace_job_data'] = job_data_workspace_model
        job_data_model['action_job_data'] = job_data_action_model
        job_data_model['system_job_data'] = job_data_system_model
        job_data_model['flow_job_data'] = job_data_flow_model
        job_data_model['foo'] = { 'foo': 'bar' }

        bastion_resource_definition_model = {} # BastionResourceDefinition
        bastion_resource_definition_model['name'] = 'testString'
        bastion_resource_definition_model['host'] = 'testString'
        bastion_resource_definition_model['foo'] = { 'foo': 'bar' }

        job_log_summary_log_errors_model = {} # JobLogSummaryLogErrors
        job_log_summary_log_errors_model['error_code'] = 'testString'
        job_log_summary_log_errors_model['error_msg'] = 'testString'
        job_log_summary_log_errors_model['error_count'] = 72.5
        job_log_summary_log_errors_model['foo'] = { 'foo': 'bar' }

        job_log_summary_repo_download_job_model = {} # JobLogSummaryRepoDownloadJob
        job_log_summary_repo_download_job_model['scanned_file_count'] = 72.5
        job_log_summary_repo_download_job_model['quarantined_file_count'] = 72.5
        job_log_summary_repo_download_job_model['detected_filetype'] = 'testString'
        job_log_summary_repo_download_job_model['inputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['outputs_count'] = 'testString'
        job_log_summary_repo_download_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workspace_job_model = {} # JobLogSummaryWorkspaceJob
        job_log_summary_workspace_job_model['resources_add'] = 72.5
        job_log_summary_workspace_job_model['resources_modify'] = 72.5
        job_log_summary_workspace_job_model['resources_destroy'] = 72.5
        job_log_summary_workspace_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_workitems_model = {} # JobLogSummaryWorkitems
        job_log_summary_workitems_model['workspace_id'] = 'testString'
        job_log_summary_workitems_model['job_id'] = 'testString'
        job_log_summary_workitems_model['resources_add'] = 72.5
        job_log_summary_workitems_model['resources_modify'] = 72.5
        job_log_summary_workitems_model['resources_destroy'] = 72.5
        job_log_summary_workitems_model['log_url'] = 'testString'
        job_log_summary_workitems_model['foo'] = { 'foo': 'bar' }

        job_log_summary_flow_job_model = {} # JobLogSummaryFlowJob
        job_log_summary_flow_job_model['workitems_completed'] = 72.5
        job_log_summary_flow_job_model['workitems_pending'] = 72.5
        job_log_summary_flow_job_model['workitems_failed'] = 72.5
        job_log_summary_flow_job_model['workitems'] = [job_log_summary_workitems_model]
        job_log_summary_flow_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_recap_model = {} # JobLogSummaryActionJobRecap
        job_log_summary_action_job_recap_model['target'] = ['testString']
        job_log_summary_action_job_recap_model['ok'] = 72.5
        job_log_summary_action_job_recap_model['changed'] = 72.5
        job_log_summary_action_job_recap_model['failed'] = 72.5
        job_log_summary_action_job_recap_model['skipped'] = 72.5
        job_log_summary_action_job_recap_model['unreachable'] = 72.5
        job_log_summary_action_job_recap_model['foo'] = { 'foo': 'bar' }

        job_log_summary_action_job_model = {} # JobLogSummaryActionJob
        job_log_summary_action_job_model['target_count'] = 72.5
        job_log_summary_action_job_model['task_count'] = 72.5
        job_log_summary_action_job_model['play_count'] = 72.5
        job_log_summary_action_job_model['recap'] = job_log_summary_action_job_recap_model
        job_log_summary_action_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_system_job_model = {} # JobLogSummarySystemJob
        job_log_summary_system_job_model['target_count'] = 72.5
        job_log_summary_system_job_model['success'] = 72.5
        job_log_summary_system_job_model['failed'] = 72.5
        job_log_summary_system_job_model['foo'] = { 'foo': 'bar' }

        job_log_summary_model = {} # JobLogSummary
        job_log_summary_model['job_id'] = 'testString'
        job_log_summary_model['job_type'] = 'repo_download_job'
        job_log_summary_model['log_start_at'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['log_analyzed_till'] = '2020-01-28T18:40:40.123456Z'
        job_log_summary_model['elapsed_time'] = 72.5
        job_log_summary_model['log_errors'] = [job_log_summary_log_errors_model]
        job_log_summary_model['repo_download_job'] = job_log_summary_repo_download_job_model
        job_log_summary_model['workspace_job'] = job_log_summary_workspace_job_model
        job_log_summary_model['flow_job'] = job_log_summary_flow_job_model
        job_log_summary_model['action_job'] = job_log_summary_action_job_model
        job_log_summary_model['system_job'] = job_log_summary_system_job_model
        job_log_summary_model['foo'] = { 'foo': 'bar' }

        job_model = {} # Job
        job_model['command_object'] = 'workspace'
        job_model['command_object_id'] = 'testString'
        job_model['command_name'] = 'workspace_plan'
        job_model['command_parameter'] = 'testString'
        job_model['command_options'] = ['testString']
        job_model['inputs'] = [variable_data_model]
        job_model['settings'] = [variable_data_model]
        job_model['tags'] = ['testString']
        job_model['id'] = 'testString'
        job_model['name'] = 'testString'
        job_model['description'] = 'testString'
        job_model['location'] = 'us-south'
        job_model['resource_group'] = 'testString'
        job_model['submitted_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['submitted_by'] = 'testString'
        job_model['start_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['end_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['duration'] = 'testString'
        job_model['status'] = job_status_model
        job_model['data'] = job_data_model
        job_model['bastion'] = bastion_resource_definition_model
        job_model['log_summary'] = job_log_summary_model
        job_model['log_store_url'] = 'testString'
        job_model['state_store_url'] = 'testString'
        job_model['results_url'] = 'testString'
        job_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_model['foo'] = { 'foo': 'bar' }

        trigger_job_model = {} # TriggerJob
        trigger_job_model['event'] = 'before | after'
        trigger_job_model['job'] = job_model
        trigger_job_model['foo'] = { 'foo': 'bar' }

        trigger_scheduled_model = {} # TriggerScheduled
        trigger_scheduled_model['frequency'] = 'daily | weekly'
        trigger_scheduled_model['time'] = 'time in UTC'
        trigger_scheduled_model['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model['foo'] = { 'foo': 'bar' }

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        trigger_model = {} # Trigger
        trigger_model['name'] = 'testString'
        trigger_model['type'] = 'action'
        trigger_model['description'] = 'testString'
        trigger_model['resource_group'] = 'testString'
        trigger_model['service_id'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model['apikey'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        trigger_model['location'] = 'us-south'
        trigger_model['tags'] = ['testString']
        trigger_model['job_triggers'] = [trigger_job_model]
        trigger_model['scheduled_triggers'] = [trigger_scheduled_model]
        trigger_model['user_state'] = user_state_model
        trigger_model['trigger_id'] = 'testString'
        trigger_model['registered_by'] = 'testString'
        trigger_model['registered_at'] = '2020-01-28T18:40:40.123456Z'
        trigger_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        trigger_model['updated_by'] = 'testString'
        trigger_model['sys_lock'] = system_lock_model
        trigger_model['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        trigger_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a TriggerList model
        trigger_list_model_json = {}
        trigger_list_model_json['total_count'] = 26
        trigger_list_model_json['limit'] = 26
        trigger_list_model_json['offset'] = 26
        trigger_list_model_json['triggers'] = [trigger_model]
        trigger_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TriggerList by calling from_dict on the json representation
        trigger_list_model = TriggerList.from_dict(trigger_list_model_json)
        assert trigger_list_model != False

        # Construct a model instance of TriggerList by calling from_dict on the json representation
        trigger_list_model_dict = TriggerList.from_dict(trigger_list_model_json).__dict__
        trigger_list_model2 = TriggerList(**trigger_list_model_dict)

        # Verify the model instances are equivalent
        assert trigger_list_model == trigger_list_model2

        # Convert model instance back to dict and verify no loss of data
        trigger_list_model_json2 = trigger_list_model.to_dict()
        assert trigger_list_model_json2 == trigger_list_model_json

class TestTriggerScheduled():
    """
    Test Class for TriggerScheduled
    """

    def test_trigger_scheduled_serialization(self):
        """
        Test serialization/deserialization for TriggerScheduled
        """

        # Construct a json representation of a TriggerScheduled model
        trigger_scheduled_model_json = {}
        trigger_scheduled_model_json['frequency'] = 'daily | weekly'
        trigger_scheduled_model_json['time'] = 'time in UTC'
        trigger_scheduled_model_json['day'] = 'expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday'
        trigger_scheduled_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of TriggerScheduled by calling from_dict on the json representation
        trigger_scheduled_model = TriggerScheduled.from_dict(trigger_scheduled_model_json)
        assert trigger_scheduled_model != False

        # Construct a model instance of TriggerScheduled by calling from_dict on the json representation
        trigger_scheduled_model_dict = TriggerScheduled.from_dict(trigger_scheduled_model_json).__dict__
        trigger_scheduled_model2 = TriggerScheduled(**trigger_scheduled_model_dict)

        # Verify the model instances are equivalent
        assert trigger_scheduled_model == trigger_scheduled_model2

        # Convert model instance back to dict and verify no loss of data
        trigger_scheduled_model_json2 = trigger_scheduled_model.to_dict()
        assert trigger_scheduled_model_json2 == trigger_scheduled_model_json

class TestUpdateCartOrder():
    """
    Test Class for UpdateCartOrder
    """

    def test_update_cart_order_serialization(self):
        """
        Test serialization/deserialization for UpdateCartOrder
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        target_request_model = {} # TargetRequest
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        service_mapping_rule_model = {} # ServiceMappingRule
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        service_variable_data_model = {} # ServiceVariableData
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        update_order_item_configuration_model = {} # UpdateOrderItemConfiguration
        update_order_item_configuration_model['name'] = 'AWS Satellite'
        update_order_item_configuration_model['description'] = 'Create satellite location in AWS'
        update_order_item_configuration_model['inputs'] = [variable_data_model]
        update_order_item_configuration_model['settings'] = [variable_data_model]
        update_order_item_configuration_model['outputs'] = [variable_data_model]
        update_order_item_configuration_model['target'] = target_request_model
        update_order_item_configuration_model['operation'] = 'install'
        update_order_item_configuration_model['service_data'] = [service_variable_data_model]
        update_order_item_configuration_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a UpdateCartOrder model
        update_cart_order_model_json = {}
        update_cart_order_model_json['name'] = 'MySatelliteLocation'
        update_cart_order_model_json['description'] = 'Creates satellite location in AWS'
        update_cart_order_model_json['tags'] = ['testString']
        update_cart_order_model_json['cart_items'] = [update_order_item_configuration_model]
        update_cart_order_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of UpdateCartOrder by calling from_dict on the json representation
        update_cart_order_model = UpdateCartOrder.from_dict(update_cart_order_model_json)
        assert update_cart_order_model != False

        # Construct a model instance of UpdateCartOrder by calling from_dict on the json representation
        update_cart_order_model_dict = UpdateCartOrder.from_dict(update_cart_order_model_json).__dict__
        update_cart_order_model2 = UpdateCartOrder(**update_cart_order_model_dict)

        # Verify the model instances are equivalent
        assert update_cart_order_model == update_cart_order_model2

        # Convert model instance back to dict and verify no loss of data
        update_cart_order_model_json2 = update_cart_order_model.to_dict()
        assert update_cart_order_model_json2 == update_cart_order_model_json

class TestUpdateOrderItemConfiguration():
    """
    Test Class for UpdateOrderItemConfiguration
    """

    def test_update_order_item_configuration_serialization(self):
        """
        Test serialization/deserialization for UpdateOrderItemConfiguration
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        target_request_model = {} # TargetRequest
        target_request_model['cluster_id'] = 'testString'
        target_request_model['cluster_name'] = 'testString'
        target_request_model['entitlement_key'] = { 'foo': 'bar' }
        target_request_model['namespace'] = 'testString'
        target_request_model['region'] = 'testString'
        target_request_model['resource_group_id'] = 'testString'
        target_request_model['foo'] = { 'foo': 'bar' }

        service_mapping_rule_model = {} # ServiceMappingRule
        service_mapping_rule_model['type'] = 'testString'
        service_mapping_rule_model['input_param_name'] = 'testString'
        service_mapping_rule_model['output_param_name'] = 'testString'
        service_mapping_rule_model['foo'] = { 'foo': 'bar' }

        service_variable_data_model = {} # ServiceVariableData
        service_variable_data_model['name'] = 'testString'
        service_variable_data_model['value'] = 'testString'
        service_variable_data_model['metadata'] = variable_metadata_model
        service_variable_data_model['mapping'] = [service_mapping_rule_model]
        service_variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a UpdateOrderItemConfiguration model
        update_order_item_configuration_model_json = {}
        update_order_item_configuration_model_json['name'] = 'AWS Satellite'
        update_order_item_configuration_model_json['description'] = 'Create satellite location in AWS'
        update_order_item_configuration_model_json['inputs'] = [variable_data_model]
        update_order_item_configuration_model_json['settings'] = [variable_data_model]
        update_order_item_configuration_model_json['outputs'] = [variable_data_model]
        update_order_item_configuration_model_json['target'] = target_request_model
        update_order_item_configuration_model_json['operation'] = 'install'
        update_order_item_configuration_model_json['service_data'] = [service_variable_data_model]
        update_order_item_configuration_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of UpdateOrderItemConfiguration by calling from_dict on the json representation
        update_order_item_configuration_model = UpdateOrderItemConfiguration.from_dict(update_order_item_configuration_model_json)
        assert update_order_item_configuration_model != False

        # Construct a model instance of UpdateOrderItemConfiguration by calling from_dict on the json representation
        update_order_item_configuration_model_dict = UpdateOrderItemConfiguration.from_dict(update_order_item_configuration_model_json).__dict__
        update_order_item_configuration_model2 = UpdateOrderItemConfiguration(**update_order_item_configuration_model_dict)

        # Verify the model instances are equivalent
        assert update_order_item_configuration_model == update_order_item_configuration_model2

        # Convert model instance back to dict and verify no loss of data
        update_order_item_configuration_model_json2 = update_order_item_configuration_model.to_dict()
        assert update_order_item_configuration_model_json2 == update_order_item_configuration_model_json

class TestUserState():
    """
    Test Class for UserState
    """

    def test_user_state_serialization(self):
        """
        Test serialization/deserialization for UserState
        """

        # Construct a json representation of a UserState model
        user_state_model_json = {}
        user_state_model_json['state'] = 'draft'
        user_state_model_json['set_by'] = 'testString'
        user_state_model_json['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of UserState by calling from_dict on the json representation
        user_state_model = UserState.from_dict(user_state_model_json)
        assert user_state_model != False

        # Construct a model instance of UserState by calling from_dict on the json representation
        user_state_model_dict = UserState.from_dict(user_state_model_json).__dict__
        user_state_model2 = UserState(**user_state_model_dict)

        # Verify the model instances are equivalent
        assert user_state_model == user_state_model2

        # Convert model instance back to dict and verify no loss of data
        user_state_model_json2 = user_state_model.to_dict()
        assert user_state_model_json2 == user_state_model_json

class TestValueListResponse():
    """
    Test Class for ValueListResponse
    """

    def test_value_list_response_serialization(self):
        """
        Test serialization/deserialization for ValueListResponse
        """

        # Construct a json representation of a ValueListResponse model
        value_list_response_model_json = {}
        value_list_response_model_json['values'] = ['testString']
        value_list_response_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ValueListResponse by calling from_dict on the json representation
        value_list_response_model = ValueListResponse.from_dict(value_list_response_model_json)
        assert value_list_response_model != False

        # Construct a model instance of ValueListResponse by calling from_dict on the json representation
        value_list_response_model_dict = ValueListResponse.from_dict(value_list_response_model_json).__dict__
        value_list_response_model2 = ValueListResponse(**value_list_response_model_dict)

        # Verify the model instances are equivalent
        assert value_list_response_model == value_list_response_model2

        # Convert model instance back to dict and verify no loss of data
        value_list_response_model_json2 = value_list_response_model.to_dict()
        assert value_list_response_model_json2 == value_list_response_model_json

class TestValueResponse():
    """
    Test Class for ValueResponse
    """

    def test_value_response_serialization(self):
        """
        Test serialization/deserialization for ValueResponse
        """

        # Construct a json representation of a ValueResponse model
        value_response_model_json = {}
        value_response_model_json['value'] = 'testString'
        value_response_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of ValueResponse by calling from_dict on the json representation
        value_response_model = ValueResponse.from_dict(value_response_model_json)
        assert value_response_model != False

        # Construct a model instance of ValueResponse by calling from_dict on the json representation
        value_response_model_dict = ValueResponse.from_dict(value_response_model_json).__dict__
        value_response_model2 = ValueResponse(**value_response_model_dict)

        # Verify the model instances are equivalent
        assert value_response_model == value_response_model2

        # Convert model instance back to dict and verify no loss of data
        value_response_model_json2 = value_response_model.to_dict()
        assert value_response_model_json2 == value_response_model_json

class TestVariableData():
    """
    Test Class for VariableData
    """

    def test_variable_data_serialization(self):
        """
        Test serialization/deserialization for VariableData
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a VariableData model
        variable_data_model_json = {}
        variable_data_model_json['name'] = 'testString'
        variable_data_model_json['value'] = 'testString'
        variable_data_model_json['metadata'] = variable_metadata_model
        variable_data_model_json['link'] = 'testString'
        variable_data_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of VariableData by calling from_dict on the json representation
        variable_data_model = VariableData.from_dict(variable_data_model_json)
        assert variable_data_model != False

        # Construct a model instance of VariableData by calling from_dict on the json representation
        variable_data_model_dict = VariableData.from_dict(variable_data_model_json).__dict__
        variable_data_model2 = VariableData(**variable_data_model_dict)

        # Verify the model instances are equivalent
        assert variable_data_model == variable_data_model2

        # Convert model instance back to dict and verify no loss of data
        variable_data_model_json2 = variable_data_model.to_dict()
        assert variable_data_model_json2 == variable_data_model_json

class TestVariableDataList():
    """
    Test Class for VariableDataList
    """

    def test_variable_data_list_serialization(self):
        """
        Test serialization/deserialization for VariableDataList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a VariableDataList model
        variable_data_list_model_json = {}
        variable_data_list_model_json['total_count'] = 26
        variable_data_list_model_json['limit'] = 26
        variable_data_list_model_json['offset'] = 26
        variable_data_list_model_json['variables'] = [variable_data_model]
        variable_data_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of VariableDataList by calling from_dict on the json representation
        variable_data_list_model = VariableDataList.from_dict(variable_data_list_model_json)
        assert variable_data_list_model != False

        # Construct a model instance of VariableDataList by calling from_dict on the json representation
        variable_data_list_model_dict = VariableDataList.from_dict(variable_data_list_model_json).__dict__
        variable_data_list_model2 = VariableDataList(**variable_data_list_model_dict)

        # Verify the model instances are equivalent
        assert variable_data_list_model == variable_data_list_model2

        # Convert model instance back to dict and verify no loss of data
        variable_data_list_model_json2 = variable_data_list_model.to_dict()
        assert variable_data_list_model_json2 == variable_data_list_model_json

class TestVariableMetadata():
    """
    Test Class for VariableMetadata
    """

    def test_variable_metadata_serialization(self):
        """
        Test serialization/deserialization for VariableMetadata
        """

        # Construct a json representation of a VariableMetadata model
        variable_metadata_model_json = {}
        variable_metadata_model_json['type'] = 'boolean'
        variable_metadata_model_json['aliases'] = ['testString']
        variable_metadata_model_json['description'] = 'testString'
        variable_metadata_model_json['default_value'] = 'testString'
        variable_metadata_model_json['secure'] = True
        variable_metadata_model_json['immutable'] = True
        variable_metadata_model_json['hidden'] = True
        variable_metadata_model_json['options'] = ['testString']
        variable_metadata_model_json['min_value'] = 38
        variable_metadata_model_json['max_value'] = 38
        variable_metadata_model_json['min_length'] = 38
        variable_metadata_model_json['max_length'] = 38
        variable_metadata_model_json['matches'] = 'testString'
        variable_metadata_model_json['position'] = 38
        variable_metadata_model_json['group_by'] = 'testString'
        variable_metadata_model_json['source'] = 'testString'
        variable_metadata_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of VariableMetadata by calling from_dict on the json representation
        variable_metadata_model = VariableMetadata.from_dict(variable_metadata_model_json)
        assert variable_metadata_model != False

        # Construct a model instance of VariableMetadata by calling from_dict on the json representation
        variable_metadata_model_dict = VariableMetadata.from_dict(variable_metadata_model_json).__dict__
        variable_metadata_model2 = VariableMetadata(**variable_metadata_model_dict)

        # Verify the model instances are equivalent
        assert variable_metadata_model == variable_metadata_model2

        # Convert model instance back to dict and verify no loss of data
        variable_metadata_model_json2 = variable_metadata_model.to_dict()
        assert variable_metadata_model_json2 == variable_metadata_model_json

class TestWebHook():
    """
    Test Class for WebHook
    """

    def test_web_hook_serialization(self):
        """
        Test serialization/deserialization for WebHook
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a WebHook model
        web_hook_model_json = {}
        web_hook_model_json['command_name'] = 'workspace_plan'
        web_hook_model_json['hook_type'] = 'hook'
        web_hook_model_json['hook_site'] = 'before'
        web_hook_model_json['location'] = 'us-south'
        web_hook_model_json['resource_group'] = 'testString'
        web_hook_model_json['tags'] = ['testString']
        web_hook_model_json['hook_endpoint_url'] = 'testString'
        web_hook_model_json['service_id'] = 'testString'
        web_hook_model_json['apikey'] = 'testString'
        web_hook_model_json['user_state'] = user_state_model
        web_hook_model_json['ignore_inflight_operations'] = True
        web_hook_model_json['hook_id'] = 'testString'
        web_hook_model_json['registered_by'] = 'testString'
        web_hook_model_json['registered_at'] = '2020-01-28T18:40:40.123456Z'
        web_hook_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        web_hook_model_json['updated_by'] = 'testString'
        web_hook_model_json['sys_lock'] = system_lock_model
        web_hook_model_json['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        web_hook_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of WebHook by calling from_dict on the json representation
        web_hook_model = WebHook.from_dict(web_hook_model_json)
        assert web_hook_model != False

        # Construct a model instance of WebHook by calling from_dict on the json representation
        web_hook_model_dict = WebHook.from_dict(web_hook_model_json).__dict__
        web_hook_model2 = WebHook(**web_hook_model_dict)

        # Verify the model instances are equivalent
        assert web_hook_model == web_hook_model2

        # Convert model instance back to dict and verify no loss of data
        web_hook_model_json2 = web_hook_model.to_dict()
        assert web_hook_model_json2 == web_hook_model_json

class TestWebHookList():
    """
    Test Class for WebHookList
    """

    def test_web_hook_list_serialization(self):
        """
        Test serialization/deserialization for WebHookList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        web_hook_model = {} # WebHook
        web_hook_model['command_name'] = 'workspace_plan'
        web_hook_model['hook_type'] = 'hook'
        web_hook_model['hook_site'] = 'before'
        web_hook_model['location'] = 'us-south'
        web_hook_model['resource_group'] = 'testString'
        web_hook_model['tags'] = ['testString']
        web_hook_model['hook_endpoint_url'] = 'testString'
        web_hook_model['service_id'] = 'testString'
        web_hook_model['apikey'] = 'testString'
        web_hook_model['user_state'] = user_state_model
        web_hook_model['ignore_inflight_operations'] = True
        web_hook_model['hook_id'] = 'testString'
        web_hook_model['registered_by'] = 'testString'
        web_hook_model['registered_at'] = '2020-01-28T18:40:40.123456Z'
        web_hook_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        web_hook_model['updated_by'] = 'testString'
        web_hook_model['sys_lock'] = system_lock_model
        web_hook_model['last_health_checked_at'] = '2020-01-28T18:40:40.123456Z'
        web_hook_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a WebHookList model
        web_hook_list_model_json = {}
        web_hook_list_model_json['total_count'] = 26
        web_hook_list_model_json['limit'] = 26
        web_hook_list_model_json['offset'] = 26
        web_hook_list_model_json['hooks'] = [web_hook_model]
        web_hook_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of WebHookList by calling from_dict on the json representation
        web_hook_list_model = WebHookList.from_dict(web_hook_list_model_json)
        assert web_hook_list_model != False

        # Construct a model instance of WebHookList by calling from_dict on the json representation
        web_hook_list_model_dict = WebHookList.from_dict(web_hook_list_model_json).__dict__
        web_hook_list_model2 = WebHookList(**web_hook_list_model_dict)

        # Verify the model instances are equivalent
        assert web_hook_list_model == web_hook_list_model2

        # Convert model instance back to dict and verify no loss of data
        web_hook_list_model_json2 = web_hook_list_model.to_dict()
        assert web_hook_list_model_json2 == web_hook_list_model_json

class TestWorkItem():
    """
    Test Class for WorkItem
    """

    def test_work_item_serialization(self):
        """
        Test serialization/deserialization for WorkItem
        """

        # Construct dict forms of any model objects needed in order to build this model.

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        blueprint_variable_data_model = {} # BlueprintVariableData
        blueprint_variable_data_model['name'] = 'testString'
        blueprint_variable_data_model['value'] = 'testString'
        blueprint_variable_data_model['link'] = 'testString'
        blueprint_variable_data_model['foo'] = { 'foo': 'bar' }

        work_item_last_job_model = {} # WorkItemLastJob
        work_item_last_job_model['command_object'] = 'workspace'
        work_item_last_job_model['command_object_name'] = 'testString'
        work_item_last_job_model['command_object_id'] = 'testString'
        work_item_last_job_model['command_name'] = 'workspace_plan'
        work_item_last_job_model['job_status'] = 'job_pending'
        work_item_last_job_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a WorkItem model
        work_item_model_json = {}
        work_item_model_json['workitem_object_id'] = 'testString'
        work_item_model_json['workitem_object_type'] = 'workspace'
        work_item_model_json['name'] = 'testString'
        work_item_model_json['layer'] = 'testString'
        work_item_model_json['source'] = external_source_model
        work_item_model_json['tags'] = 'testString'
        work_item_model_json['inputs'] = [blueprint_variable_data_model]
        work_item_model_json['outputs'] = [blueprint_variable_data_model]
        work_item_model_json['settings'] = [blueprint_variable_data_model]
        work_item_model_json['last_job'] = work_item_last_job_model
        work_item_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of WorkItem by calling from_dict on the json representation
        work_item_model = WorkItem.from_dict(work_item_model_json)
        assert work_item_model != False

        # Construct a model instance of WorkItem by calling from_dict on the json representation
        work_item_model_dict = WorkItem.from_dict(work_item_model_json).__dict__
        work_item_model2 = WorkItem(**work_item_model_dict)

        # Verify the model instances are equivalent
        assert work_item_model == work_item_model2

        # Convert model instance back to dict and verify no loss of data
        work_item_model_json2 = work_item_model.to_dict()
        assert work_item_model_json2 == work_item_model_json

class TestWorkItemLastJob():
    """
    Test Class for WorkItemLastJob
    """

    def test_work_item_last_job_serialization(self):
        """
        Test serialization/deserialization for WorkItemLastJob
        """

        # Construct a json representation of a WorkItemLastJob model
        work_item_last_job_model_json = {}
        work_item_last_job_model_json['command_object'] = 'workspace'
        work_item_last_job_model_json['command_object_name'] = 'testString'
        work_item_last_job_model_json['command_object_id'] = 'testString'
        work_item_last_job_model_json['command_name'] = 'workspace_plan'
        work_item_last_job_model_json['job_status'] = 'job_pending'
        work_item_last_job_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of WorkItemLastJob by calling from_dict on the json representation
        work_item_last_job_model = WorkItemLastJob.from_dict(work_item_last_job_model_json)
        assert work_item_last_job_model != False

        # Construct a model instance of WorkItemLastJob by calling from_dict on the json representation
        work_item_last_job_model_dict = WorkItemLastJob.from_dict(work_item_last_job_model_json).__dict__
        work_item_last_job_model2 = WorkItemLastJob(**work_item_last_job_model_dict)

        # Verify the model instances are equivalent
        assert work_item_last_job_model == work_item_last_job_model2

        # Convert model instance back to dict and verify no loss of data
        work_item_last_job_model_json2 = work_item_last_job_model.to_dict()
        assert work_item_last_job_model_json2 == work_item_last_job_model_json

class TestWorkspace():
    """
    Test Class for Workspace
    """

    def test_workspace_serialization(self):
        """
        Test serialization/deserialization for Workspace
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        variable_metadata_model = {} # VariableMetadata
        variable_metadata_model['type'] = 'boolean'
        variable_metadata_model['aliases'] = ['testString']
        variable_metadata_model['description'] = 'testString'
        variable_metadata_model['default_value'] = 'testString'
        variable_metadata_model['secure'] = True
        variable_metadata_model['immutable'] = True
        variable_metadata_model['hidden'] = True
        variable_metadata_model['options'] = ['testString']
        variable_metadata_model['min_value'] = 38
        variable_metadata_model['max_value'] = 38
        variable_metadata_model['min_length'] = 38
        variable_metadata_model['max_length'] = 38
        variable_metadata_model['matches'] = 'testString'
        variable_metadata_model['position'] = 38
        variable_metadata_model['group_by'] = 'testString'
        variable_metadata_model['source'] = 'testString'
        variable_metadata_model['foo'] = { 'foo': 'bar' }

        variable_data_model = {} # VariableData
        variable_data_model['name'] = 'testString'
        variable_data_model['value'] = 'testString'
        variable_data_model['metadata'] = variable_metadata_model
        variable_data_model['link'] = 'testString'
        variable_data_model['foo'] = { 'foo': 'bar' }

        workspace_lite_state_model = {} # WorkspaceLiteState
        workspace_lite_state_model['status_code'] = 'normal'
        workspace_lite_state_model['status_message'] = 'testString'
        workspace_lite_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        external_source_git_model = {} # ExternalSourceGit
        external_source_git_model['computed_git_repo_url'] = 'testString'
        external_source_git_model['git_repo_url'] = 'testString'
        external_source_git_model['git_token'] = 'testString'
        external_source_git_model['git_repo_folder'] = 'testString'
        external_source_git_model['git_release'] = 'testString'
        external_source_git_model['git_branch'] = 'testString'
        external_source_git_model['foo'] = { 'foo': 'bar' }

        external_source_catalog_model = {} # ExternalSourceCatalog
        external_source_catalog_model['catalog_name'] = 'testString'
        external_source_catalog_model['offering_name'] = 'testString'
        external_source_catalog_model['offering_version'] = 'testString'
        external_source_catalog_model['offering_kind'] = 'testString'
        external_source_catalog_model['offering_id'] = 'testString'
        external_source_catalog_model['offering_version_id'] = 'testString'
        external_source_catalog_model['offering_repo_url'] = 'testString'
        external_source_catalog_model['foo'] = { 'foo': 'bar' }

        external_source_cos_bucket_model = {} # ExternalSourceCosBucket
        external_source_cos_bucket_model['cos_bucket_url'] = 'testString'
        external_source_cos_bucket_model['foo'] = { 'foo': 'bar' }

        external_source_model = {} # ExternalSource
        external_source_model['source_type'] = 'local'
        external_source_model['git'] = external_source_git_model
        external_source_model['catalog'] = external_source_catalog_model
        external_source_model['cos_bucket'] = external_source_cos_bucket_model
        external_source_model['foo'] = { 'foo': 'bar' }

        job_status_template_model = {} # JobStatusTemplate
        job_status_template_model['template_id'] = 'testString'
        job_status_template_model['template_name'] = 'testString'
        job_status_template_model['flow_index'] = 38
        job_status_template_model['status_code'] = 'job_pending'
        job_status_template_model['status_message'] = 'testString'
        job_status_template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        job_status_template_model['foo'] = { 'foo': 'bar' }

        template_model = {} # Template
        template_model['name'] = 'vpc_terraform / helm_front_end_app_micro_service'
        template_model['description'] = 'This template provisions clusters in production environment'
        template_model['type'] = 'testString'
        template_model['user_state'] = user_state_model
        template_model['source_type'] = 'local'
        template_model['source'] = external_source_model
        template_model['source_readme_url'] = 'testString'
        template_model['inputs'] = [variable_data_model]
        template_model['outputs'] = [variable_data_model]
        template_model['settings'] = [variable_data_model]
        template_model['inventory'] = 'testString'
        template_model['id'] = 'testString'
        template_model['source_created_at'] = '2020-01-28T18:40:40.123456Z'
        template_model['source_created_by'] = 'testString'
        template_model['source_updated_at'] = '2020-01-28T18:40:40.123456Z'
        template_model['source_updated_by'] = 'testString'
        template_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        template_model['created_by'] = 'testString'
        template_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        template_model['updated_by'] = 'testString'
        template_model['status'] = job_status_template_model
        template_model['sys_lock'] = system_lock_model
        template_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a Workspace model
        workspace_model_json = {}
        workspace_model_json['name'] = 'My Workspace'
        workspace_model_json['description'] = 'This workspace manages front-end micro service for production environment'
        workspace_model_json['resource_group'] = 'testString'
        workspace_model_json['tags'] = ['testString']
        workspace_model_json['destroy_resources_on_delete'] = True
        workspace_model_json['location'] = 'us-south'
        workspace_model_json['user_state'] = user_state_model
        workspace_model_json['command_parameter'] = 'testString'
        workspace_model_json['inputs'] = [variable_data_model]
        workspace_model_json['outputs'] = [variable_data_model]
        workspace_model_json['settings'] = [variable_data_model]
        workspace_model_json['id'] = 'testString'
        workspace_model_json['crn'] = 'testString'
        workspace_model_json['account'] = 'testString'
        workspace_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        workspace_model_json['created_by'] = 'testString'
        workspace_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        workspace_model_json['updated_by'] = 'testString'
        workspace_model_json['state'] = workspace_lite_state_model
        workspace_model_json['sys_lock'] = system_lock_model
        workspace_model_json['templates'] = [template_model]
        workspace_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of Workspace by calling from_dict on the json representation
        workspace_model = Workspace.from_dict(workspace_model_json)
        assert workspace_model != False

        # Construct a model instance of Workspace by calling from_dict on the json representation
        workspace_model_dict = Workspace.from_dict(workspace_model_json).__dict__
        workspace_model2 = Workspace(**workspace_model_dict)

        # Verify the model instances are equivalent
        assert workspace_model == workspace_model2

        # Convert model instance back to dict and verify no loss of data
        workspace_model_json2 = workspace_model.to_dict()
        assert workspace_model_json2 == workspace_model_json

class TestWorkspaceList():
    """
    Test Class for WorkspaceList
    """

    def test_workspace_list_serialization(self):
        """
        Test serialization/deserialization for WorkspaceList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        workspace_lite_state_model = {} # WorkspaceLiteState
        workspace_lite_state_model['status_code'] = 'normal'
        workspace_lite_state_model['status_message'] = 'testString'
        workspace_lite_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        workspace_lite_model = {} # WorkspaceLite
        workspace_lite_model['name'] = 'testString'
        workspace_lite_model['description'] = 'testString'
        workspace_lite_model['id'] = 'testString'
        workspace_lite_model['crn'] = 'testString'
        workspace_lite_model['location'] = 'us-south'
        workspace_lite_model['resource_group'] = 'testString'
        workspace_lite_model['tags'] = ['testString']
        workspace_lite_model['user_state'] = user_state_model
        workspace_lite_model['state'] = workspace_lite_state_model
        workspace_lite_model['sys_lock'] = system_lock_model
        workspace_lite_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        workspace_lite_model['created_by'] = 'testString'
        workspace_lite_model['updated_at'] = '2020-01-28T18:40:40.123456Z'
        workspace_lite_model['updated_by'] = 'testString'
        workspace_lite_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a WorkspaceList model
        workspace_list_model_json = {}
        workspace_list_model_json['total_count'] = 26
        workspace_list_model_json['limit'] = 26
        workspace_list_model_json['offset'] = 26
        workspace_list_model_json['workspaces'] = [workspace_lite_model]
        workspace_list_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of WorkspaceList by calling from_dict on the json representation
        workspace_list_model = WorkspaceList.from_dict(workspace_list_model_json)
        assert workspace_list_model != False

        # Construct a model instance of WorkspaceList by calling from_dict on the json representation
        workspace_list_model_dict = WorkspaceList.from_dict(workspace_list_model_json).__dict__
        workspace_list_model2 = WorkspaceList(**workspace_list_model_dict)

        # Verify the model instances are equivalent
        assert workspace_list_model == workspace_list_model2

        # Convert model instance back to dict and verify no loss of data
        workspace_list_model_json2 = workspace_list_model.to_dict()
        assert workspace_list_model_json2 == workspace_list_model_json

class TestWorkspaceLite():
    """
    Test Class for WorkspaceLite
    """

    def test_workspace_lite_serialization(self):
        """
        Test serialization/deserialization for WorkspaceLite
        """

        # Construct dict forms of any model objects needed in order to build this model.

        user_state_model = {} # UserState
        user_state_model['state'] = 'draft'
        user_state_model['set_by'] = 'testString'
        user_state_model['set_at'] = '2020-01-28T18:40:40.123456Z'
        user_state_model['foo'] = { 'foo': 'bar' }

        workspace_lite_state_model = {} # WorkspaceLiteState
        workspace_lite_state_model['status_code'] = 'normal'
        workspace_lite_state_model['status_message'] = 'testString'
        workspace_lite_state_model['foo'] = { 'foo': 'bar' }

        system_lock_model = {} # SystemLock
        system_lock_model['sys_locked'] = True
        system_lock_model['sys_locked_by'] = 'testString'
        system_lock_model['sys_locked_at'] = '2020-01-28T18:40:40.123456Z'
        system_lock_model['foo'] = { 'foo': 'bar' }

        # Construct a json representation of a WorkspaceLite model
        workspace_lite_model_json = {}
        workspace_lite_model_json['name'] = 'testString'
        workspace_lite_model_json['description'] = 'testString'
        workspace_lite_model_json['id'] = 'testString'
        workspace_lite_model_json['crn'] = 'testString'
        workspace_lite_model_json['location'] = 'us-south'
        workspace_lite_model_json['resource_group'] = 'testString'
        workspace_lite_model_json['tags'] = ['testString']
        workspace_lite_model_json['user_state'] = user_state_model
        workspace_lite_model_json['state'] = workspace_lite_state_model
        workspace_lite_model_json['sys_lock'] = system_lock_model
        workspace_lite_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        workspace_lite_model_json['created_by'] = 'testString'
        workspace_lite_model_json['updated_at'] = '2020-01-28T18:40:40.123456Z'
        workspace_lite_model_json['updated_by'] = 'testString'
        workspace_lite_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of WorkspaceLite by calling from_dict on the json representation
        workspace_lite_model = WorkspaceLite.from_dict(workspace_lite_model_json)
        assert workspace_lite_model != False

        # Construct a model instance of WorkspaceLite by calling from_dict on the json representation
        workspace_lite_model_dict = WorkspaceLite.from_dict(workspace_lite_model_json).__dict__
        workspace_lite_model2 = WorkspaceLite(**workspace_lite_model_dict)

        # Verify the model instances are equivalent
        assert workspace_lite_model == workspace_lite_model2

        # Convert model instance back to dict and verify no loss of data
        workspace_lite_model_json2 = workspace_lite_model.to_dict()
        assert workspace_lite_model_json2 == workspace_lite_model_json

class TestWorkspaceLiteState():
    """
    Test Class for WorkspaceLiteState
    """

    def test_workspace_lite_state_serialization(self):
        """
        Test serialization/deserialization for WorkspaceLiteState
        """

        # Construct a json representation of a WorkspaceLiteState model
        workspace_lite_state_model_json = {}
        workspace_lite_state_model_json['status_code'] = 'normal'
        workspace_lite_state_model_json['status_message'] = 'testString'
        workspace_lite_state_model_json['foo'] = { 'foo': 'bar' }

        # Construct a model instance of WorkspaceLiteState by calling from_dict on the json representation
        workspace_lite_state_model = WorkspaceLiteState.from_dict(workspace_lite_state_model_json)
        assert workspace_lite_state_model != False

        # Construct a model instance of WorkspaceLiteState by calling from_dict on the json representation
        workspace_lite_state_model_dict = WorkspaceLiteState.from_dict(workspace_lite_state_model_json).__dict__
        workspace_lite_state_model2 = WorkspaceLiteState(**workspace_lite_state_model_dict)

        # Verify the model instances are equivalent
        assert workspace_lite_state_model == workspace_lite_state_model2

        # Convert model instance back to dict and verify no loss of data
        workspace_lite_state_model_json2 = workspace_lite_state_model.to_dict()
        assert workspace_lite_state_model_json2 == workspace_lite_state_model_json


# endregion
##############################################################################
# End of Model Tests
##############################################################################
