/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package schematicsv1_test

import (
	"bytes"
	"com.ibm.cloud/schematicsv1"
	"context"
	"fmt"
	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/go-openapi/strfmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"io"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"os"
	"time"
)

var _ = Describe(`SchematicsV1`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematicsService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "https://schematicsv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
					URL: "https://testService/api",
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				err := schematicsService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematicsv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListSchematicsLocation(listSchematicsLocationOptions *ListSchematicsLocationOptions) - Operation response error`, func() {
		listSchematicsLocationPath := "/v1/locations"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSchematicsLocationPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSchematicsLocation with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListSchematicsLocationOptions model
				listSchematicsLocationOptionsModel := new(schematicsv1.ListSchematicsLocationOptions)
				listSchematicsLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListSchematicsLocation(listSchematicsLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListSchematicsLocation(listSchematicsLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListSchematicsLocation(listSchematicsLocationOptions *ListSchematicsLocationOptions)`, func() {
		listSchematicsLocationPath := "/v1/locations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSchematicsLocationPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"name": "Name", "id": "ID", "country": "Country", "geography": "Geography", "geography_code": "GeographyCode", "metro": "Metro", "multizone_metro": "MultizoneMetro", "kind": "Kind", "paired_region": ["PairedRegion"], "restricted": true}]`)
				}))
			})
			It(`Invoke ListSchematicsLocation successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListSchematicsLocationOptions model
				listSchematicsLocationOptionsModel := new(schematicsv1.ListSchematicsLocationOptions)
				listSchematicsLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListSchematicsLocationWithContext(ctx, listSchematicsLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListSchematicsLocation(listSchematicsLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListSchematicsLocationWithContext(ctx, listSchematicsLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSchematicsLocationPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"name": "Name", "id": "ID", "country": "Country", "geography": "Geography", "geography_code": "GeographyCode", "metro": "Metro", "multizone_metro": "MultizoneMetro", "kind": "Kind", "paired_region": ["PairedRegion"], "restricted": true}]`)
				}))
			})
			It(`Invoke ListSchematicsLocation successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListSchematicsLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSchematicsLocationOptions model
				listSchematicsLocationOptionsModel := new(schematicsv1.ListSchematicsLocationOptions)
				listSchematicsLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListSchematicsLocation(listSchematicsLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListSchematicsLocation with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListSchematicsLocationOptions model
				listSchematicsLocationOptionsModel := new(schematicsv1.ListSchematicsLocationOptions)
				listSchematicsLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListSchematicsLocation(listSchematicsLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListResourceGroup(listResourceGroupOptions *ListResourceGroupOptions) - Operation response error`, func() {
		listResourceGroupPath := "/v1/resource_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceGroupPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListResourceGroup with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListResourceGroupOptions model
				listResourceGroupOptionsModel := new(schematicsv1.ListResourceGroupOptions)
				listResourceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListResourceGroup(listResourceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListResourceGroup(listResourceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListResourceGroup(listResourceGroupOptions *ListResourceGroupOptions)`, func() {
		listResourceGroupPath := "/v1/resource_groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceGroupPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"account_id": "AccountID", "crn": "Crn", "default": false, "name": "Name", "resource_group_id": "ResourceGroupID", "state": "State"}]`)
				}))
			})
			It(`Invoke ListResourceGroup successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListResourceGroupOptions model
				listResourceGroupOptionsModel := new(schematicsv1.ListResourceGroupOptions)
				listResourceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListResourceGroupWithContext(ctx, listResourceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListResourceGroup(listResourceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListResourceGroupWithContext(ctx, listResourceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceGroupPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"account_id": "AccountID", "crn": "Crn", "default": false, "name": "Name", "resource_group_id": "ResourceGroupID", "state": "State"}]`)
				}))
			})
			It(`Invoke ListResourceGroup successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListResourceGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListResourceGroupOptions model
				listResourceGroupOptionsModel := new(schematicsv1.ListResourceGroupOptions)
				listResourceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListResourceGroup(listResourceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListResourceGroup with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListResourceGroupOptions model
				listResourceGroupOptionsModel := new(schematicsv1.ListResourceGroupOptions)
				listResourceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListResourceGroup(listResourceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSchematicsVersion(getSchematicsVersionOptions *GetSchematicsVersionOptions) - Operation response error`, func() {
		getSchematicsVersionPath := "/v1/version"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsVersionPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSchematicsVersion with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetSchematicsVersionOptions model
				getSchematicsVersionOptionsModel := new(schematicsv1.GetSchematicsVersionOptions)
				getSchematicsVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetSchematicsVersion(getSchematicsVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetSchematicsVersion(getSchematicsVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSchematicsVersion(getSchematicsVersionOptions *GetSchematicsVersionOptions)`, func() {
		getSchematicsVersionPath := "/v1/version"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsVersionPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"builddate": "Builddate", "buildno": "Buildno", "commitsha": "Commitsha", "helm_provider_version": "HelmProviderVersion", "helm_version": "HelmVersion", "supported_template_types": {"anyKey": "anyValue"}, "terraform_provider_version": "TerraformProviderVersion", "terraform_version": "TerraformVersion"}`)
				}))
			})
			It(`Invoke GetSchematicsVersion successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetSchematicsVersionOptions model
				getSchematicsVersionOptionsModel := new(schematicsv1.GetSchematicsVersionOptions)
				getSchematicsVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetSchematicsVersionWithContext(ctx, getSchematicsVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetSchematicsVersion(getSchematicsVersionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetSchematicsVersionWithContext(ctx, getSchematicsVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsVersionPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"builddate": "Builddate", "buildno": "Buildno", "commitsha": "Commitsha", "helm_provider_version": "HelmProviderVersion", "helm_version": "HelmVersion", "supported_template_types": {"anyKey": "anyValue"}, "terraform_provider_version": "TerraformProviderVersion", "terraform_version": "TerraformVersion"}`)
				}))
			})
			It(`Invoke GetSchematicsVersion successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetSchematicsVersion(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSchematicsVersionOptions model
				getSchematicsVersionOptionsModel := new(schematicsv1.GetSchematicsVersionOptions)
				getSchematicsVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetSchematicsVersion(getSchematicsVersionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSchematicsVersion with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetSchematicsVersionOptions model
				getSchematicsVersionOptionsModel := new(schematicsv1.GetSchematicsVersionOptions)
				getSchematicsVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetSchematicsVersion(getSchematicsVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLocations(listLocationsOptions *ListLocationsOptions) - Operation response error`, func() {
		listLocationsPath := "/v2/locations"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLocations with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematicsv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLocations(listLocationsOptions *ListLocationsOptions)`, func() {
		listLocationsPath := "/v2/locations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"locations": [{"region": "Region", "metro": "Metro", "geography_code": "GeographyCode", "geography": "Geography", "country": "Country", "kind": "Kind", "paired_region": ["PairedRegion"], "restricted": true}]}`)
				}))
			})
			It(`Invoke ListLocations successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematicsv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListLocationsWithContext(ctx, listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListLocationsWithContext(ctx, listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"locations": [{"region": "Region", "metro": "Metro", "geography_code": "GeographyCode", "geography": "Geography", "country": "Country", "kind": "Kind", "paired_region": ["PairedRegion"], "restricted": true}]}`)
				}))
			})
			It(`Invoke ListLocations successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListLocations(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematicsv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLocations with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematicsv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ProcessTemplateMetaData(processTemplateMetaDataOptions *ProcessTemplateMetaDataOptions) - Operation response error`, func() {
		processTemplateMetaDataPath := "/v2/template_metadata_processor"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(processTemplateMetaDataPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ProcessTemplateMetaData with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the ProcessTemplateMetaDataOptions model
				processTemplateMetaDataOptionsModel := new(schematicsv1.ProcessTemplateMetaDataOptions)
				processTemplateMetaDataOptionsModel.TemplateType = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Source = externalSourceModel
				processTemplateMetaDataOptionsModel.Region = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.SourceType = core.StringPtr("local")
				processTemplateMetaDataOptionsModel.XGithubToken = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ProcessTemplateMetaData(processTemplateMetaDataOptions *ProcessTemplateMetaDataOptions)`, func() {
		processTemplateMetaDataPath := "/v2/template_metadata_processor"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(processTemplateMetaDataPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "Type", "variables": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ProcessTemplateMetaData successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the ProcessTemplateMetaDataOptions model
				processTemplateMetaDataOptionsModel := new(schematicsv1.ProcessTemplateMetaDataOptions)
				processTemplateMetaDataOptionsModel.TemplateType = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Source = externalSourceModel
				processTemplateMetaDataOptionsModel.Region = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.SourceType = core.StringPtr("local")
				processTemplateMetaDataOptionsModel.XGithubToken = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ProcessTemplateMetaDataWithContext(ctx, processTemplateMetaDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ProcessTemplateMetaDataWithContext(ctx, processTemplateMetaDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(processTemplateMetaDataPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "Type", "variables": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ProcessTemplateMetaData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ProcessTemplateMetaData(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the ProcessTemplateMetaDataOptions model
				processTemplateMetaDataOptionsModel := new(schematicsv1.ProcessTemplateMetaDataOptions)
				processTemplateMetaDataOptionsModel.TemplateType = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Source = externalSourceModel
				processTemplateMetaDataOptionsModel.Region = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.SourceType = core.StringPtr("local")
				processTemplateMetaDataOptionsModel.XGithubToken = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ProcessTemplateMetaData with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the ProcessTemplateMetaDataOptions model
				processTemplateMetaDataOptionsModel := new(schematicsv1.ProcessTemplateMetaDataOptions)
				processTemplateMetaDataOptionsModel.TemplateType = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Source = externalSourceModel
				processTemplateMetaDataOptionsModel.Region = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.SourceType = core.StringPtr("local")
				processTemplateMetaDataOptionsModel.XGithubToken = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ProcessTemplateMetaDataOptions model with no property values
				processTemplateMetaDataOptionsModelNew := new(schematicsv1.ProcessTemplateMetaDataOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematicsService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "https://schematicsv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
					URL: "https://testService/api",
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				err := schematicsService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematicsv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListWorkspaces(listWorkspacesOptions *ListWorkspacesOptions) - Operation response error`, func() {
		listWorkspacesPath := "/v1/workspaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListWorkspaces with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematicsv1.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListWorkspaces(listWorkspacesOptions *ListWorkspacesOptions)`, func() {
		listWorkspacesPath := "/v1/workspaces"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"count": 5, "limit": 5, "offset": 6, "workspaces": [{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}}]}`)
				}))
			})
			It(`Invoke ListWorkspaces successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematicsv1.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListWorkspacesWithContext(ctx, listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListWorkspacesWithContext(ctx, listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"count": 5, "limit": 5, "offset": 6, "workspaces": [{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}}]}`)
				}))
			})
			It(`Invoke ListWorkspaces successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListWorkspaces(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematicsv1.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListWorkspaces with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematicsv1.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateWorkspace(createWorkspaceOptions *CreateWorkspaceOptions) - Operation response error`, func() {
		createWorkspacePath := "/v1/workspaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspacePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateWorkspace with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoRequest model
				templateRepoRequestModel := new(schematicsv1.TemplateRepoRequest)
				templateRepoRequestModel.Branch = core.StringPtr("testString")
				templateRepoRequestModel.Release = core.StringPtr("testString")
				templateRepoRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusRequest model
				workspaceStatusRequestModel := new(schematicsv1.WorkspaceStatusRequest)
				workspaceStatusRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematicsv1.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.AppliedShareddataIds = []string{"testString"}
				createWorkspaceOptionsModel.CatalogRef = catalogRefModel
				createWorkspaceOptionsModel.Description = core.StringPtr("testString")
				createWorkspaceOptionsModel.Location = core.StringPtr("testString")
				createWorkspaceOptionsModel.Name = core.StringPtr("testString")
				createWorkspaceOptionsModel.ResourceGroup = core.StringPtr("testString")
				createWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				createWorkspaceOptionsModel.Tags = []string{"testString"}
				createWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				createWorkspaceOptionsModel.TemplateRef = core.StringPtr("testString")
				createWorkspaceOptionsModel.TemplateRepo = templateRepoRequestModel
				createWorkspaceOptionsModel.Type = []string{"testString"}
				createWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusRequestModel
				createWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateWorkspace(createWorkspaceOptions *CreateWorkspaceOptions)`, func() {
		createWorkspacePath := "/v1/workspaces"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}}`)
				}))
			})
			It(`Invoke CreateWorkspace successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoRequest model
				templateRepoRequestModel := new(schematicsv1.TemplateRepoRequest)
				templateRepoRequestModel.Branch = core.StringPtr("testString")
				templateRepoRequestModel.Release = core.StringPtr("testString")
				templateRepoRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusRequest model
				workspaceStatusRequestModel := new(schematicsv1.WorkspaceStatusRequest)
				workspaceStatusRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematicsv1.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.AppliedShareddataIds = []string{"testString"}
				createWorkspaceOptionsModel.CatalogRef = catalogRefModel
				createWorkspaceOptionsModel.Description = core.StringPtr("testString")
				createWorkspaceOptionsModel.Location = core.StringPtr("testString")
				createWorkspaceOptionsModel.Name = core.StringPtr("testString")
				createWorkspaceOptionsModel.ResourceGroup = core.StringPtr("testString")
				createWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				createWorkspaceOptionsModel.Tags = []string{"testString"}
				createWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				createWorkspaceOptionsModel.TemplateRef = core.StringPtr("testString")
				createWorkspaceOptionsModel.TemplateRepo = templateRepoRequestModel
				createWorkspaceOptionsModel.Type = []string{"testString"}
				createWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusRequestModel
				createWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateWorkspaceWithContext(ctx, createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateWorkspaceWithContext(ctx, createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}}`)
				}))
			})
			It(`Invoke CreateWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoRequest model
				templateRepoRequestModel := new(schematicsv1.TemplateRepoRequest)
				templateRepoRequestModel.Branch = core.StringPtr("testString")
				templateRepoRequestModel.Release = core.StringPtr("testString")
				templateRepoRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusRequest model
				workspaceStatusRequestModel := new(schematicsv1.WorkspaceStatusRequest)
				workspaceStatusRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematicsv1.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.AppliedShareddataIds = []string{"testString"}
				createWorkspaceOptionsModel.CatalogRef = catalogRefModel
				createWorkspaceOptionsModel.Description = core.StringPtr("testString")
				createWorkspaceOptionsModel.Location = core.StringPtr("testString")
				createWorkspaceOptionsModel.Name = core.StringPtr("testString")
				createWorkspaceOptionsModel.ResourceGroup = core.StringPtr("testString")
				createWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				createWorkspaceOptionsModel.Tags = []string{"testString"}
				createWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				createWorkspaceOptionsModel.TemplateRef = core.StringPtr("testString")
				createWorkspaceOptionsModel.TemplateRepo = templateRepoRequestModel
				createWorkspaceOptionsModel.Type = []string{"testString"}
				createWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusRequestModel
				createWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateWorkspace with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoRequest model
				templateRepoRequestModel := new(schematicsv1.TemplateRepoRequest)
				templateRepoRequestModel.Branch = core.StringPtr("testString")
				templateRepoRequestModel.Release = core.StringPtr("testString")
				templateRepoRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusRequest model
				workspaceStatusRequestModel := new(schematicsv1.WorkspaceStatusRequest)
				workspaceStatusRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematicsv1.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.AppliedShareddataIds = []string{"testString"}
				createWorkspaceOptionsModel.CatalogRef = catalogRefModel
				createWorkspaceOptionsModel.Description = core.StringPtr("testString")
				createWorkspaceOptionsModel.Location = core.StringPtr("testString")
				createWorkspaceOptionsModel.Name = core.StringPtr("testString")
				createWorkspaceOptionsModel.ResourceGroup = core.StringPtr("testString")
				createWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				createWorkspaceOptionsModel.Tags = []string{"testString"}
				createWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				createWorkspaceOptionsModel.TemplateRef = core.StringPtr("testString")
				createWorkspaceOptionsModel.TemplateRepo = templateRepoRequestModel
				createWorkspaceOptionsModel.Type = []string{"testString"}
				createWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusRequestModel
				createWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspace(getWorkspaceOptions *GetWorkspaceOptions) - Operation response error`, func() {
		getWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspacePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspace with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematicsv1.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspace(getWorkspaceOptions *GetWorkspaceOptions)`, func() {
		getWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}}`)
				}))
			})
			It(`Invoke GetWorkspace successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematicsv1.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceWithContext(ctx, getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceWithContext(ctx, getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}}`)
				}))
			})
			It(`Invoke GetWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematicsv1.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspace with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematicsv1.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceOptions model with no property values
				getWorkspaceOptionsModelNew := new(schematicsv1.GetWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspace(getWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceWorkspace(replaceWorkspaceOptions *ReplaceWorkspaceOptions) - Operation response error`, func() {
		replaceWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceWorkspace with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematicsv1.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.CatalogRef = catalogRefModel
				replaceWorkspaceOptionsModel.Description = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Name = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				replaceWorkspaceOptionsModel.Tags = []string{"testString"}
				replaceWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				replaceWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				replaceWorkspaceOptionsModel.Type = []string{"testString"}
				replaceWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				replaceWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceWorkspace(replaceWorkspaceOptions *ReplaceWorkspaceOptions)`, func() {
		replaceWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}}`)
				}))
			})
			It(`Invoke ReplaceWorkspace successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematicsv1.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.CatalogRef = catalogRefModel
				replaceWorkspaceOptionsModel.Description = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Name = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				replaceWorkspaceOptionsModel.Tags = []string{"testString"}
				replaceWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				replaceWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				replaceWorkspaceOptionsModel.Type = []string{"testString"}
				replaceWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				replaceWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ReplaceWorkspaceWithContext(ctx, replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ReplaceWorkspaceWithContext(ctx, replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}}`)
				}))
			})
			It(`Invoke ReplaceWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ReplaceWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematicsv1.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.CatalogRef = catalogRefModel
				replaceWorkspaceOptionsModel.Description = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Name = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				replaceWorkspaceOptionsModel.Tags = []string{"testString"}
				replaceWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				replaceWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				replaceWorkspaceOptionsModel.Type = []string{"testString"}
				replaceWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				replaceWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceWorkspace with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematicsv1.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.CatalogRef = catalogRefModel
				replaceWorkspaceOptionsModel.Description = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Name = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				replaceWorkspaceOptionsModel.Tags = []string{"testString"}
				replaceWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				replaceWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				replaceWorkspaceOptionsModel.Type = []string{"testString"}
				replaceWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				replaceWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceWorkspaceOptions model with no property values
				replaceWorkspaceOptionsModelNew := new(schematicsv1.ReplaceWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteWorkspace(deleteWorkspaceOptions *DeleteWorkspaceOptions)`, func() {
		deleteWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWorkspacePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for destroy_resources query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke DeleteWorkspace successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the DeleteWorkspaceOptions model
				deleteWorkspaceOptionsModel := new(schematicsv1.DeleteWorkspaceOptions)
				deleteWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.DestroyResources = core.BoolPtr(true)
				deleteWorkspaceOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.DeleteWorkspaceWithContext(ctx, deleteWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.DeleteWorkspace(deleteWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.DeleteWorkspaceWithContext(ctx, deleteWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWorkspacePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for destroy_resources query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke DeleteWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.DeleteWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DeleteWorkspaceOptions model
				deleteWorkspaceOptionsModel := new(schematicsv1.DeleteWorkspaceOptions)
				deleteWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.DestroyResources = core.BoolPtr(true)
				deleteWorkspaceOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.DeleteWorkspace(deleteWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DeleteWorkspace with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteWorkspaceOptions model
				deleteWorkspaceOptionsModel := new(schematicsv1.DeleteWorkspaceOptions)
				deleteWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.DestroyResources = core.BoolPtr(true)
				deleteWorkspaceOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.DeleteWorkspace(deleteWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DeleteWorkspaceOptions model with no property values
				deleteWorkspaceOptionsModelNew := new(schematicsv1.DeleteWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.DeleteWorkspace(deleteWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateWorkspace(updateWorkspaceOptions *UpdateWorkspaceOptions) - Operation response error`, func() {
		updateWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateWorkspace with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematicsv1.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.CatalogRef = catalogRefModel
				updateWorkspaceOptionsModel.Description = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Name = core.StringPtr("testString")
				updateWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				updateWorkspaceOptionsModel.Tags = []string{"testString"}
				updateWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				updateWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				updateWorkspaceOptionsModel.Type = []string{"testString"}
				updateWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				updateWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateWorkspace(updateWorkspaceOptions *UpdateWorkspaceOptions)`, func() {
		updateWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}}`)
				}))
			})
			It(`Invoke UpdateWorkspace successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematicsv1.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.CatalogRef = catalogRefModel
				updateWorkspaceOptionsModel.Description = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Name = core.StringPtr("testString")
				updateWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				updateWorkspaceOptionsModel.Tags = []string{"testString"}
				updateWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				updateWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				updateWorkspaceOptionsModel.Type = []string{"testString"}
				updateWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				updateWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdateWorkspaceWithContext(ctx, updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdateWorkspaceWithContext(ctx, updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}}`)
				}))
			})
			It(`Invoke UpdateWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdateWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematicsv1.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.CatalogRef = catalogRefModel
				updateWorkspaceOptionsModel.Description = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Name = core.StringPtr("testString")
				updateWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				updateWorkspaceOptionsModel.Tags = []string{"testString"}
				updateWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				updateWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				updateWorkspaceOptionsModel.Type = []string{"testString"}
				updateWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				updateWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateWorkspace with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime()

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematicsv1.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.CatalogRef = catalogRefModel
				updateWorkspaceOptionsModel.Description = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Name = core.StringPtr("testString")
				updateWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				updateWorkspaceOptionsModel.Tags = []string{"testString"}
				updateWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				updateWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				updateWorkspaceOptionsModel.Type = []string{"testString"}
				updateWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				updateWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateWorkspaceOptions model with no property values
				updateWorkspaceOptionsModelNew := new(schematicsv1.UpdateWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UpdateWorkspace(updateWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceReadme(getWorkspaceReadmeOptions *GetWorkspaceReadmeOptions) - Operation response error`, func() {
		getWorkspaceReadmePath := "/v1/workspaces/testString/templates/readme"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceReadmePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["ref"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["formatted"]).To(Equal([]string{"markdown"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceReadme with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceReadmeOptions model
				getWorkspaceReadmeOptionsModel := new(schematicsv1.GetWorkspaceReadmeOptions)
				getWorkspaceReadmeOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Ref = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Formatted = core.StringPtr("markdown")
				getWorkspaceReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceReadme(getWorkspaceReadmeOptions *GetWorkspaceReadmeOptions)`, func() {
		getWorkspaceReadmePath := "/v1/workspaces/testString/templates/readme"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceReadmePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["ref"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["formatted"]).To(Equal([]string{"markdown"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"readme": "Readme"}`)
				}))
			})
			It(`Invoke GetWorkspaceReadme successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceReadmeOptions model
				getWorkspaceReadmeOptionsModel := new(schematicsv1.GetWorkspaceReadmeOptions)
				getWorkspaceReadmeOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Ref = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Formatted = core.StringPtr("markdown")
				getWorkspaceReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceReadmeWithContext(ctx, getWorkspaceReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceReadmeWithContext(ctx, getWorkspaceReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceReadmePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["ref"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["formatted"]).To(Equal([]string{"markdown"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"readme": "Readme"}`)
				}))
			})
			It(`Invoke GetWorkspaceReadme successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceReadme(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceReadmeOptions model
				getWorkspaceReadmeOptionsModel := new(schematicsv1.GetWorkspaceReadmeOptions)
				getWorkspaceReadmeOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Ref = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Formatted = core.StringPtr("markdown")
				getWorkspaceReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceReadme with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceReadmeOptions model
				getWorkspaceReadmeOptionsModel := new(schematicsv1.GetWorkspaceReadmeOptions)
				getWorkspaceReadmeOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Ref = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Formatted = core.StringPtr("markdown")
				getWorkspaceReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceReadmeOptions model with no property values
				getWorkspaceReadmeOptionsModelNew := new(schematicsv1.GetWorkspaceReadmeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`TemplateRepoUpload(templateRepoUploadOptions *TemplateRepoUploadOptions) - Operation response error`, func() {
		templateRepoUploadPath := "/v1/workspaces/testString/template_data/testString/template_repo_upload"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(templateRepoUploadPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke TemplateRepoUpload with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TemplateRepoUploadOptions model
				templateRepoUploadOptionsModel := new(schematicsv1.TemplateRepoUploadOptions)
				templateRepoUploadOptionsModel.WID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.TID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.File = CreateMockReader("This is a mock file.")
				templateRepoUploadOptionsModel.FileContentType = core.StringPtr("testString")
				templateRepoUploadOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`TemplateRepoUpload(templateRepoUploadOptions *TemplateRepoUploadOptions)`, func() {
		templateRepoUploadPath := "/v1/workspaces/testString/template_data/testString/template_repo_upload"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(templateRepoUploadPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke TemplateRepoUpload successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the TemplateRepoUploadOptions model
				templateRepoUploadOptionsModel := new(schematicsv1.TemplateRepoUploadOptions)
				templateRepoUploadOptionsModel.WID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.TID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.File = CreateMockReader("This is a mock file.")
				templateRepoUploadOptionsModel.FileContentType = core.StringPtr("testString")
				templateRepoUploadOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.TemplateRepoUploadWithContext(ctx, templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.TemplateRepoUploadWithContext(ctx, templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(templateRepoUploadPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke TemplateRepoUpload successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.TemplateRepoUpload(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the TemplateRepoUploadOptions model
				templateRepoUploadOptionsModel := new(schematicsv1.TemplateRepoUploadOptions)
				templateRepoUploadOptionsModel.WID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.TID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.File = CreateMockReader("This is a mock file.")
				templateRepoUploadOptionsModel.FileContentType = core.StringPtr("testString")
				templateRepoUploadOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke TemplateRepoUpload with error: Param validation error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:  testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TemplateRepoUploadOptions model
				templateRepoUploadOptionsModel := new(schematicsv1.TemplateRepoUploadOptions)
				// Invoke operation with invalid options model (negative test)
				result, response, operationErr := schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			It(`Invoke TemplateRepoUpload with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TemplateRepoUploadOptions model
				templateRepoUploadOptionsModel := new(schematicsv1.TemplateRepoUploadOptions)
				templateRepoUploadOptionsModel.WID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.TID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.File = CreateMockReader("This is a mock file.")
				templateRepoUploadOptionsModel.FileContentType = core.StringPtr("testString")
				templateRepoUploadOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the TemplateRepoUploadOptions model with no property values
				templateRepoUploadOptionsModelNew := new(schematicsv1.TemplateRepoUploadOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceInputs(getWorkspaceInputsOptions *GetWorkspaceInputsOptions) - Operation response error`, func() {
		getWorkspaceInputsPath := "/v1/workspaces/testString/template_data/testString/values"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceInputs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceInputsOptions model
				getWorkspaceInputsOptionsModel := new(schematicsv1.GetWorkspaceInputsOptions)
				getWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceInputs(getWorkspaceInputsOptions *GetWorkspaceInputsOptions)`, func() {
		getWorkspaceInputsPath := "/v1/workspaces/testString/template_data/testString/values"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"values_metadata": [{"anyKey": "anyValue"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceInputs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceInputsOptions model
				getWorkspaceInputsOptionsModel := new(schematicsv1.GetWorkspaceInputsOptions)
				getWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceInputsWithContext(ctx, getWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceInputsWithContext(ctx, getWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"values_metadata": [{"anyKey": "anyValue"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceInputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceInputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceInputsOptions model
				getWorkspaceInputsOptionsModel := new(schematicsv1.GetWorkspaceInputsOptions)
				getWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceInputs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceInputsOptions model
				getWorkspaceInputsOptionsModel := new(schematicsv1.GetWorkspaceInputsOptions)
				getWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceInputsOptions model with no property values
				getWorkspaceInputsOptionsModelNew := new(schematicsv1.GetWorkspaceInputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceWorkspaceInputs(replaceWorkspaceInputsOptions *ReplaceWorkspaceInputsOptions) - Operation response error`, func() {
		replaceWorkspaceInputsPath := "/v1/workspaces/testString/template_data/testString/values"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspaceInputsPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceWorkspaceInputs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceInputsOptions model
				replaceWorkspaceInputsOptionsModel := new(schematicsv1.ReplaceWorkspaceInputsOptions)
				replaceWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				replaceWorkspaceInputsOptionsModel.Values = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				replaceWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceWorkspaceInputs(replaceWorkspaceInputsOptions *ReplaceWorkspaceInputsOptions)`, func() {
		replaceWorkspaceInputsPath := "/v1/workspaces/testString/template_data/testString/values"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspaceInputsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"env_values": [{"anyKey": "anyValue"}], "values": "Values", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}`)
				}))
			})
			It(`Invoke ReplaceWorkspaceInputs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceInputsOptions model
				replaceWorkspaceInputsOptionsModel := new(schematicsv1.ReplaceWorkspaceInputsOptions)
				replaceWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				replaceWorkspaceInputsOptionsModel.Values = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				replaceWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ReplaceWorkspaceInputsWithContext(ctx, replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ReplaceWorkspaceInputsWithContext(ctx, replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspaceInputsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"env_values": [{"anyKey": "anyValue"}], "values": "Values", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}`)
				}))
			})
			It(`Invoke ReplaceWorkspaceInputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ReplaceWorkspaceInputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceInputsOptions model
				replaceWorkspaceInputsOptionsModel := new(schematicsv1.ReplaceWorkspaceInputsOptions)
				replaceWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				replaceWorkspaceInputsOptionsModel.Values = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				replaceWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceWorkspaceInputs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceInputsOptions model
				replaceWorkspaceInputsOptionsModel := new(schematicsv1.ReplaceWorkspaceInputsOptions)
				replaceWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				replaceWorkspaceInputsOptionsModel.Values = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				replaceWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceWorkspaceInputsOptions model with no property values
				replaceWorkspaceInputsOptionsModelNew := new(schematicsv1.ReplaceWorkspaceInputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAllWorkspaceInputs(getAllWorkspaceInputsOptions *GetAllWorkspaceInputsOptions) - Operation response error`, func() {
		getAllWorkspaceInputsPath := "/v1/workspaces/testString/templates/values"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAllWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAllWorkspaceInputs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetAllWorkspaceInputsOptions model
				getAllWorkspaceInputsOptionsModel := new(schematicsv1.GetAllWorkspaceInputsOptions)
				getAllWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getAllWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAllWorkspaceInputs(getAllWorkspaceInputsOptions *GetAllWorkspaceInputsOptions)`, func() {
		getAllWorkspaceInputsPath := "/v1/workspaces/testString/templates/values"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAllWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_created_on": "ClusterCreatedOn", "cluster_id": "ClusterID", "cluster_name": "ClusterName", "cluster_type": "ClusterType", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID", "worker_count": 11, "worker_machine_type": "WorkerMachineType"}, "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}]}`)
				}))
			})
			It(`Invoke GetAllWorkspaceInputs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetAllWorkspaceInputsOptions model
				getAllWorkspaceInputsOptionsModel := new(schematicsv1.GetAllWorkspaceInputsOptions)
				getAllWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getAllWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetAllWorkspaceInputsWithContext(ctx, getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetAllWorkspaceInputsWithContext(ctx, getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAllWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_created_on": "ClusterCreatedOn", "cluster_id": "ClusterID", "cluster_name": "ClusterName", "cluster_type": "ClusterType", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID", "worker_count": 11, "worker_machine_type": "WorkerMachineType"}, "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}]}`)
				}))
			})
			It(`Invoke GetAllWorkspaceInputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetAllWorkspaceInputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAllWorkspaceInputsOptions model
				getAllWorkspaceInputsOptionsModel := new(schematicsv1.GetAllWorkspaceInputsOptions)
				getAllWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getAllWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAllWorkspaceInputs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetAllWorkspaceInputsOptions model
				getAllWorkspaceInputsOptionsModel := new(schematicsv1.GetAllWorkspaceInputsOptions)
				getAllWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getAllWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAllWorkspaceInputsOptions model with no property values
				getAllWorkspaceInputsOptionsModelNew := new(schematicsv1.GetAllWorkspaceInputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceInputMetadata(getWorkspaceInputMetadataOptions *GetWorkspaceInputMetadataOptions)`, func() {
		getWorkspaceInputMetadataPath := "/v1/workspaces/testString/template_data/testString/values_metadata"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputMetadataPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"anyKey": "anyValue"}]`)
				}))
			})
			It(`Invoke GetWorkspaceInputMetadata successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceInputMetadataOptions model
				getWorkspaceInputMetadataOptionsModel := new(schematicsv1.GetWorkspaceInputMetadataOptions)
				getWorkspaceInputMetadataOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceInputMetadataWithContext(ctx, getWorkspaceInputMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceInputMetadata(getWorkspaceInputMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceInputMetadataWithContext(ctx, getWorkspaceInputMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputMetadataPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"anyKey": "anyValue"}]`)
				}))
			})
			It(`Invoke GetWorkspaceInputMetadata successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceInputMetadata(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceInputMetadataOptions model
				getWorkspaceInputMetadataOptionsModel := new(schematicsv1.GetWorkspaceInputMetadataOptions)
				getWorkspaceInputMetadataOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceInputMetadata(getWorkspaceInputMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceInputMetadata with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceInputMetadataOptions model
				getWorkspaceInputMetadataOptionsModel := new(schematicsv1.GetWorkspaceInputMetadataOptions)
				getWorkspaceInputMetadataOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceInputMetadata(getWorkspaceInputMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceInputMetadataOptions model with no property values
				getWorkspaceInputMetadataOptionsModelNew := new(schematicsv1.GetWorkspaceInputMetadataOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceInputMetadata(getWorkspaceInputMetadataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceOutputs(getWorkspaceOutputsOptions *GetWorkspaceOutputsOptions) - Operation response error`, func() {
		getWorkspaceOutputsPath := "/v1/workspaces/testString/output_values"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceOutputsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceOutputs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOutputsOptions model
				getWorkspaceOutputsOptionsModel := new(schematicsv1.GetWorkspaceOutputsOptions)
				getWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceOutputs(getWorkspaceOutputsOptions *GetWorkspaceOutputsOptions)`, func() {
		getWorkspaceOutputsPath := "/v1/workspaces/testString/output_values"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceOutputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"folder": "Folder", "id": "ID", "output_values": [{"anyKey": "anyValue"}], "value_type": "ValueType"}]`)
				}))
			})
			It(`Invoke GetWorkspaceOutputs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceOutputsOptions model
				getWorkspaceOutputsOptionsModel := new(schematicsv1.GetWorkspaceOutputsOptions)
				getWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceOutputsWithContext(ctx, getWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceOutputsWithContext(ctx, getWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceOutputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"folder": "Folder", "id": "ID", "output_values": [{"anyKey": "anyValue"}], "value_type": "ValueType"}]`)
				}))
			})
			It(`Invoke GetWorkspaceOutputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceOutputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceOutputsOptions model
				getWorkspaceOutputsOptionsModel := new(schematicsv1.GetWorkspaceOutputsOptions)
				getWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceOutputs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOutputsOptions model
				getWorkspaceOutputsOptionsModel := new(schematicsv1.GetWorkspaceOutputsOptions)
				getWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceOutputsOptions model with no property values
				getWorkspaceOutputsOptionsModelNew := new(schematicsv1.GetWorkspaceOutputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceResources(getWorkspaceResourcesOptions *GetWorkspaceResourcesOptions) - Operation response error`, func() {
		getWorkspaceResourcesPath := "/v1/workspaces/testString/resources"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceResourcesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceResources with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceResourcesOptions model
				getWorkspaceResourcesOptionsModel := new(schematicsv1.GetWorkspaceResourcesOptions)
				getWorkspaceResourcesOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceResources(getWorkspaceResourcesOptions *GetWorkspaceResourcesOptions)`, func() {
		getWorkspaceResourcesPath := "/v1/workspaces/testString/resources"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceResourcesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"folder": "Folder", "id": "ID", "null_resources": [{"anyKey": "anyValue"}], "related_resources": [{"anyKey": "anyValue"}], "resources": [{"anyKey": "anyValue"}], "resources_count": 14, "template_type": "TemplateType"}]`)
				}))
			})
			It(`Invoke GetWorkspaceResources successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceResourcesOptions model
				getWorkspaceResourcesOptionsModel := new(schematicsv1.GetWorkspaceResourcesOptions)
				getWorkspaceResourcesOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceResourcesWithContext(ctx, getWorkspaceResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceResourcesWithContext(ctx, getWorkspaceResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceResourcesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"folder": "Folder", "id": "ID", "null_resources": [{"anyKey": "anyValue"}], "related_resources": [{"anyKey": "anyValue"}], "resources": [{"anyKey": "anyValue"}], "resources_count": 14, "template_type": "TemplateType"}]`)
				}))
			})
			It(`Invoke GetWorkspaceResources successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceResources(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceResourcesOptions model
				getWorkspaceResourcesOptionsModel := new(schematicsv1.GetWorkspaceResourcesOptions)
				getWorkspaceResourcesOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceResources with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceResourcesOptions model
				getWorkspaceResourcesOptionsModel := new(schematicsv1.GetWorkspaceResourcesOptions)
				getWorkspaceResourcesOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceResourcesOptions model with no property values
				getWorkspaceResourcesOptionsModelNew := new(schematicsv1.GetWorkspaceResourcesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceState(getWorkspaceStateOptions *GetWorkspaceStateOptions) - Operation response error`, func() {
		getWorkspaceStatePath := "/v1/workspaces/testString/state_stores"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceStatePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceState with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceStateOptions model
				getWorkspaceStateOptionsModel := new(schematicsv1.GetWorkspaceStateOptions)
				getWorkspaceStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceState(getWorkspaceStateOptions *GetWorkspaceStateOptions)`, func() {
		getWorkspaceStatePath := "/v1/workspaces/testString/state_stores"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceStatePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "state_store_url": "StateStoreURL"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceState successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceStateOptions model
				getWorkspaceStateOptionsModel := new(schematicsv1.GetWorkspaceStateOptions)
				getWorkspaceStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceStateWithContext(ctx, getWorkspaceStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceStateWithContext(ctx, getWorkspaceStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceStatePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "state_store_url": "StateStoreURL"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceState successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceState(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceStateOptions model
				getWorkspaceStateOptionsModel := new(schematicsv1.GetWorkspaceStateOptions)
				getWorkspaceStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceState with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceStateOptions model
				getWorkspaceStateOptionsModel := new(schematicsv1.GetWorkspaceStateOptions)
				getWorkspaceStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceStateOptions model with no property values
				getWorkspaceStateOptionsModelNew := new(schematicsv1.GetWorkspaceStateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceTemplateState(getWorkspaceTemplateStateOptions *GetWorkspaceTemplateStateOptions) - Operation response error`, func() {
		getWorkspaceTemplateStatePath := "/v1/workspaces/testString/runtime_data/testString/state_store"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateStatePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateState with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceTemplateStateOptions model
				getWorkspaceTemplateStateOptionsModel := new(schematicsv1.GetWorkspaceTemplateStateOptions)
				getWorkspaceTemplateStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceTemplateState(getWorkspaceTemplateStateOptions *GetWorkspaceTemplateStateOptions)`, func() {
		getWorkspaceTemplateStatePath := "/v1/workspaces/testString/runtime_data/testString/state_store"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateStatePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"version": 7, "terraform_version": "TerraformVersion", "serial": 6, "lineage": "Lineage", "modules": [{"anyKey": "anyValue"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateState successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceTemplateStateOptions model
				getWorkspaceTemplateStateOptionsModel := new(schematicsv1.GetWorkspaceTemplateStateOptions)
				getWorkspaceTemplateStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceTemplateStateWithContext(ctx, getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceTemplateStateWithContext(ctx, getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateStatePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"version": 7, "terraform_version": "TerraformVersion", "serial": 6, "lineage": "Lineage", "modules": [{"anyKey": "anyValue"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateState successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceTemplateState(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceTemplateStateOptions model
				getWorkspaceTemplateStateOptionsModel := new(schematicsv1.GetWorkspaceTemplateStateOptions)
				getWorkspaceTemplateStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceTemplateState with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceTemplateStateOptions model
				getWorkspaceTemplateStateOptionsModel := new(schematicsv1.GetWorkspaceTemplateStateOptions)
				getWorkspaceTemplateStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceTemplateStateOptions model with no property values
				getWorkspaceTemplateStateOptionsModelNew := new(schematicsv1.GetWorkspaceTemplateStateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptions *GetWorkspaceActivityLogsOptions) - Operation response error`, func() {
		getWorkspaceActivityLogsPath := "/v1/workspaces/testString/actions/testString/logs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityLogsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceActivityLogs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceActivityLogsOptions model
				getWorkspaceActivityLogsOptionsModel := new(schematicsv1.GetWorkspaceActivityLogsOptions)
				getWorkspaceActivityLogsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptions *GetWorkspaceActivityLogsOptions)`, func() {
		getWorkspaceActivityLogsPath := "/v1/workspaces/testString/actions/testString/logs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action_id": "ActionID", "name": "Name", "templates": [{"log_url": "LogURL", "template_id": "TemplateID", "template_type": "TemplateType"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceActivityLogs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceActivityLogsOptions model
				getWorkspaceActivityLogsOptionsModel := new(schematicsv1.GetWorkspaceActivityLogsOptions)
				getWorkspaceActivityLogsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceActivityLogsWithContext(ctx, getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceActivityLogsWithContext(ctx, getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action_id": "ActionID", "name": "Name", "templates": [{"log_url": "LogURL", "template_id": "TemplateID", "template_type": "TemplateType"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceActivityLogs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceActivityLogs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceActivityLogsOptions model
				getWorkspaceActivityLogsOptionsModel := new(schematicsv1.GetWorkspaceActivityLogsOptions)
				getWorkspaceActivityLogsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceActivityLogs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceActivityLogsOptions model
				getWorkspaceActivityLogsOptionsModel := new(schematicsv1.GetWorkspaceActivityLogsOptions)
				getWorkspaceActivityLogsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceActivityLogsOptions model with no property values
				getWorkspaceActivityLogsOptionsModelNew := new(schematicsv1.GetWorkspaceActivityLogsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceLogUrls(getWorkspaceLogUrlsOptions *GetWorkspaceLogUrlsOptions) - Operation response error`, func() {
		getWorkspaceLogUrlsPath := "/v1/workspaces/testString/log_stores"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceLogUrlsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceLogUrls with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceLogUrlsOptions model
				getWorkspaceLogUrlsOptionsModel := new(schematicsv1.GetWorkspaceLogUrlsOptions)
				getWorkspaceLogUrlsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceLogUrlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceLogUrls(getWorkspaceLogUrlsOptions *GetWorkspaceLogUrlsOptions)`, func() {
		getWorkspaceLogUrlsPath := "/v1/workspaces/testString/log_stores"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceLogUrlsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceLogUrls successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceLogUrlsOptions model
				getWorkspaceLogUrlsOptionsModel := new(schematicsv1.GetWorkspaceLogUrlsOptions)
				getWorkspaceLogUrlsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceLogUrlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceLogUrlsWithContext(ctx, getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceLogUrlsWithContext(ctx, getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceLogUrlsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceLogUrls successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceLogUrls(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceLogUrlsOptions model
				getWorkspaceLogUrlsOptionsModel := new(schematicsv1.GetWorkspaceLogUrlsOptions)
				getWorkspaceLogUrlsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceLogUrlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceLogUrls with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceLogUrlsOptions model
				getWorkspaceLogUrlsOptionsModel := new(schematicsv1.GetWorkspaceLogUrlsOptions)
				getWorkspaceLogUrlsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceLogUrlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceLogUrlsOptions model with no property values
				getWorkspaceLogUrlsOptionsModelNew := new(schematicsv1.GetWorkspaceLogUrlsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetTemplateLogs(getTemplateLogsOptions *GetTemplateLogsOptions)`, func() {
		getTemplateLogsPath := "/v1/workspaces/testString/runtime_data/testString/log_store"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for log_tf_cmd query parameter
					// TODO: Add check for log_tf_prefix query parameter
					// TODO: Add check for log_tf_null_resource query parameter
					// TODO: Add check for log_tf_ansible query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetTemplateLogs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetTemplateLogsOptions model
				getTemplateLogsOptionsModel := new(schematicsv1.GetTemplateLogsOptions)
				getTemplateLogsOptionsModel.WID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.TID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetTemplateLogsWithContext(ctx, getTemplateLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetTemplateLogs(getTemplateLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetTemplateLogsWithContext(ctx, getTemplateLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for log_tf_cmd query parameter
					// TODO: Add check for log_tf_prefix query parameter
					// TODO: Add check for log_tf_null_resource query parameter
					// TODO: Add check for log_tf_ansible query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetTemplateLogs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetTemplateLogs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTemplateLogsOptions model
				getTemplateLogsOptionsModel := new(schematicsv1.GetTemplateLogsOptions)
				getTemplateLogsOptionsModel.WID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.TID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetTemplateLogs(getTemplateLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTemplateLogs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetTemplateLogsOptions model
				getTemplateLogsOptionsModel := new(schematicsv1.GetTemplateLogsOptions)
				getTemplateLogsOptionsModel.WID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.TID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetTemplateLogs(getTemplateLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTemplateLogsOptions model with no property values
				getTemplateLogsOptionsModelNew := new(schematicsv1.GetTemplateLogsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetTemplateLogs(getTemplateLogsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetTemplateActivityLog(getTemplateActivityLogOptions *GetTemplateActivityLogOptions)`, func() {
		getTemplateActivityLogPath := "/v1/workspaces/testString/runtime_data/testString/log_store/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateActivityLogPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for log_tf_cmd query parameter
					// TODO: Add check for log_tf_prefix query parameter
					// TODO: Add check for log_tf_null_resource query parameter
					// TODO: Add check for log_tf_ansible query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetTemplateActivityLog successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetTemplateActivityLogOptions model
				getTemplateActivityLogOptionsModel := new(schematicsv1.GetTemplateActivityLogOptions)
				getTemplateActivityLogOptionsModel.WID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.TID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.ActivityID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetTemplateActivityLogWithContext(ctx, getTemplateActivityLogOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetTemplateActivityLog(getTemplateActivityLogOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetTemplateActivityLogWithContext(ctx, getTemplateActivityLogOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateActivityLogPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for log_tf_cmd query parameter
					// TODO: Add check for log_tf_prefix query parameter
					// TODO: Add check for log_tf_null_resource query parameter
					// TODO: Add check for log_tf_ansible query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetTemplateActivityLog successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetTemplateActivityLog(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTemplateActivityLogOptions model
				getTemplateActivityLogOptionsModel := new(schematicsv1.GetTemplateActivityLogOptions)
				getTemplateActivityLogOptionsModel.WID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.TID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.ActivityID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetTemplateActivityLog(getTemplateActivityLogOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTemplateActivityLog with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetTemplateActivityLogOptions model
				getTemplateActivityLogOptionsModel := new(schematicsv1.GetTemplateActivityLogOptions)
				getTemplateActivityLogOptionsModel.WID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.TID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.ActivityID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetTemplateActivityLog(getTemplateActivityLogOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTemplateActivityLogOptions model with no property values
				getTemplateActivityLogOptionsModelNew := new(schematicsv1.GetTemplateActivityLogOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetTemplateActivityLog(getTemplateActivityLogOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematicsService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "https://schematicsv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
					URL: "https://testService/api",
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				err := schematicsService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematicsv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListActions(listActionsOptions *ListActionsOptions) - Operation response error`, func() {
		listActionsPath := "/v2/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listActionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListActions with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematicsv1.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListActions(listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListActions(listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListActions(listActionsOptions *ListActionsOptions)`, func() {
		listActionsPath := "/v2/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listActionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "actions": [{"name": "Stop Action", "description": "This Action can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "namespace": "Namespace", "tags": ["Tags"], "playbook_name": "PlaybookName", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListActions successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematicsv1.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListActionsWithContext(ctx, listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListActions(listActionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListActionsWithContext(ctx, listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listActionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "actions": [{"name": "Stop Action", "description": "This Action can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "namespace": "Namespace", "tags": ["Tags"], "playbook_name": "PlaybookName", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListActions successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListActions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematicsv1.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListActions(listActionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListActions with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematicsv1.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListActions(listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateAction(createActionOptions *CreateActionOptions) - Operation response error`, func() {
		createActionPath := "/v2/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createActionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateAction with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the ActionState model
				actionStateModel := new(schematicsv1.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematicsv1.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematicsv1.CreateActionOptions)
				createActionOptionsModel.Name = core.StringPtr("Stop Action")
				createActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				createActionOptionsModel.Location = core.StringPtr("us-south")
				createActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				createActionOptionsModel.Tags = []string{"testString"}
				createActionOptionsModel.UserState = userStateModel
				createActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				createActionOptionsModel.Source = externalSourceModel
				createActionOptionsModel.SourceType = core.StringPtr("local")
				createActionOptionsModel.CommandParameter = core.StringPtr("testString")
				createActionOptionsModel.Inventory = core.StringPtr("testString")
				createActionOptionsModel.Credentials = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Bastion = bastionResourceDefinitionModel
				createActionOptionsModel.BastionCredential = variableDataModel
				createActionOptionsModel.TargetsIni = core.StringPtr("testString")
				createActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.State = actionStateModel
				createActionOptionsModel.SysLock = systemLockModel
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateAction(createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateAction(createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateAction(createActionOptions *CreateActionOptions)`, func() {
		createActionPath := "/v2/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "actions": [{"name": "Stop Action", "description": "This Action can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "namespace": "Namespace", "tags": ["Tags"], "playbook_name": "PlaybookName", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke CreateAction successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the ActionState model
				actionStateModel := new(schematicsv1.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematicsv1.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematicsv1.CreateActionOptions)
				createActionOptionsModel.Name = core.StringPtr("Stop Action")
				createActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				createActionOptionsModel.Location = core.StringPtr("us-south")
				createActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				createActionOptionsModel.Tags = []string{"testString"}
				createActionOptionsModel.UserState = userStateModel
				createActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				createActionOptionsModel.Source = externalSourceModel
				createActionOptionsModel.SourceType = core.StringPtr("local")
				createActionOptionsModel.CommandParameter = core.StringPtr("testString")
				createActionOptionsModel.Inventory = core.StringPtr("testString")
				createActionOptionsModel.Credentials = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Bastion = bastionResourceDefinitionModel
				createActionOptionsModel.BastionCredential = variableDataModel
				createActionOptionsModel.TargetsIni = core.StringPtr("testString")
				createActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.State = actionStateModel
				createActionOptionsModel.SysLock = systemLockModel
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateActionWithContext(ctx, createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateAction(createActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateActionWithContext(ctx, createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "actions": [{"name": "Stop Action", "description": "This Action can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "namespace": "Namespace", "tags": ["Tags"], "playbook_name": "PlaybookName", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke CreateAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the ActionState model
				actionStateModel := new(schematicsv1.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematicsv1.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematicsv1.CreateActionOptions)
				createActionOptionsModel.Name = core.StringPtr("Stop Action")
				createActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				createActionOptionsModel.Location = core.StringPtr("us-south")
				createActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				createActionOptionsModel.Tags = []string{"testString"}
				createActionOptionsModel.UserState = userStateModel
				createActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				createActionOptionsModel.Source = externalSourceModel
				createActionOptionsModel.SourceType = core.StringPtr("local")
				createActionOptionsModel.CommandParameter = core.StringPtr("testString")
				createActionOptionsModel.Inventory = core.StringPtr("testString")
				createActionOptionsModel.Credentials = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Bastion = bastionResourceDefinitionModel
				createActionOptionsModel.BastionCredential = variableDataModel
				createActionOptionsModel.TargetsIni = core.StringPtr("testString")
				createActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.State = actionStateModel
				createActionOptionsModel.SysLock = systemLockModel
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateAction(createActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateAction with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the ActionState model
				actionStateModel := new(schematicsv1.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematicsv1.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematicsv1.CreateActionOptions)
				createActionOptionsModel.Name = core.StringPtr("Stop Action")
				createActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				createActionOptionsModel.Location = core.StringPtr("us-south")
				createActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				createActionOptionsModel.Tags = []string{"testString"}
				createActionOptionsModel.UserState = userStateModel
				createActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				createActionOptionsModel.Source = externalSourceModel
				createActionOptionsModel.SourceType = core.StringPtr("local")
				createActionOptionsModel.CommandParameter = core.StringPtr("testString")
				createActionOptionsModel.Inventory = core.StringPtr("testString")
				createActionOptionsModel.Credentials = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Bastion = bastionResourceDefinitionModel
				createActionOptionsModel.BastionCredential = variableDataModel
				createActionOptionsModel.TargetsIni = core.StringPtr("testString")
				createActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.State = actionStateModel
				createActionOptionsModel.SysLock = systemLockModel
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateAction(createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAction(getActionOptions *GetActionOptions) - Operation response error`, func() {
		getActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getActionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAction with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematicsv1.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetAction(getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetAction(getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAction(getActionOptions *GetActionOptions)`, func() {
		getActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getActionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}, "cos_bucket": {"cos_bucket_url": "CosBucketURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetAction successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematicsv1.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetActionWithContext(ctx, getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetAction(getActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetActionWithContext(ctx, getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getActionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}, "cos_bucket": {"cos_bucket_url": "CosBucketURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematicsv1.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetAction(getActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAction with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematicsv1.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetAction(getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetActionOptions model with no property values
				getActionOptionsModelNew := new(schematicsv1.GetActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetAction(getActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteAction(deleteActionOptions *DeleteActionOptions)`, func() {
		deleteActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteActionPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeleteAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteActionOptions model
				deleteActionOptionsModel := new(schematicsv1.DeleteActionOptions)
				deleteActionOptionsModel.ActionID = core.StringPtr("testString")
				deleteActionOptionsModel.Force = core.BoolPtr(true)
				deleteActionOptionsModel.Propagate = core.BoolPtr(true)
				deleteActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeleteAction(deleteActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAction with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteActionOptions model
				deleteActionOptionsModel := new(schematicsv1.DeleteActionOptions)
				deleteActionOptionsModel.ActionID = core.StringPtr("testString")
				deleteActionOptionsModel.Force = core.BoolPtr(true)
				deleteActionOptionsModel.Propagate = core.BoolPtr(true)
				deleteActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeleteAction(deleteActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteActionOptions model with no property values
				deleteActionOptionsModelNew := new(schematicsv1.DeleteActionOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeleteAction(deleteActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAction(updateActionOptions *UpdateActionOptions) - Operation response error`, func() {
		updateActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateActionPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateAction with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the ActionState model
				actionStateModel := new(schematicsv1.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematicsv1.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematicsv1.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Name = core.StringPtr("Stop Action")
				updateActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				updateActionOptionsModel.Location = core.StringPtr("us-south")
				updateActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateActionOptionsModel.Tags = []string{"testString"}
				updateActionOptionsModel.UserState = userStateModel
				updateActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				updateActionOptionsModel.Source = externalSourceModel
				updateActionOptionsModel.SourceType = core.StringPtr("local")
				updateActionOptionsModel.CommandParameter = core.StringPtr("testString")
				updateActionOptionsModel.Inventory = core.StringPtr("testString")
				updateActionOptionsModel.Credentials = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Bastion = bastionResourceDefinitionModel
				updateActionOptionsModel.BastionCredential = variableDataModel
				updateActionOptionsModel.TargetsIni = core.StringPtr("testString")
				updateActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.State = actionStateModel
				updateActionOptionsModel.SysLock = systemLockModel
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateAction(updateActionOptions *UpdateActionOptions)`, func() {
		updateActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateActionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}, "cos_bucket": {"cos_bucket_url": "CosBucketURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateAction successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the ActionState model
				actionStateModel := new(schematicsv1.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematicsv1.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematicsv1.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Name = core.StringPtr("Stop Action")
				updateActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				updateActionOptionsModel.Location = core.StringPtr("us-south")
				updateActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateActionOptionsModel.Tags = []string{"testString"}
				updateActionOptionsModel.UserState = userStateModel
				updateActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				updateActionOptionsModel.Source = externalSourceModel
				updateActionOptionsModel.SourceType = core.StringPtr("local")
				updateActionOptionsModel.CommandParameter = core.StringPtr("testString")
				updateActionOptionsModel.Inventory = core.StringPtr("testString")
				updateActionOptionsModel.Credentials = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Bastion = bastionResourceDefinitionModel
				updateActionOptionsModel.BastionCredential = variableDataModel
				updateActionOptionsModel.TargetsIni = core.StringPtr("testString")
				updateActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.State = actionStateModel
				updateActionOptionsModel.SysLock = systemLockModel
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdateActionWithContext(ctx, updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdateActionWithContext(ctx, updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateActionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}, "cos_bucket": {"cos_bucket_url": "CosBucketURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdateAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the ActionState model
				actionStateModel := new(schematicsv1.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematicsv1.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematicsv1.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Name = core.StringPtr("Stop Action")
				updateActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				updateActionOptionsModel.Location = core.StringPtr("us-south")
				updateActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateActionOptionsModel.Tags = []string{"testString"}
				updateActionOptionsModel.UserState = userStateModel
				updateActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				updateActionOptionsModel.Source = externalSourceModel
				updateActionOptionsModel.SourceType = core.StringPtr("local")
				updateActionOptionsModel.CommandParameter = core.StringPtr("testString")
				updateActionOptionsModel.Inventory = core.StringPtr("testString")
				updateActionOptionsModel.Credentials = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Bastion = bastionResourceDefinitionModel
				updateActionOptionsModel.BastionCredential = variableDataModel
				updateActionOptionsModel.TargetsIni = core.StringPtr("testString")
				updateActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.State = actionStateModel
				updateActionOptionsModel.SysLock = systemLockModel
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateAction with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the ActionState model
				actionStateModel := new(schematicsv1.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematicsv1.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematicsv1.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Name = core.StringPtr("Stop Action")
				updateActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				updateActionOptionsModel.Location = core.StringPtr("us-south")
				updateActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateActionOptionsModel.Tags = []string{"testString"}
				updateActionOptionsModel.UserState = userStateModel
				updateActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				updateActionOptionsModel.Source = externalSourceModel
				updateActionOptionsModel.SourceType = core.StringPtr("local")
				updateActionOptionsModel.CommandParameter = core.StringPtr("testString")
				updateActionOptionsModel.Inventory = core.StringPtr("testString")
				updateActionOptionsModel.Credentials = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Bastion = bastionResourceDefinitionModel
				updateActionOptionsModel.BastionCredential = variableDataModel
				updateActionOptionsModel.TargetsIni = core.StringPtr("testString")
				updateActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.State = actionStateModel
				updateActionOptionsModel.SysLock = systemLockModel
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateActionOptions model with no property values
				updateActionOptionsModelNew := new(schematicsv1.UpdateActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UpdateAction(updateActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UploadTemplateTarAction(uploadTemplateTarActionOptions *UploadTemplateTarActionOptions) - Operation response error`, func() {
		uploadTemplateTarActionPath := "/v2/actions/testString/template_repo_upload"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarActionPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UploadTemplateTarAction with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematicsv1.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UploadTemplateTarAction(uploadTemplateTarActionOptions *UploadTemplateTarActionOptions)`, func() {
		uploadTemplateTarActionPath := "/v2/actions/testString/template_repo_upload"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarActionPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke UploadTemplateTarAction successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematicsv1.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UploadTemplateTarActionWithContext(ctx, uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UploadTemplateTarActionWithContext(ctx, uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarActionPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke UploadTemplateTarAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UploadTemplateTarAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematicsv1.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UploadTemplateTarAction with error: Param validation error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:  testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematicsv1.UploadTemplateTarActionOptions)
				// Invoke operation with invalid options model (negative test)
				result, response, operationErr := schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			It(`Invoke UploadTemplateTarAction with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematicsv1.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UploadTemplateTarActionOptions model with no property values
				uploadTemplateTarActionOptionsModelNew := new(schematicsv1.UploadTemplateTarActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematicsService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "https://schematicsv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
					URL: "https://testService/api",
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				err := schematicsService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematicsv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListWorkspaceActivities(listWorkspaceActivitiesOptions *ListWorkspaceActivitiesOptions) - Operation response error`, func() {
		listWorkspaceActivitiesPath := "/v1/workspaces/testString/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceActivitiesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListWorkspaceActivities with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListWorkspaceActivitiesOptions model
				listWorkspaceActivitiesOptionsModel := new(schematicsv1.ListWorkspaceActivitiesOptions)
				listWorkspaceActivitiesOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceActivitiesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceActivitiesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceActivitiesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListWorkspaceActivities(listWorkspaceActivitiesOptions *ListWorkspaceActivitiesOptions)`, func() {
		listWorkspaceActivitiesPath := "/v1/workspaces/testString/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceActivitiesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actions": [{"action_id": "ActionID", "message": ["Message"], "name": "Name", "performed_at": "2019-01-01T12:00:00.000Z", "performed_by": "PerformedBy", "status": "Status", "templates": [{"end_time": "2019-01-01T12:00:00.000Z", "log_summary": {"activity_status": "ActivityStatus", "detected_template_type": "DetectedTemplateType", "discarded_files": 14, "error": "Error", "resources_added": 14, "resources_destroyed": 18, "resources_modified": 17, "scanned_files": 12, "template_variable_count": 21, "time_taken": 9}, "log_url": "LogURL", "message": "Message", "start_time": "2019-01-01T12:00:00.000Z", "status": "Status", "template_id": "TemplateID", "template_type": "TemplateType"}]}], "workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName"}`)
				}))
			})
			It(`Invoke ListWorkspaceActivities successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListWorkspaceActivitiesOptions model
				listWorkspaceActivitiesOptionsModel := new(schematicsv1.ListWorkspaceActivitiesOptions)
				listWorkspaceActivitiesOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceActivitiesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceActivitiesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceActivitiesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListWorkspaceActivitiesWithContext(ctx, listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListWorkspaceActivitiesWithContext(ctx, listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceActivitiesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actions": [{"action_id": "ActionID", "message": ["Message"], "name": "Name", "performed_at": "2019-01-01T12:00:00.000Z", "performed_by": "PerformedBy", "status": "Status", "templates": [{"end_time": "2019-01-01T12:00:00.000Z", "log_summary": {"activity_status": "ActivityStatus", "detected_template_type": "DetectedTemplateType", "discarded_files": 14, "error": "Error", "resources_added": 14, "resources_destroyed": 18, "resources_modified": 17, "scanned_files": 12, "template_variable_count": 21, "time_taken": 9}, "log_url": "LogURL", "message": "Message", "start_time": "2019-01-01T12:00:00.000Z", "status": "Status", "template_id": "TemplateID", "template_type": "TemplateType"}]}], "workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName"}`)
				}))
			})
			It(`Invoke ListWorkspaceActivities successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListWorkspaceActivities(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListWorkspaceActivitiesOptions model
				listWorkspaceActivitiesOptionsModel := new(schematicsv1.ListWorkspaceActivitiesOptions)
				listWorkspaceActivitiesOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceActivitiesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceActivitiesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceActivitiesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListWorkspaceActivities with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListWorkspaceActivitiesOptions model
				listWorkspaceActivitiesOptionsModel := new(schematicsv1.ListWorkspaceActivitiesOptions)
				listWorkspaceActivitiesOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceActivitiesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceActivitiesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceActivitiesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListWorkspaceActivitiesOptions model with no property values
				listWorkspaceActivitiesOptionsModelNew := new(schematicsv1.ListWorkspaceActivitiesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceActivity(getWorkspaceActivityOptions *GetWorkspaceActivityOptions) - Operation response error`, func() {
		getWorkspaceActivityPath := "/v1/workspaces/testString/actions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceActivity with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceActivityOptions model
				getWorkspaceActivityOptionsModel := new(schematicsv1.GetWorkspaceActivityOptions)
				getWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceActivity(getWorkspaceActivityOptions *GetWorkspaceActivityOptions)`, func() {
		getWorkspaceActivityPath := "/v1/workspaces/testString/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action_id": "ActionID", "message": ["Message"], "name": "Name", "performed_at": "2019-01-01T12:00:00.000Z", "performed_by": "PerformedBy", "status": "Status", "templates": [{"end_time": "2019-01-01T12:00:00.000Z", "log_summary": {"activity_status": "ActivityStatus", "detected_template_type": "DetectedTemplateType", "discarded_files": 14, "error": "Error", "resources_added": 14, "resources_destroyed": 18, "resources_modified": 17, "scanned_files": 12, "template_variable_count": 21, "time_taken": 9}, "log_url": "LogURL", "message": "Message", "start_time": "2019-01-01T12:00:00.000Z", "status": "Status", "template_id": "TemplateID", "template_type": "TemplateType"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceActivity successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceActivityOptions model
				getWorkspaceActivityOptionsModel := new(schematicsv1.GetWorkspaceActivityOptions)
				getWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceActivityWithContext(ctx, getWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceActivityWithContext(ctx, getWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action_id": "ActionID", "message": ["Message"], "name": "Name", "performed_at": "2019-01-01T12:00:00.000Z", "performed_by": "PerformedBy", "status": "Status", "templates": [{"end_time": "2019-01-01T12:00:00.000Z", "log_summary": {"activity_status": "ActivityStatus", "detected_template_type": "DetectedTemplateType", "discarded_files": 14, "error": "Error", "resources_added": 14, "resources_destroyed": 18, "resources_modified": 17, "scanned_files": 12, "template_variable_count": 21, "time_taken": 9}, "log_url": "LogURL", "message": "Message", "start_time": "2019-01-01T12:00:00.000Z", "status": "Status", "template_id": "TemplateID", "template_type": "TemplateType"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceActivity successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceActivity(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceActivityOptions model
				getWorkspaceActivityOptionsModel := new(schematicsv1.GetWorkspaceActivityOptions)
				getWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceActivity with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceActivityOptions model
				getWorkspaceActivityOptionsModel := new(schematicsv1.GetWorkspaceActivityOptions)
				getWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceActivityOptions model with no property values
				getWorkspaceActivityOptionsModelNew := new(schematicsv1.GetWorkspaceActivityOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteWorkspaceActivity(deleteWorkspaceActivityOptions *DeleteWorkspaceActivityOptions) - Operation response error`, func() {
		deleteWorkspaceActivityPath := "/v1/workspaces/testString/actions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWorkspaceActivityPath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DeleteWorkspaceActivity with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteWorkspaceActivityOptions model
				deleteWorkspaceActivityOptionsModel := new(schematicsv1.DeleteWorkspaceActivityOptions)
				deleteWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteWorkspaceActivity(deleteWorkspaceActivityOptions *DeleteWorkspaceActivityOptions)`, func() {
		deleteWorkspaceActivityPath := "/v1/workspaces/testString/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWorkspaceActivityPath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke DeleteWorkspaceActivity successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the DeleteWorkspaceActivityOptions model
				deleteWorkspaceActivityOptionsModel := new(schematicsv1.DeleteWorkspaceActivityOptions)
				deleteWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.DeleteWorkspaceActivityWithContext(ctx, deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.DeleteWorkspaceActivityWithContext(ctx, deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWorkspaceActivityPath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke DeleteWorkspaceActivity successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.DeleteWorkspaceActivity(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DeleteWorkspaceActivityOptions model
				deleteWorkspaceActivityOptionsModel := new(schematicsv1.DeleteWorkspaceActivityOptions)
				deleteWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DeleteWorkspaceActivity with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteWorkspaceActivityOptions model
				deleteWorkspaceActivityOptionsModel := new(schematicsv1.DeleteWorkspaceActivityOptions)
				deleteWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DeleteWorkspaceActivityOptions model with no property values
				deleteWorkspaceActivityOptionsModelNew := new(schematicsv1.DeleteWorkspaceActivityOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RunWorkspaceCommands(runWorkspaceCommandsOptions *RunWorkspaceCommandsOptions) - Operation response error`, func() {
		runWorkspaceCommandsPath := "/v1/workspaces/testString/commands"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(runWorkspaceCommandsPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RunWorkspaceCommands with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TerraformCommand model
				terraformCommandModel := new(schematicsv1.TerraformCommand)
				terraformCommandModel.Command = core.StringPtr("testString")
				terraformCommandModel.CommandParams = core.StringPtr("testString")
				terraformCommandModel.CommandName = core.StringPtr("testString")
				terraformCommandModel.CommandDesc = core.StringPtr("testString")
				terraformCommandModel.CommandOnError = core.StringPtr("testString")
				terraformCommandModel.CommandDependsOn = core.StringPtr("testString")
				terraformCommandModel.CommandStatus = core.StringPtr("testString")

				// Construct an instance of the RunWorkspaceCommandsOptions model
				runWorkspaceCommandsOptionsModel := new(schematicsv1.RunWorkspaceCommandsOptions)
				runWorkspaceCommandsOptionsModel.WID = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.RefreshToken = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Commands = []schematicsv1.TerraformCommand{*terraformCommandModel}
				runWorkspaceCommandsOptionsModel.OperationName = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Description = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RunWorkspaceCommands(runWorkspaceCommandsOptions *RunWorkspaceCommandsOptions)`, func() {
		runWorkspaceCommandsPath := "/v1/workspaces/testString/commands"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(runWorkspaceCommandsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke RunWorkspaceCommands successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the TerraformCommand model
				terraformCommandModel := new(schematicsv1.TerraformCommand)
				terraformCommandModel.Command = core.StringPtr("testString")
				terraformCommandModel.CommandParams = core.StringPtr("testString")
				terraformCommandModel.CommandName = core.StringPtr("testString")
				terraformCommandModel.CommandDesc = core.StringPtr("testString")
				terraformCommandModel.CommandOnError = core.StringPtr("testString")
				terraformCommandModel.CommandDependsOn = core.StringPtr("testString")
				terraformCommandModel.CommandStatus = core.StringPtr("testString")

				// Construct an instance of the RunWorkspaceCommandsOptions model
				runWorkspaceCommandsOptionsModel := new(schematicsv1.RunWorkspaceCommandsOptions)
				runWorkspaceCommandsOptionsModel.WID = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.RefreshToken = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Commands = []schematicsv1.TerraformCommand{*terraformCommandModel}
				runWorkspaceCommandsOptionsModel.OperationName = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Description = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.RunWorkspaceCommandsWithContext(ctx, runWorkspaceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.RunWorkspaceCommandsWithContext(ctx, runWorkspaceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(runWorkspaceCommandsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke RunWorkspaceCommands successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.RunWorkspaceCommands(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the TerraformCommand model
				terraformCommandModel := new(schematicsv1.TerraformCommand)
				terraformCommandModel.Command = core.StringPtr("testString")
				terraformCommandModel.CommandParams = core.StringPtr("testString")
				terraformCommandModel.CommandName = core.StringPtr("testString")
				terraformCommandModel.CommandDesc = core.StringPtr("testString")
				terraformCommandModel.CommandOnError = core.StringPtr("testString")
				terraformCommandModel.CommandDependsOn = core.StringPtr("testString")
				terraformCommandModel.CommandStatus = core.StringPtr("testString")

				// Construct an instance of the RunWorkspaceCommandsOptions model
				runWorkspaceCommandsOptionsModel := new(schematicsv1.RunWorkspaceCommandsOptions)
				runWorkspaceCommandsOptionsModel.WID = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.RefreshToken = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Commands = []schematicsv1.TerraformCommand{*terraformCommandModel}
				runWorkspaceCommandsOptionsModel.OperationName = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Description = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RunWorkspaceCommands with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TerraformCommand model
				terraformCommandModel := new(schematicsv1.TerraformCommand)
				terraformCommandModel.Command = core.StringPtr("testString")
				terraformCommandModel.CommandParams = core.StringPtr("testString")
				terraformCommandModel.CommandName = core.StringPtr("testString")
				terraformCommandModel.CommandDesc = core.StringPtr("testString")
				terraformCommandModel.CommandOnError = core.StringPtr("testString")
				terraformCommandModel.CommandDependsOn = core.StringPtr("testString")
				terraformCommandModel.CommandStatus = core.StringPtr("testString")

				// Construct an instance of the RunWorkspaceCommandsOptions model
				runWorkspaceCommandsOptionsModel := new(schematicsv1.RunWorkspaceCommandsOptions)
				runWorkspaceCommandsOptionsModel.WID = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.RefreshToken = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Commands = []schematicsv1.TerraformCommand{*terraformCommandModel}
				runWorkspaceCommandsOptionsModel.OperationName = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Description = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RunWorkspaceCommandsOptions model with no property values
				runWorkspaceCommandsOptionsModelNew := new(schematicsv1.RunWorkspaceCommandsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ApplyWorkspaceCommand(applyWorkspaceCommandOptions *ApplyWorkspaceCommandOptions) - Operation response error`, func() {
		applyWorkspaceCommandPath := "/v1/workspaces/testString/apply"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(applyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ApplyWorkspaceCommand with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the ApplyWorkspaceCommandOptions model
				applyWorkspaceCommandOptionsModel := new(schematicsv1.ApplyWorkspaceCommandOptions)
				applyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				applyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ApplyWorkspaceCommand(applyWorkspaceCommandOptions *ApplyWorkspaceCommandOptions)`, func() {
		applyWorkspaceCommandPath := "/v1/workspaces/testString/apply"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(applyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke ApplyWorkspaceCommand successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the ApplyWorkspaceCommandOptions model
				applyWorkspaceCommandOptionsModel := new(schematicsv1.ApplyWorkspaceCommandOptions)
				applyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				applyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ApplyWorkspaceCommandWithContext(ctx, applyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ApplyWorkspaceCommandWithContext(ctx, applyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(applyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke ApplyWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ApplyWorkspaceCommand(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the ApplyWorkspaceCommandOptions model
				applyWorkspaceCommandOptionsModel := new(schematicsv1.ApplyWorkspaceCommandOptions)
				applyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				applyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ApplyWorkspaceCommand with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the ApplyWorkspaceCommandOptions model
				applyWorkspaceCommandOptionsModel := new(schematicsv1.ApplyWorkspaceCommandOptions)
				applyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				applyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ApplyWorkspaceCommandOptions model with no property values
				applyWorkspaceCommandOptionsModelNew := new(schematicsv1.ApplyWorkspaceCommandOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DestroyWorkspaceCommand(destroyWorkspaceCommandOptions *DestroyWorkspaceCommandOptions) - Operation response error`, func() {
		destroyWorkspaceCommandPath := "/v1/workspaces/testString/destroy"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(destroyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DestroyWorkspaceCommand with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the DestroyWorkspaceCommandOptions model
				destroyWorkspaceCommandOptionsModel := new(schematicsv1.DestroyWorkspaceCommandOptions)
				destroyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				destroyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DestroyWorkspaceCommand(destroyWorkspaceCommandOptions *DestroyWorkspaceCommandOptions)`, func() {
		destroyWorkspaceCommandPath := "/v1/workspaces/testString/destroy"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(destroyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke DestroyWorkspaceCommand successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the DestroyWorkspaceCommandOptions model
				destroyWorkspaceCommandOptionsModel := new(schematicsv1.DestroyWorkspaceCommandOptions)
				destroyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				destroyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.DestroyWorkspaceCommandWithContext(ctx, destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.DestroyWorkspaceCommandWithContext(ctx, destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(destroyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke DestroyWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.DestroyWorkspaceCommand(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the DestroyWorkspaceCommandOptions model
				destroyWorkspaceCommandOptionsModel := new(schematicsv1.DestroyWorkspaceCommandOptions)
				destroyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				destroyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DestroyWorkspaceCommand with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the DestroyWorkspaceCommandOptions model
				destroyWorkspaceCommandOptionsModel := new(schematicsv1.DestroyWorkspaceCommandOptions)
				destroyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				destroyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DestroyWorkspaceCommandOptions model with no property values
				destroyWorkspaceCommandOptionsModelNew := new(schematicsv1.DestroyWorkspaceCommandOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PlanWorkspaceCommand(planWorkspaceCommandOptions *PlanWorkspaceCommandOptions) - Operation response error`, func() {
		planWorkspaceCommandPath := "/v1/workspaces/testString/plan"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(planWorkspaceCommandPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PlanWorkspaceCommand with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the PlanWorkspaceCommandOptions model
				planWorkspaceCommandOptionsModel := new(schematicsv1.PlanWorkspaceCommandOptions)
				planWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`PlanWorkspaceCommand(planWorkspaceCommandOptions *PlanWorkspaceCommandOptions)`, func() {
		planWorkspaceCommandPath := "/v1/workspaces/testString/plan"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(planWorkspaceCommandPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke PlanWorkspaceCommand successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the PlanWorkspaceCommandOptions model
				planWorkspaceCommandOptionsModel := new(schematicsv1.PlanWorkspaceCommandOptions)
				planWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.PlanWorkspaceCommandWithContext(ctx, planWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.PlanWorkspaceCommandWithContext(ctx, planWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(planWorkspaceCommandPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke PlanWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.PlanWorkspaceCommand(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PlanWorkspaceCommandOptions model
				planWorkspaceCommandOptionsModel := new(schematicsv1.PlanWorkspaceCommandOptions)
				planWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PlanWorkspaceCommand with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the PlanWorkspaceCommandOptions model
				planWorkspaceCommandOptionsModel := new(schematicsv1.PlanWorkspaceCommandOptions)
				planWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PlanWorkspaceCommandOptions model with no property values
				planWorkspaceCommandOptionsModelNew := new(schematicsv1.PlanWorkspaceCommandOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RefreshWorkspaceCommand(refreshWorkspaceCommandOptions *RefreshWorkspaceCommandOptions) - Operation response error`, func() {
		refreshWorkspaceCommandPath := "/v1/workspaces/testString/refresh"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(refreshWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RefreshWorkspaceCommand with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the RefreshWorkspaceCommandOptions model
				refreshWorkspaceCommandOptionsModel := new(schematicsv1.RefreshWorkspaceCommandOptions)
				refreshWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RefreshWorkspaceCommand(refreshWorkspaceCommandOptions *RefreshWorkspaceCommandOptions)`, func() {
		refreshWorkspaceCommandPath := "/v1/workspaces/testString/refresh"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(refreshWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke RefreshWorkspaceCommand successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the RefreshWorkspaceCommandOptions model
				refreshWorkspaceCommandOptionsModel := new(schematicsv1.RefreshWorkspaceCommandOptions)
				refreshWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.RefreshWorkspaceCommandWithContext(ctx, refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.RefreshWorkspaceCommandWithContext(ctx, refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(refreshWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke RefreshWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.RefreshWorkspaceCommand(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RefreshWorkspaceCommandOptions model
				refreshWorkspaceCommandOptionsModel := new(schematicsv1.RefreshWorkspaceCommandOptions)
				refreshWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RefreshWorkspaceCommand with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the RefreshWorkspaceCommandOptions model
				refreshWorkspaceCommandOptionsModel := new(schematicsv1.RefreshWorkspaceCommandOptions)
				refreshWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RefreshWorkspaceCommandOptions model with no property values
				refreshWorkspaceCommandOptionsModelNew := new(schematicsv1.RefreshWorkspaceCommandOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListJobs(listJobsOptions *ListJobsOptions) - Operation response error`, func() {
		listJobsPath := "/v2/jobs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource"]).To(Equal([]string{"workspace"}))
					Expect(req.URL.Query()["resource_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["action_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["list"]).To(Equal([]string{"all"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListJobs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematicsv1.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspace")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListJobs(listJobsOptions *ListJobsOptions)`, func() {
		listJobsPath := "/v2/jobs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource"]).To(Equal([]string{"workspace"}))
					Expect(req.URL.Query()["resource_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["action_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["list"]).To(Equal([]string{"all"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "jobs": [{"id": "ID", "name": "Name", "description": "Description", "command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "tags": ["Tags"], "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "duration": "Duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListJobs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematicsv1.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspace")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListJobsWithContext(ctx, listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListJobsWithContext(ctx, listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource"]).To(Equal([]string{"workspace"}))
					Expect(req.URL.Query()["resource_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["action_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["list"]).To(Equal([]string{"all"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "jobs": [{"id": "ID", "name": "Name", "description": "Description", "command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "tags": ["Tags"], "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "duration": "Duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListJobs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListJobs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematicsv1.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspace")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListJobs with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematicsv1.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspace")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateJob(createJobOptions *CreateJobOptions) - Operation response error`, func() {
		createJobPath := "/v2/jobs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createJobPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateJob with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematicsv1.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.CommandObject = core.StringPtr("workspace")
				createJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				createJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				createJobOptionsModel.CommandParameter = core.StringPtr("testString")
				createJobOptionsModel.CommandOptions = []string{"testString"}
				createJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Tags = []string{"testString"}
				createJobOptionsModel.Location = core.StringPtr("us-south")
				createJobOptionsModel.Status = jobStatusModel
				createJobOptionsModel.Data = jobDataModel
				createJobOptionsModel.Bastion = bastionResourceDefinitionModel
				createJobOptionsModel.LogSummary = jobLogSummaryModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateJob(createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateJob(createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateJob(createJobOptions *CreateJobOptions)`, func() {
		createJobPath := "/v2/jobs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createJobPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}, "cos_bucket": {"cos_bucket_url": "CosBucketURL"}}, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematicsv1.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.CommandObject = core.StringPtr("workspace")
				createJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				createJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				createJobOptionsModel.CommandParameter = core.StringPtr("testString")
				createJobOptionsModel.CommandOptions = []string{"testString"}
				createJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Tags = []string{"testString"}
				createJobOptionsModel.Location = core.StringPtr("us-south")
				createJobOptionsModel.Status = jobStatusModel
				createJobOptionsModel.Data = jobDataModel
				createJobOptionsModel.Bastion = bastionResourceDefinitionModel
				createJobOptionsModel.LogSummary = jobLogSummaryModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateJobWithContext(ctx, createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateJob(createJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateJobWithContext(ctx, createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createJobPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}, "cos_bucket": {"cos_bucket_url": "CosBucketURL"}}, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematicsv1.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.CommandObject = core.StringPtr("workspace")
				createJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				createJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				createJobOptionsModel.CommandParameter = core.StringPtr("testString")
				createJobOptionsModel.CommandOptions = []string{"testString"}
				createJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Tags = []string{"testString"}
				createJobOptionsModel.Location = core.StringPtr("us-south")
				createJobOptionsModel.Status = jobStatusModel
				createJobOptionsModel.Data = jobDataModel
				createJobOptionsModel.Bastion = bastionResourceDefinitionModel
				createJobOptionsModel.LogSummary = jobLogSummaryModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateJob(createJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematicsv1.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.CommandObject = core.StringPtr("workspace")
				createJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				createJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				createJobOptionsModel.CommandParameter = core.StringPtr("testString")
				createJobOptionsModel.CommandOptions = []string{"testString"}
				createJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Tags = []string{"testString"}
				createJobOptionsModel.Location = core.StringPtr("us-south")
				createJobOptionsModel.Status = jobStatusModel
				createJobOptionsModel.Data = jobDataModel
				createJobOptionsModel.Bastion = bastionResourceDefinitionModel
				createJobOptionsModel.LogSummary = jobLogSummaryModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateJob(createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateJobOptions model with no property values
				createJobOptionsModelNew := new(schematicsv1.CreateJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.CreateJob(createJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetJob(getJobOptions *GetJobOptions) - Operation response error`, func() {
		getJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetJob with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematicsv1.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetJob(getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetJob(getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetJob(getJobOptions *GetJobOptions)`, func() {
		getJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}, "cos_bucket": {"cos_bucket_url": "CosBucketURL"}}, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematicsv1.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetJobWithContext(ctx, getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetJob(getJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetJobWithContext(ctx, getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}, "cos_bucket": {"cos_bucket_url": "CosBucketURL"}}, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematicsv1.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetJob(getJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematicsv1.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetJob(getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetJobOptions model with no property values
				getJobOptionsModelNew := new(schematicsv1.GetJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetJob(getJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateJob(updateJobOptions *UpdateJobOptions) - Operation response error`, func() {
		updateJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateJobPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateJob with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematicsv1.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.CommandObject = core.StringPtr("workspace")
				updateJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				updateJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				updateJobOptionsModel.CommandParameter = core.StringPtr("testString")
				updateJobOptionsModel.CommandOptions = []string{"testString"}
				updateJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Tags = []string{"testString"}
				updateJobOptionsModel.Location = core.StringPtr("us-south")
				updateJobOptionsModel.Status = jobStatusModel
				updateJobOptionsModel.Data = jobDataModel
				updateJobOptionsModel.Bastion = bastionResourceDefinitionModel
				updateJobOptionsModel.LogSummary = jobLogSummaryModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateJob(updateJobOptions *UpdateJobOptions)`, func() {
		updateJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}, "cos_bucket": {"cos_bucket_url": "CosBucketURL"}}, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematicsv1.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.CommandObject = core.StringPtr("workspace")
				updateJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				updateJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				updateJobOptionsModel.CommandParameter = core.StringPtr("testString")
				updateJobOptionsModel.CommandOptions = []string{"testString"}
				updateJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Tags = []string{"testString"}
				updateJobOptionsModel.Location = core.StringPtr("us-south")
				updateJobOptionsModel.Status = jobStatusModel
				updateJobOptionsModel.Data = jobDataModel
				updateJobOptionsModel.Bastion = bastionResourceDefinitionModel
				updateJobOptionsModel.LogSummary = jobLogSummaryModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdateJobWithContext(ctx, updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdateJobWithContext(ctx, updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}, "cos_bucket": {"cos_bucket_url": "CosBucketURL"}}, "inputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "default_value": "DefaultValue", "secure": true, "immutable": false, "hidden": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdateJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematicsv1.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.CommandObject = core.StringPtr("workspace")
				updateJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				updateJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				updateJobOptionsModel.CommandParameter = core.StringPtr("testString")
				updateJobOptionsModel.CommandOptions = []string{"testString"}
				updateJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Tags = []string{"testString"}
				updateJobOptionsModel.Location = core.StringPtr("us-south")
				updateJobOptionsModel.Status = jobStatusModel
				updateJobOptionsModel.Data = jobDataModel
				updateJobOptionsModel.Bastion = bastionResourceDefinitionModel
				updateJobOptionsModel.LogSummary = jobLogSummaryModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematicsv1.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.CommandObject = core.StringPtr("workspace")
				updateJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				updateJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				updateJobOptionsModel.CommandParameter = core.StringPtr("testString")
				updateJobOptionsModel.CommandOptions = []string{"testString"}
				updateJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Tags = []string{"testString"}
				updateJobOptionsModel.Location = core.StringPtr("us-south")
				updateJobOptionsModel.Status = jobStatusModel
				updateJobOptionsModel.Data = jobDataModel
				updateJobOptionsModel.Bastion = bastionResourceDefinitionModel
				updateJobOptionsModel.LogSummary = jobLogSummaryModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateJobOptions model with no property values
				updateJobOptionsModelNew := new(schematicsv1.UpdateJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UpdateJob(updateJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteJob(deleteJobOptions *DeleteJobOptions)`, func() {
		deleteJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteJobPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeleteJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteJobOptions model
				deleteJobOptionsModel := new(schematicsv1.DeleteJobOptions)
				deleteJobOptionsModel.JobID = core.StringPtr("testString")
				deleteJobOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteJobOptionsModel.Force = core.BoolPtr(true)
				deleteJobOptionsModel.Propagate = core.BoolPtr(true)
				deleteJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeleteJob(deleteJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteJobOptions model
				deleteJobOptionsModel := new(schematicsv1.DeleteJobOptions)
				deleteJobOptionsModel.JobID = core.StringPtr("testString")
				deleteJobOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteJobOptionsModel.Force = core.BoolPtr(true)
				deleteJobOptionsModel.Propagate = core.BoolPtr(true)
				deleteJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeleteJob(deleteJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteJobOptions model with no property values
				deleteJobOptionsModelNew := new(schematicsv1.DeleteJobOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeleteJob(deleteJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListJobLogs(listJobLogsOptions *ListJobLogsOptions) - Operation response error`, func() {
		listJobLogsPath := "/v2/jobs/testString/logs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobLogsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListJobLogs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematicsv1.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListJobLogs(listJobLogsOptions *ListJobLogsOptions)`, func() {
		listJobLogsPath := "/v2/jobs/testString/logs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ListJobLogs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematicsv1.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListJobLogsWithContext(ctx, listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListJobLogsWithContext(ctx, listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ListJobLogs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListJobLogs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematicsv1.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListJobLogs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematicsv1.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListJobLogsOptions model with no property values
				listJobLogsOptionsModelNew := new(schematicsv1.ListJobLogsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ListJobLogs(listJobLogsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematicsService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "https://schematicsv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
					URL: "https://testService/api",
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				err := schematicsService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematicsv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptions *CreateWorkspaceDeletionJobOptions) - Operation response error`, func() {
		createWorkspaceDeletionJobPath := "/v1/workspace_jobs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspaceDeletionJobPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["destroy_resources"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateWorkspaceDeletionJob with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CreateWorkspaceDeletionJobOptions model
				createWorkspaceDeletionJobOptionsModel := new(schematicsv1.CreateWorkspaceDeletionJobOptions)
				createWorkspaceDeletionJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewDeleteWorkspaces = core.BoolPtr(true)
				createWorkspaceDeletionJobOptionsModel.NewDestroyResources = core.BoolPtr(true)
				createWorkspaceDeletionJobOptionsModel.NewJob = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewVersion = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewWorkspaces = []string{"testString"}
				createWorkspaceDeletionJobOptionsModel.DestroyResources = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptions *CreateWorkspaceDeletionJobOptions)`, func() {
		createWorkspaceDeletionJobPath := "/v1/workspace_jobs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspaceDeletionJobPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["destroy_resources"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job": "Job", "job_id": "JobID"}`)
				}))
			})
			It(`Invoke CreateWorkspaceDeletionJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the CreateWorkspaceDeletionJobOptions model
				createWorkspaceDeletionJobOptionsModel := new(schematicsv1.CreateWorkspaceDeletionJobOptions)
				createWorkspaceDeletionJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewDeleteWorkspaces = core.BoolPtr(true)
				createWorkspaceDeletionJobOptionsModel.NewDestroyResources = core.BoolPtr(true)
				createWorkspaceDeletionJobOptionsModel.NewJob = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewVersion = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewWorkspaces = []string{"testString"}
				createWorkspaceDeletionJobOptionsModel.DestroyResources = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateWorkspaceDeletionJobWithContext(ctx, createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateWorkspaceDeletionJobWithContext(ctx, createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspaceDeletionJobPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["destroy_resources"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job": "Job", "job_id": "JobID"}`)
				}))
			})
			It(`Invoke CreateWorkspaceDeletionJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateWorkspaceDeletionJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateWorkspaceDeletionJobOptions model
				createWorkspaceDeletionJobOptionsModel := new(schematicsv1.CreateWorkspaceDeletionJobOptions)
				createWorkspaceDeletionJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewDeleteWorkspaces = core.BoolPtr(true)
				createWorkspaceDeletionJobOptionsModel.NewDestroyResources = core.BoolPtr(true)
				createWorkspaceDeletionJobOptionsModel.NewJob = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewVersion = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewWorkspaces = []string{"testString"}
				createWorkspaceDeletionJobOptionsModel.DestroyResources = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateWorkspaceDeletionJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CreateWorkspaceDeletionJobOptions model
				createWorkspaceDeletionJobOptionsModel := new(schematicsv1.CreateWorkspaceDeletionJobOptions)
				createWorkspaceDeletionJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewDeleteWorkspaces = core.BoolPtr(true)
				createWorkspaceDeletionJobOptionsModel.NewDestroyResources = core.BoolPtr(true)
				createWorkspaceDeletionJobOptionsModel.NewJob = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewVersion = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.NewWorkspaces = []string{"testString"}
				createWorkspaceDeletionJobOptionsModel.DestroyResources = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateWorkspaceDeletionJobOptions model with no property values
				createWorkspaceDeletionJobOptionsModelNew := new(schematicsv1.CreateWorkspaceDeletionJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptions *GetWorkspaceDeletionJobStatusOptions) - Operation response error`, func() {
		getWorkspaceDeletionJobStatusPath := "/v1/workspace_jobs/testString/status"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceDeletionJobStatusPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceDeletionJobStatus with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceDeletionJobStatusOptions model
				getWorkspaceDeletionJobStatusOptionsModel := new(schematicsv1.GetWorkspaceDeletionJobStatusOptions)
				getWorkspaceDeletionJobStatusOptionsModel.WjID = core.StringPtr("testString")
				getWorkspaceDeletionJobStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptions *GetWorkspaceDeletionJobStatusOptions)`, func() {
		getWorkspaceDeletionJobStatusPath := "/v1/workspace_jobs/testString/status"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceDeletionJobStatusPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_status": {"failed": ["Failed"], "in_progress": ["InProgress"], "success": ["Success"], "last_updated_on": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetWorkspaceDeletionJobStatus successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceDeletionJobStatusOptions model
				getWorkspaceDeletionJobStatusOptionsModel := new(schematicsv1.GetWorkspaceDeletionJobStatusOptions)
				getWorkspaceDeletionJobStatusOptionsModel.WjID = core.StringPtr("testString")
				getWorkspaceDeletionJobStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceDeletionJobStatusWithContext(ctx, getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceDeletionJobStatusWithContext(ctx, getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceDeletionJobStatusPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_status": {"failed": ["Failed"], "in_progress": ["InProgress"], "success": ["Success"], "last_updated_on": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetWorkspaceDeletionJobStatus successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceDeletionJobStatus(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceDeletionJobStatusOptions model
				getWorkspaceDeletionJobStatusOptionsModel := new(schematicsv1.GetWorkspaceDeletionJobStatusOptions)
				getWorkspaceDeletionJobStatusOptionsModel.WjID = core.StringPtr("testString")
				getWorkspaceDeletionJobStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceDeletionJobStatus with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceDeletionJobStatusOptions model
				getWorkspaceDeletionJobStatusOptionsModel := new(schematicsv1.GetWorkspaceDeletionJobStatusOptions)
				getWorkspaceDeletionJobStatusOptionsModel.WjID = core.StringPtr("testString")
				getWorkspaceDeletionJobStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceDeletionJobStatusOptions model with no property values
				getWorkspaceDeletionJobStatusOptionsModelNew := new(schematicsv1.GetWorkspaceDeletionJobStatusOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematicsService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "https://schematicsv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
					URL: "https://testService/api",
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				err := schematicsService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematicsv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListInventories(listInventoriesOptions *ListInventoriesOptions) - Operation response error`, func() {
		listInventoriesPath := "/v2/inventories"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoriesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInventories with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematicsv1.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInventories(listInventoriesOptions *ListInventoriesOptions)`, func() {
		listInventoriesPath := "/v2/inventories"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoriesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "inventories": [{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}]}`)
				}))
			})
			It(`Invoke ListInventories successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematicsv1.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListInventoriesWithContext(ctx, listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListInventoriesWithContext(ctx, listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoriesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "inventories": [{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}]}`)
				}))
			})
			It(`Invoke ListInventories successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListInventories(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematicsv1.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInventories with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematicsv1.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInventory(createInventoryOptions *CreateInventoryOptions) - Operation response error`, func() {
		createInventoryPath := "/v2/inventories"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInventoryPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInventory with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematicsv1.CreateInventoryOptions)
				createInventoryOptionsModel.Name = core.StringPtr("testString")
				createInventoryOptionsModel.Description = core.StringPtr("testString")
				createInventoryOptionsModel.Location = core.StringPtr("us-south")
				createInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				createInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				createInventoryOptionsModel.ResourceQueries = []string{"testString"}
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateInventory(createInventoryOptions *CreateInventoryOptions)`, func() {
		createInventoryPath := "/v2/inventories"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInventoryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke CreateInventory successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematicsv1.CreateInventoryOptions)
				createInventoryOptionsModel.Name = core.StringPtr("testString")
				createInventoryOptionsModel.Description = core.StringPtr("testString")
				createInventoryOptionsModel.Location = core.StringPtr("us-south")
				createInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				createInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				createInventoryOptionsModel.ResourceQueries = []string{"testString"}
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateInventoryWithContext(ctx, createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateInventoryWithContext(ctx, createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInventoryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke CreateInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematicsv1.CreateInventoryOptions)
				createInventoryOptionsModel.Name = core.StringPtr("testString")
				createInventoryOptionsModel.Description = core.StringPtr("testString")
				createInventoryOptionsModel.Location = core.StringPtr("us-south")
				createInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				createInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				createInventoryOptionsModel.ResourceQueries = []string{"testString"}
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInventory with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematicsv1.CreateInventoryOptions)
				createInventoryOptionsModel.Name = core.StringPtr("testString")
				createInventoryOptionsModel.Description = core.StringPtr("testString")
				createInventoryOptionsModel.Location = core.StringPtr("us-south")
				createInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				createInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				createInventoryOptionsModel.ResourceQueries = []string{"testString"}
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInventory(getInventoryOptions *GetInventoryOptions) - Operation response error`, func() {
		getInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInventory with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematicsv1.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInventory(getInventoryOptions *GetInventoryOptions)`, func() {
		getInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke GetInventory successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematicsv1.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetInventoryWithContext(ctx, getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetInventoryWithContext(ctx, getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke GetInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematicsv1.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInventory with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematicsv1.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInventoryOptions model with no property values
				getInventoryOptionsModelNew := new(schematicsv1.GetInventoryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetInventory(getInventoryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceInventory(replaceInventoryOptions *ReplaceInventoryOptions) - Operation response error`, func() {
		replaceInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceInventoryPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceInventory with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematicsv1.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.Name = core.StringPtr("testString")
				replaceInventoryOptionsModel.Description = core.StringPtr("testString")
				replaceInventoryOptionsModel.Location = core.StringPtr("us-south")
				replaceInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				replaceInventoryOptionsModel.ResourceQueries = []string{"testString"}
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceInventory(replaceInventoryOptions *ReplaceInventoryOptions)`, func() {
		replaceInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceInventoryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke ReplaceInventory successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematicsv1.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.Name = core.StringPtr("testString")
				replaceInventoryOptionsModel.Description = core.StringPtr("testString")
				replaceInventoryOptionsModel.Location = core.StringPtr("us-south")
				replaceInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				replaceInventoryOptionsModel.ResourceQueries = []string{"testString"}
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ReplaceInventoryWithContext(ctx, replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ReplaceInventoryWithContext(ctx, replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceInventoryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke ReplaceInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ReplaceInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematicsv1.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.Name = core.StringPtr("testString")
				replaceInventoryOptionsModel.Description = core.StringPtr("testString")
				replaceInventoryOptionsModel.Location = core.StringPtr("us-south")
				replaceInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				replaceInventoryOptionsModel.ResourceQueries = []string{"testString"}
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceInventory with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematicsv1.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.Name = core.StringPtr("testString")
				replaceInventoryOptionsModel.Description = core.StringPtr("testString")
				replaceInventoryOptionsModel.Location = core.StringPtr("us-south")
				replaceInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				replaceInventoryOptionsModel.ResourceQueries = []string{"testString"}
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceInventoryOptions model with no property values
				replaceInventoryOptionsModelNew := new(schematicsv1.ReplaceInventoryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ReplaceInventory(replaceInventoryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteInventory(deleteInventoryOptions *DeleteInventoryOptions)`, func() {
		deleteInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInventoryPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeleteInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInventoryOptions model
				deleteInventoryOptionsModel := new(schematicsv1.DeleteInventoryOptions)
				deleteInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				deleteInventoryOptionsModel.Force = core.BoolPtr(true)
				deleteInventoryOptionsModel.Propagate = core.BoolPtr(true)
				deleteInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeleteInventory(deleteInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInventory with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteInventoryOptions model
				deleteInventoryOptionsModel := new(schematicsv1.DeleteInventoryOptions)
				deleteInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				deleteInventoryOptionsModel.Force = core.BoolPtr(true)
				deleteInventoryOptionsModel.Propagate = core.BoolPtr(true)
				deleteInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeleteInventory(deleteInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInventoryOptions model with no property values
				deleteInventoryOptionsModelNew := new(schematicsv1.DeleteInventoryOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeleteInventory(deleteInventoryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInventory(updateInventoryOptions *UpdateInventoryOptions) - Operation response error`, func() {
		updateInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInventoryPath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInventory with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UpdateInventoryOptions model
				updateInventoryOptionsModel := new(schematicsv1.UpdateInventoryOptions)
				updateInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				updateInventoryOptionsModel.Name = core.StringPtr("testString")
				updateInventoryOptionsModel.Description = core.StringPtr("testString")
				updateInventoryOptionsModel.Location = core.StringPtr("us-south")
				updateInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				updateInventoryOptionsModel.ResourceQueries = []string{"testString"}
				updateInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdateInventory(updateInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdateInventory(updateInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateInventory(updateInventoryOptions *UpdateInventoryOptions)`, func() {
		updateInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInventoryPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke UpdateInventory successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the UpdateInventoryOptions model
				updateInventoryOptionsModel := new(schematicsv1.UpdateInventoryOptions)
				updateInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				updateInventoryOptionsModel.Name = core.StringPtr("testString")
				updateInventoryOptionsModel.Description = core.StringPtr("testString")
				updateInventoryOptionsModel.Location = core.StringPtr("us-south")
				updateInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				updateInventoryOptionsModel.ResourceQueries = []string{"testString"}
				updateInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdateInventoryWithContext(ctx, updateInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdateInventory(updateInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdateInventoryWithContext(ctx, updateInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInventoryPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke UpdateInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdateInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateInventoryOptions model
				updateInventoryOptionsModel := new(schematicsv1.UpdateInventoryOptions)
				updateInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				updateInventoryOptionsModel.Name = core.StringPtr("testString")
				updateInventoryOptionsModel.Description = core.StringPtr("testString")
				updateInventoryOptionsModel.Location = core.StringPtr("us-south")
				updateInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				updateInventoryOptionsModel.ResourceQueries = []string{"testString"}
				updateInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdateInventory(updateInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateInventory with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UpdateInventoryOptions model
				updateInventoryOptionsModel := new(schematicsv1.UpdateInventoryOptions)
				updateInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				updateInventoryOptionsModel.Name = core.StringPtr("testString")
				updateInventoryOptionsModel.Description = core.StringPtr("testString")
				updateInventoryOptionsModel.Location = core.StringPtr("us-south")
				updateInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				updateInventoryOptionsModel.ResourceQueries = []string{"testString"}
				updateInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdateInventory(updateInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInventoryOptions model with no property values
				updateInventoryOptionsModelNew := new(schematicsv1.UpdateInventoryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UpdateInventory(updateInventoryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInventoryValues(listInventoryValuesOptions *ListInventoryValuesOptions) - Operation response error`, func() {
		listInventoryValuesPath := "/v2/inventories/testString/variables"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoryValuesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInventoryValues with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListInventoryValuesOptions model
				listInventoryValuesOptionsModel := new(schematicsv1.ListInventoryValuesOptions)
				listInventoryValuesOptionsModel.InventoryID = core.StringPtr("testString")
				listInventoryValuesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListInventoryValues(listInventoryValuesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListInventoryValues(listInventoryValuesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInventoryValues(listInventoryValuesOptions *ListInventoryValuesOptions)`, func() {
		listInventoryValuesPath := "/v2/inventories/testString/variables"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoryValuesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "inventories": [{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}]}`)
				}))
			})
			It(`Invoke ListInventoryValues successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListInventoryValuesOptions model
				listInventoryValuesOptionsModel := new(schematicsv1.ListInventoryValuesOptions)
				listInventoryValuesOptionsModel.InventoryID = core.StringPtr("testString")
				listInventoryValuesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListInventoryValuesWithContext(ctx, listInventoryValuesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListInventoryValues(listInventoryValuesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListInventoryValuesWithContext(ctx, listInventoryValuesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoryValuesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "inventories": [{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}]}`)
				}))
			})
			It(`Invoke ListInventoryValues successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListInventoryValues(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInventoryValuesOptions model
				listInventoryValuesOptionsModel := new(schematicsv1.ListInventoryValuesOptions)
				listInventoryValuesOptionsModel.InventoryID = core.StringPtr("testString")
				listInventoryValuesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListInventoryValues(listInventoryValuesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInventoryValues with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListInventoryValuesOptions model
				listInventoryValuesOptionsModel := new(schematicsv1.ListInventoryValuesOptions)
				listInventoryValuesOptionsModel.InventoryID = core.StringPtr("testString")
				listInventoryValuesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListInventoryValues(listInventoryValuesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInventoryValuesOptions model with no property values
				listInventoryValuesOptionsModelNew := new(schematicsv1.ListInventoryValuesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ListInventoryValues(listInventoryValuesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInventoryValue(getInventoryValueOptions *GetInventoryValueOptions) - Operation response error`, func() {
		getInventoryValuePath := "/v2/inventories/testString/variables/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryValuePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInventoryValue with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetInventoryValueOptions model
				getInventoryValueOptionsModel := new(schematicsv1.GetInventoryValueOptions)
				getInventoryValueOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryValueOptionsModel.VarName = core.StringPtr("testString")
				getInventoryValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetInventoryValue(getInventoryValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetInventoryValue(getInventoryValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInventoryValue(getInventoryValueOptions *GetInventoryValueOptions)`, func() {
		getInventoryValuePath := "/v2/inventories/testString/variables/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryValuePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke GetInventoryValue successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetInventoryValueOptions model
				getInventoryValueOptionsModel := new(schematicsv1.GetInventoryValueOptions)
				getInventoryValueOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryValueOptionsModel.VarName = core.StringPtr("testString")
				getInventoryValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetInventoryValueWithContext(ctx, getInventoryValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetInventoryValue(getInventoryValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetInventoryValueWithContext(ctx, getInventoryValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryValuePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke GetInventoryValue successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetInventoryValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInventoryValueOptions model
				getInventoryValueOptionsModel := new(schematicsv1.GetInventoryValueOptions)
				getInventoryValueOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryValueOptionsModel.VarName = core.StringPtr("testString")
				getInventoryValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetInventoryValue(getInventoryValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInventoryValue with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetInventoryValueOptions model
				getInventoryValueOptionsModel := new(schematicsv1.GetInventoryValueOptions)
				getInventoryValueOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryValueOptionsModel.VarName = core.StringPtr("testString")
				getInventoryValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetInventoryValue(getInventoryValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInventoryValueOptions model with no property values
				getInventoryValueOptionsModelNew := new(schematicsv1.GetInventoryValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetInventoryValue(getInventoryValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematicsService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "https://schematicsv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
					URL: "https://testService/api",
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				err := schematicsService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematicsv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListResourceQuery(listResourceQueryOptions *ListResourceQueryOptions) - Operation response error`, func() {
		listResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceQueryPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListResourceQuery with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematicsv1.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(1))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListResourceQuery(listResourceQueryOptions *ListResourceQueryOptions)`, func() {
		listResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceQueryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "resource_queries": [{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}]}`)
				}))
			})
			It(`Invoke ListResourceQuery successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematicsv1.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(1))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListResourceQueryWithContext(ctx, listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListResourceQueryWithContext(ctx, listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceQueryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "resource_queries": [{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}]}`)
				}))
			})
			It(`Invoke ListResourceQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListResourceQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematicsv1.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(1))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListResourceQuery with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematicsv1.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(1))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateResourceQuery(createResourceQueryOptions *CreateResourceQueryOptions) - Operation response error`, func() {
		createResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateResourceQuery with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematicsv1.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.Type = core.StringPtr("vsi")
				createResourceQueryOptionsModel.Name = core.StringPtr("testString")
				createResourceQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateResourceQuery(createResourceQueryOptions *CreateResourceQueryOptions)`, func() {
		createResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke CreateResourceQuery successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematicsv1.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.Type = core.StringPtr("vsi")
				createResourceQueryOptionsModel.Name = core.StringPtr("testString")
				createResourceQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateResourceQueryWithContext(ctx, createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateResourceQueryWithContext(ctx, createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke CreateResourceQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateResourceQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematicsv1.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.Type = core.StringPtr("vsi")
				createResourceQueryOptionsModel.Name = core.StringPtr("testString")
				createResourceQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateResourceQuery with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematicsv1.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.Type = core.StringPtr("vsi")
				createResourceQueryOptionsModel.Name = core.StringPtr("testString")
				createResourceQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetResourcesQuery(getResourcesQueryOptions *GetResourcesQueryOptions) - Operation response error`, func() {
		getResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getResourcesQueryPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetResourcesQuery with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematicsv1.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetResourcesQuery(getResourcesQueryOptions *GetResourcesQueryOptions)`, func() {
		getResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getResourcesQueryPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke GetResourcesQuery successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematicsv1.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetResourcesQueryWithContext(ctx, getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetResourcesQueryWithContext(ctx, getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getResourcesQueryPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke GetResourcesQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetResourcesQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematicsv1.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetResourcesQuery with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematicsv1.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetResourcesQueryOptions model with no property values
				getResourcesQueryOptionsModelNew := new(schematicsv1.GetResourcesQueryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetResourcesQuery(getResourcesQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceResourcesQuery(replaceResourcesQueryOptions *ReplaceResourcesQueryOptions) - Operation response error`, func() {
		replaceResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceResourcesQueryPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceResourcesQuery with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematicsv1.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Type = core.StringPtr("vsi")
				replaceResourcesQueryOptionsModel.Name = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceResourcesQuery(replaceResourcesQueryOptions *ReplaceResourcesQueryOptions)`, func() {
		replaceResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceResourcesQueryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke ReplaceResourcesQuery successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematicsv1.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Type = core.StringPtr("vsi")
				replaceResourcesQueryOptionsModel.Name = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ReplaceResourcesQueryWithContext(ctx, replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ReplaceResourcesQueryWithContext(ctx, replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceResourcesQueryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke ReplaceResourcesQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ReplaceResourcesQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematicsv1.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Type = core.StringPtr("vsi")
				replaceResourcesQueryOptionsModel.Name = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceResourcesQuery with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematicsv1.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Type = core.StringPtr("vsi")
				replaceResourcesQueryOptionsModel.Name = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceResourcesQueryOptions model with no property values
				replaceResourcesQueryOptionsModelNew := new(schematicsv1.ReplaceResourcesQueryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ExecuteResourceQuery(executeResourceQueryOptions *ExecuteResourceQueryOptions) - Operation response error`, func() {
		executeResourceQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(executeResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ExecuteResourceQuery with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematicsv1.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ExecuteResourceQuery(executeResourceQueryOptions *ExecuteResourceQueryOptions)`, func() {
		executeResourceQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(executeResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"response": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"], "query_output": [{"name": "Name", "value": "Value"}]}]}`)
				}))
			})
			It(`Invoke ExecuteResourceQuery successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematicsv1.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ExecuteResourceQueryWithContext(ctx, executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ExecuteResourceQueryWithContext(ctx, executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(executeResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"response": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"], "query_output": [{"name": "Name", "value": "Value"}]}]}`)
				}))
			})
			It(`Invoke ExecuteResourceQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ExecuteResourceQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematicsv1.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ExecuteResourceQuery with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematicsv1.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ExecuteResourceQueryOptions model with no property values
				executeResourceQueryOptionsModelNew := new(schematicsv1.ExecuteResourceQueryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteResourcesQuery(deleteResourcesQueryOptions *DeleteResourcesQueryOptions)`, func() {
		deleteResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteResourcesQueryPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteResourcesQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeleteResourcesQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteResourcesQueryOptions model
				deleteResourcesQueryOptionsModel := new(schematicsv1.DeleteResourcesQueryOptions)
				deleteResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				deleteResourcesQueryOptionsModel.Force = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Propagate = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeleteResourcesQuery(deleteResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteResourcesQuery with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteResourcesQueryOptions model
				deleteResourcesQueryOptionsModel := new(schematicsv1.DeleteResourcesQueryOptions)
				deleteResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				deleteResourcesQueryOptionsModel.Force = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Propagate = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeleteResourcesQuery(deleteResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteResourcesQueryOptions model with no property values
				deleteResourcesQueryOptionsModelNew := new(schematicsv1.DeleteResourcesQueryOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeleteResourcesQuery(deleteResourcesQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematicsService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "https://schematicsv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
					URL: "https://testService/api",
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				err := schematicsService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematicsv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetKmsSettings(getKmsSettingsOptions *GetKmsSettingsOptions) - Operation response error`, func() {
		getKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKmsSettingsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetKmsSettings with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematicsv1.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetKmsSettings(getKmsSettingsOptions *GetKmsSettingsOptions)`, func() {
		getKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKmsSettingsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke GetKmsSettings successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematicsv1.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetKmsSettingsWithContext(ctx, getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetKmsSettingsWithContext(ctx, getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKmsSettingsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke GetKmsSettings successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetKmsSettings(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematicsv1.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetKmsSettings with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematicsv1.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetKmsSettingsOptions model with no property values
				getKmsSettingsOptionsModelNew := new(schematicsv1.GetKmsSettingsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetKmsSettings(getKmsSettingsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateKmsSettings(updateKmsSettingsOptions *UpdateKmsSettingsOptions) - Operation response error`, func() {
		updateKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKmsSettingsPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateKmsSettings with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematicsv1.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematicsv1.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematicsv1.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				updateKmsSettingsOptionsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateKmsSettings(updateKmsSettingsOptions *UpdateKmsSettingsOptions)`, func() {
		updateKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKmsSettingsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke UpdateKmsSettings successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematicsv1.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematicsv1.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematicsv1.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				updateKmsSettingsOptionsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdateKmsSettingsWithContext(ctx, updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdateKmsSettingsWithContext(ctx, updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKmsSettingsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke UpdateKmsSettings successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdateKmsSettings(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematicsv1.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematicsv1.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematicsv1.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				updateKmsSettingsOptionsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateKmsSettings with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematicsv1.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematicsv1.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematicsv1.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				updateKmsSettingsOptionsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListKms(listKmsOptions *ListKmsOptions) - Operation response error`, func() {
		listKmsPath := "/v2/settings/kms_instances"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKmsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["encryption_scheme"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListKms with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematicsv1.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListKms(listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListKms(listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListKms(listKmsOptions *ListKmsOptions)`, func() {
		listKmsPath := "/v2/settings/kms_instances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKmsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["encryption_scheme"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "kms_instances": [{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "kms_crn": "KmsCrn", "kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "kms_public_endpoint": "KmsPublicEndpoint", "keys": [{"name": "Name", "crn": "Crn", "error": "Error"}]}]}`)
				}))
			})
			It(`Invoke ListKms successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematicsv1.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListKmsWithContext(ctx, listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListKms(listKmsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListKmsWithContext(ctx, listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKmsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["encryption_scheme"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "kms_instances": [{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "kms_crn": "KmsCrn", "kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "kms_public_endpoint": "KmsPublicEndpoint", "keys": [{"name": "Name", "crn": "Crn", "error": "Error"}]}]}`)
				}))
			})
			It(`Invoke ListKms successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListKms(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematicsv1.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListKms(listKmsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListKms with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematicsv1.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListKms(listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListKmsOptions model with no property values
				listKmsOptionsModelNew := new(schematicsv1.ListKmsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ListKms(listKmsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			schematicsService, _ := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL:           "http://schematicsv1modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
			})
			It(`Invoke NewApplyWorkspaceCommandOptions successfully`, func() {
				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				Expect(workspaceActivityOptionsTemplateModel).ToNot(BeNil())
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}
				Expect(workspaceActivityOptionsTemplateModel.Target).To(Equal([]string{"testString"}))
				Expect(workspaceActivityOptionsTemplateModel.TfVars).To(Equal([]string{"testString"}))

				// Construct an instance of the ApplyWorkspaceCommandOptions model
				wID := "testString"
				refreshToken := "testString"
				applyWorkspaceCommandOptionsModel := schematicsService.NewApplyWorkspaceCommandOptions(wID, refreshToken)
				applyWorkspaceCommandOptionsModel.SetWID("testString")
				applyWorkspaceCommandOptionsModel.SetRefreshToken("testString")
				applyWorkspaceCommandOptionsModel.SetActionOptions(workspaceActivityOptionsTemplateModel)
				applyWorkspaceCommandOptionsModel.SetDelegatedToken("testString")
				applyWorkspaceCommandOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(applyWorkspaceCommandOptionsModel).ToNot(BeNil())
				Expect(applyWorkspaceCommandOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(applyWorkspaceCommandOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(applyWorkspaceCommandOptionsModel.ActionOptions).To(Equal(workspaceActivityOptionsTemplateModel))
				Expect(applyWorkspaceCommandOptionsModel.DelegatedToken).To(Equal(core.StringPtr("testString")))
				Expect(applyWorkspaceCommandOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateActionOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				Expect(externalSourceCosBucketModel).ToNot(BeNil())
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")
				Expect(externalSourceCosBucketModel.CosBucketURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.CosBucket).To(Equal(externalSourceCosBucketModel))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematicsv1.ActionState)
				Expect(actionStateModel).ToNot(BeNil())
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				Expect(actionStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(actionStateModel.StatusJobID).To(Equal(core.StringPtr("testString")))
				Expect(actionStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematicsv1.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := schematicsService.NewCreateActionOptions()
				createActionOptionsModel.SetName("Stop Action")
				createActionOptionsModel.SetDescription("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				createActionOptionsModel.SetLocation("us-south")
				createActionOptionsModel.SetResourceGroup("testString")
				createActionOptionsModel.SetTags([]string{"testString"})
				createActionOptionsModel.SetUserState(userStateModel)
				createActionOptionsModel.SetSourceReadmeURL("testString")
				createActionOptionsModel.SetSource(externalSourceModel)
				createActionOptionsModel.SetSourceType("local")
				createActionOptionsModel.SetCommandParameter("testString")
				createActionOptionsModel.SetInventory("testString")
				createActionOptionsModel.SetCredentials([]schematicsv1.VariableData{*variableDataModel})
				createActionOptionsModel.SetBastion(bastionResourceDefinitionModel)
				createActionOptionsModel.SetBastionCredential(variableDataModel)
				createActionOptionsModel.SetTargetsIni("testString")
				createActionOptionsModel.SetInputs([]schematicsv1.VariableData{*variableDataModel})
				createActionOptionsModel.SetOutputs([]schematicsv1.VariableData{*variableDataModel})
				createActionOptionsModel.SetSettings([]schematicsv1.VariableData{*variableDataModel})
				createActionOptionsModel.SetState(actionStateModel)
				createActionOptionsModel.SetSysLock(systemLockModel)
				createActionOptionsModel.SetXGithubToken("testString")
				createActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createActionOptionsModel).ToNot(BeNil())
				Expect(createActionOptionsModel.Name).To(Equal(core.StringPtr("Stop Action")))
				Expect(createActionOptionsModel.Description).To(Equal(core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")))
				Expect(createActionOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(createActionOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(createActionOptionsModel.UserState).To(Equal(userStateModel))
				Expect(createActionOptionsModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Source).To(Equal(externalSourceModel))
				Expect(createActionOptionsModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(createActionOptionsModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Credentials).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createActionOptionsModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(createActionOptionsModel.BastionCredential).To(Equal(variableDataModel))
				Expect(createActionOptionsModel.TargetsIni).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createActionOptionsModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createActionOptionsModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createActionOptionsModel.State).To(Equal(actionStateModel))
				Expect(createActionOptionsModel.SysLock).To(Equal(systemLockModel))
				Expect(createActionOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInventoryOptions successfully`, func() {
				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := schematicsService.NewCreateInventoryOptions()
				createInventoryOptionsModel.SetName("testString")
				createInventoryOptionsModel.SetDescription("testString")
				createInventoryOptionsModel.SetLocation("us-south")
				createInventoryOptionsModel.SetResourceGroup("testString")
				createInventoryOptionsModel.SetInventoriesIni("testString")
				createInventoryOptionsModel.SetResourceQueries([]string{"testString"})
				createInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInventoryOptionsModel).ToNot(BeNil())
				Expect(createInventoryOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createInventoryOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(createInventoryOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(createInventoryOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createInventoryOptionsModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(createInventoryOptionsModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(createInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateJobOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematicsv1.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				Expect(externalSourceCosBucketModel).ToNot(BeNil())
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")
				Expect(externalSourceCosBucketModel.CosBucketURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.CosBucket).To(Equal(externalSourceCosBucketModel))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))

				// Construct an instance of the CreateJobOptions model
				refreshToken := "testString"
				createJobOptionsModel := schematicsService.NewCreateJobOptions(refreshToken)
				createJobOptionsModel.SetRefreshToken("testString")
				createJobOptionsModel.SetCommandObject("workspace")
				createJobOptionsModel.SetCommandObjectID("testString")
				createJobOptionsModel.SetCommandName("workspace_plan")
				createJobOptionsModel.SetCommandParameter("testString")
				createJobOptionsModel.SetCommandOptions([]string{"testString"})
				createJobOptionsModel.SetInputs([]schematicsv1.VariableData{*variableDataModel})
				createJobOptionsModel.SetSettings([]schematicsv1.VariableData{*variableDataModel})
				createJobOptionsModel.SetTags([]string{"testString"})
				createJobOptionsModel.SetLocation("us-south")
				createJobOptionsModel.SetStatus(jobStatusModel)
				createJobOptionsModel.SetData(jobDataModel)
				createJobOptionsModel.SetBastion(bastionResourceDefinitionModel)
				createJobOptionsModel.SetLogSummary(jobLogSummaryModel)
				createJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createJobOptionsModel).ToNot(BeNil())
				Expect(createJobOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(createJobOptionsModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(createJobOptionsModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(createJobOptionsModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(createJobOptionsModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(createJobOptionsModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(createJobOptionsModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createJobOptionsModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createJobOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(createJobOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(createJobOptionsModel.Status).To(Equal(jobStatusModel))
				Expect(createJobOptionsModel.Data).To(Equal(jobDataModel))
				Expect(createJobOptionsModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(createJobOptionsModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(createJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateResourceQueryOptions successfully`, func() {
				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				Expect(resourceQueryParamModel).ToNot(BeNil())
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				Expect(resourceQueryParamModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Description).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				Expect(resourceQueryModel).ToNot(BeNil())
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				Expect(resourceQueryModel.QueryType).To(Equal(core.StringPtr("workspaces")))
				Expect(resourceQueryModel.QueryCondition).To(Equal([]schematicsv1.ResourceQueryParam{*resourceQueryParamModel}))
				Expect(resourceQueryModel.QuerySelect).To(Equal([]string{"testString"}))

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := schematicsService.NewCreateResourceQueryOptions()
				createResourceQueryOptionsModel.SetType("vsi")
				createResourceQueryOptionsModel.SetName("testString")
				createResourceQueryOptionsModel.SetQueries([]schematicsv1.ResourceQuery{*resourceQueryModel})
				createResourceQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createResourceQueryOptionsModel).ToNot(BeNil())
				Expect(createResourceQueryOptionsModel.Type).To(Equal(core.StringPtr("vsi")))
				Expect(createResourceQueryOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createResourceQueryOptionsModel.Queries).To(Equal([]schematicsv1.ResourceQuery{*resourceQueryModel}))
				Expect(createResourceQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateWorkspaceDeletionJobOptions successfully`, func() {
				// Construct an instance of the CreateWorkspaceDeletionJobOptions model
				refreshToken := "testString"
				createWorkspaceDeletionJobOptionsModel := schematicsService.NewCreateWorkspaceDeletionJobOptions(refreshToken)
				createWorkspaceDeletionJobOptionsModel.SetRefreshToken("testString")
				createWorkspaceDeletionJobOptionsModel.SetNewDeleteWorkspaces(true)
				createWorkspaceDeletionJobOptionsModel.SetNewDestroyResources(true)
				createWorkspaceDeletionJobOptionsModel.SetNewJob("testString")
				createWorkspaceDeletionJobOptionsModel.SetNewVersion("testString")
				createWorkspaceDeletionJobOptionsModel.SetNewWorkspaces([]string{"testString"})
				createWorkspaceDeletionJobOptionsModel.SetDestroyResources("testString")
				createWorkspaceDeletionJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createWorkspaceDeletionJobOptionsModel).ToNot(BeNil())
				Expect(createWorkspaceDeletionJobOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceDeletionJobOptionsModel.NewDeleteWorkspaces).To(Equal(core.BoolPtr(true)))
				Expect(createWorkspaceDeletionJobOptionsModel.NewDestroyResources).To(Equal(core.BoolPtr(true)))
				Expect(createWorkspaceDeletionJobOptionsModel.NewJob).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceDeletionJobOptionsModel.NewVersion).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceDeletionJobOptionsModel.NewWorkspaces).To(Equal([]string{"testString"}))
				Expect(createWorkspaceDeletionJobOptionsModel.DestroyResources).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceDeletionJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateWorkspaceOptions successfully`, func() {
				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				Expect(catalogRefModel).ToNot(BeNil())
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				Expect(catalogRefModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogRefModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.LaunchURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.OfferingVersion).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				Expect(sharedTargetDataModel).ToNot(BeNil())
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")
				Expect(sharedTargetDataModel.ClusterCreatedOn).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterName).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterType).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.EntitlementKeys).To(Equal([]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(sharedTargetDataModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.WorkerCount).To(Equal(core.Int64Ptr(int64(26))))
				Expect(sharedTargetDataModel.WorkerMachineType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				Expect(workspaceVariableRequestModel).ToNot(BeNil())
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")
				Expect(workspaceVariableRequestModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				Expect(templateSourceDataRequestModel).ToNot(BeNil())
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				Expect(templateSourceDataRequestModel.EnvValues).To(Equal([]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.Folder).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Compact).To(Equal(core.BoolPtr(true)))
				Expect(templateSourceDataRequestModel.InitStateFile).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.UninstallScriptName).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Values).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.ValuesMetadata).To(Equal([]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.Variablestore).To(Equal([]schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}))

				// Construct an instance of the TemplateRepoRequest model
				templateRepoRequestModel := new(schematicsv1.TemplateRepoRequest)
				Expect(templateRepoRequestModel).ToNot(BeNil())
				templateRepoRequestModel.Branch = core.StringPtr("testString")
				templateRepoRequestModel.Release = core.StringPtr("testString")
				templateRepoRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoRequestModel.URL = core.StringPtr("testString")
				Expect(templateRepoRequestModel.Branch).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoRequestModel.Release).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoRequestModel.RepoShaValue).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoRequestModel.RepoURL).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoRequestModel.URL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceStatusRequest model
				workspaceStatusRequestModel := new(schematicsv1.WorkspaceStatusRequest)
				Expect(workspaceStatusRequestModel).ToNot(BeNil())
				workspaceStatusRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusRequestModel.LockedTime = CreateMockDateTime()
				Expect(workspaceStatusRequestModel.Frozen).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusRequestModel.FrozenAt).To(Equal(CreateMockDateTime()))
				Expect(workspaceStatusRequestModel.FrozenBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusRequestModel.Locked).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusRequestModel.LockedBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusRequestModel.LockedTime).To(Equal(CreateMockDateTime()))

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := schematicsService.NewCreateWorkspaceOptions()
				createWorkspaceOptionsModel.SetAppliedShareddataIds([]string{"testString"})
				createWorkspaceOptionsModel.SetCatalogRef(catalogRefModel)
				createWorkspaceOptionsModel.SetDescription("testString")
				createWorkspaceOptionsModel.SetLocation("testString")
				createWorkspaceOptionsModel.SetName("testString")
				createWorkspaceOptionsModel.SetResourceGroup("testString")
				createWorkspaceOptionsModel.SetSharedData(sharedTargetDataModel)
				createWorkspaceOptionsModel.SetTags([]string{"testString"})
				createWorkspaceOptionsModel.SetTemplateData([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel})
				createWorkspaceOptionsModel.SetTemplateRef("testString")
				createWorkspaceOptionsModel.SetTemplateRepo(templateRepoRequestModel)
				createWorkspaceOptionsModel.SetType([]string{"testString"})
				createWorkspaceOptionsModel.SetWorkspaceStatus(workspaceStatusRequestModel)
				createWorkspaceOptionsModel.SetXGithubToken("testString")
				createWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createWorkspaceOptionsModel).ToNot(BeNil())
				Expect(createWorkspaceOptionsModel.AppliedShareddataIds).To(Equal([]string{"testString"}))
				Expect(createWorkspaceOptionsModel.CatalogRef).To(Equal(catalogRefModel))
				Expect(createWorkspaceOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.SharedData).To(Equal(sharedTargetDataModel))
				Expect(createWorkspaceOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(createWorkspaceOptionsModel.TemplateData).To(Equal([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}))
				Expect(createWorkspaceOptionsModel.TemplateRef).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.TemplateRepo).To(Equal(templateRepoRequestModel))
				Expect(createWorkspaceOptionsModel.Type).To(Equal([]string{"testString"}))
				Expect(createWorkspaceOptionsModel.WorkspaceStatus).To(Equal(workspaceStatusRequestModel))
				Expect(createWorkspaceOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteActionOptions successfully`, func() {
				// Construct an instance of the DeleteActionOptions model
				actionID := "testString"
				deleteActionOptionsModel := schematicsService.NewDeleteActionOptions(actionID)
				deleteActionOptionsModel.SetActionID("testString")
				deleteActionOptionsModel.SetForce(true)
				deleteActionOptionsModel.SetPropagate(true)
				deleteActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteActionOptionsModel).ToNot(BeNil())
				Expect(deleteActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(deleteActionOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteActionOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInventoryOptions successfully`, func() {
				// Construct an instance of the DeleteInventoryOptions model
				inventoryID := "testString"
				deleteInventoryOptionsModel := schematicsService.NewDeleteInventoryOptions(inventoryID)
				deleteInventoryOptionsModel.SetInventoryID("testString")
				deleteInventoryOptionsModel.SetForce(true)
				deleteInventoryOptionsModel.SetPropagate(true)
				deleteInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInventoryOptionsModel).ToNot(BeNil())
				Expect(deleteInventoryOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInventoryOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteInventoryOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteJobOptions successfully`, func() {
				// Construct an instance of the DeleteJobOptions model
				jobID := "testString"
				refreshToken := "testString"
				deleteJobOptionsModel := schematicsService.NewDeleteJobOptions(jobID, refreshToken)
				deleteJobOptionsModel.SetJobID("testString")
				deleteJobOptionsModel.SetRefreshToken("testString")
				deleteJobOptionsModel.SetForce(true)
				deleteJobOptionsModel.SetPropagate(true)
				deleteJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteJobOptionsModel).ToNot(BeNil())
				Expect(deleteJobOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(deleteJobOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(deleteJobOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteJobOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteResourcesQueryOptions successfully`, func() {
				// Construct an instance of the DeleteResourcesQueryOptions model
				queryID := "testString"
				deleteResourcesQueryOptionsModel := schematicsService.NewDeleteResourcesQueryOptions(queryID)
				deleteResourcesQueryOptionsModel.SetQueryID("testString")
				deleteResourcesQueryOptionsModel.SetForce(true)
				deleteResourcesQueryOptionsModel.SetPropagate(true)
				deleteResourcesQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteResourcesQueryOptionsModel).ToNot(BeNil())
				Expect(deleteResourcesQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(deleteResourcesQueryOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteResourcesQueryOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteResourcesQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteWorkspaceActivityOptions successfully`, func() {
				// Construct an instance of the DeleteWorkspaceActivityOptions model
				wID := "testString"
				activityID := "testString"
				deleteWorkspaceActivityOptionsModel := schematicsService.NewDeleteWorkspaceActivityOptions(wID, activityID)
				deleteWorkspaceActivityOptionsModel.SetWID("testString")
				deleteWorkspaceActivityOptionsModel.SetActivityID("testString")
				deleteWorkspaceActivityOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteWorkspaceActivityOptionsModel).ToNot(BeNil())
				Expect(deleteWorkspaceActivityOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(deleteWorkspaceActivityOptionsModel.ActivityID).To(Equal(core.StringPtr("testString")))
				Expect(deleteWorkspaceActivityOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteWorkspaceOptions successfully`, func() {
				// Construct an instance of the DeleteWorkspaceOptions model
				wID := "testString"
				deleteWorkspaceOptionsModel := schematicsService.NewDeleteWorkspaceOptions(wID)
				deleteWorkspaceOptionsModel.SetWID("testString")
				deleteWorkspaceOptionsModel.SetDestroyResources(true)
				deleteWorkspaceOptionsModel.SetRefreshToken("testString")
				deleteWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteWorkspaceOptionsModel).ToNot(BeNil())
				Expect(deleteWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(deleteWorkspaceOptionsModel.DestroyResources).To(Equal(core.BoolPtr(true)))
				Expect(deleteWorkspaceOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(deleteWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDestroyWorkspaceCommandOptions successfully`, func() {
				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				Expect(workspaceActivityOptionsTemplateModel).ToNot(BeNil())
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}
				Expect(workspaceActivityOptionsTemplateModel.Target).To(Equal([]string{"testString"}))
				Expect(workspaceActivityOptionsTemplateModel.TfVars).To(Equal([]string{"testString"}))

				// Construct an instance of the DestroyWorkspaceCommandOptions model
				wID := "testString"
				refreshToken := "testString"
				destroyWorkspaceCommandOptionsModel := schematicsService.NewDestroyWorkspaceCommandOptions(wID, refreshToken)
				destroyWorkspaceCommandOptionsModel.SetWID("testString")
				destroyWorkspaceCommandOptionsModel.SetRefreshToken("testString")
				destroyWorkspaceCommandOptionsModel.SetActionOptions(workspaceActivityOptionsTemplateModel)
				destroyWorkspaceCommandOptionsModel.SetDelegatedToken("testString")
				destroyWorkspaceCommandOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(destroyWorkspaceCommandOptionsModel).ToNot(BeNil())
				Expect(destroyWorkspaceCommandOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(destroyWorkspaceCommandOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(destroyWorkspaceCommandOptionsModel.ActionOptions).To(Equal(workspaceActivityOptionsTemplateModel))
				Expect(destroyWorkspaceCommandOptionsModel.DelegatedToken).To(Equal(core.StringPtr("testString")))
				Expect(destroyWorkspaceCommandOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewExecuteResourceQueryOptions successfully`, func() {
				// Construct an instance of the ExecuteResourceQueryOptions model
				queryID := "testString"
				executeResourceQueryOptionsModel := schematicsService.NewExecuteResourceQueryOptions(queryID)
				executeResourceQueryOptionsModel.SetQueryID("testString")
				executeResourceQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(executeResourceQueryOptionsModel).ToNot(BeNil())
				Expect(executeResourceQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(executeResourceQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewExternalSource successfully`, func() {
				sourceType := "local"
				model, err := schematicsService.NewExternalSource(sourceType)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewGetActionOptions successfully`, func() {
				// Construct an instance of the GetActionOptions model
				actionID := "testString"
				getActionOptionsModel := schematicsService.NewGetActionOptions(actionID)
				getActionOptionsModel.SetActionID("testString")
				getActionOptionsModel.SetProfile("summary")
				getActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getActionOptionsModel).ToNot(BeNil())
				Expect(getActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(getActionOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAllWorkspaceInputsOptions successfully`, func() {
				// Construct an instance of the GetAllWorkspaceInputsOptions model
				wID := "testString"
				getAllWorkspaceInputsOptionsModel := schematicsService.NewGetAllWorkspaceInputsOptions(wID)
				getAllWorkspaceInputsOptionsModel.SetWID("testString")
				getAllWorkspaceInputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAllWorkspaceInputsOptionsModel).ToNot(BeNil())
				Expect(getAllWorkspaceInputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getAllWorkspaceInputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInventoryOptions successfully`, func() {
				// Construct an instance of the GetInventoryOptions model
				inventoryID := "testString"
				getInventoryOptionsModel := schematicsService.NewGetInventoryOptions(inventoryID)
				getInventoryOptionsModel.SetInventoryID("testString")
				getInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInventoryOptionsModel).ToNot(BeNil())
				Expect(getInventoryOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(getInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInventoryValueOptions successfully`, func() {
				// Construct an instance of the GetInventoryValueOptions model
				inventoryID := "testString"
				varName := "testString"
				getInventoryValueOptionsModel := schematicsService.NewGetInventoryValueOptions(inventoryID, varName)
				getInventoryValueOptionsModel.SetInventoryID("testString")
				getInventoryValueOptionsModel.SetVarName("testString")
				getInventoryValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInventoryValueOptionsModel).ToNot(BeNil())
				Expect(getInventoryValueOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(getInventoryValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getInventoryValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetJobOptions successfully`, func() {
				// Construct an instance of the GetJobOptions model
				jobID := "testString"
				getJobOptionsModel := schematicsService.NewGetJobOptions(jobID)
				getJobOptionsModel.SetJobID("testString")
				getJobOptionsModel.SetProfile("summary")
				getJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getJobOptionsModel).ToNot(BeNil())
				Expect(getJobOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getJobOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetKmsSettingsOptions successfully`, func() {
				// Construct an instance of the GetKmsSettingsOptions model
				location := "testString"
				getKmsSettingsOptionsModel := schematicsService.NewGetKmsSettingsOptions(location)
				getKmsSettingsOptionsModel.SetLocation("testString")
				getKmsSettingsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getKmsSettingsOptionsModel).ToNot(BeNil())
				Expect(getKmsSettingsOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(getKmsSettingsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetResourcesQueryOptions successfully`, func() {
				// Construct an instance of the GetResourcesQueryOptions model
				queryID := "testString"
				getResourcesQueryOptionsModel := schematicsService.NewGetResourcesQueryOptions(queryID)
				getResourcesQueryOptionsModel.SetQueryID("testString")
				getResourcesQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getResourcesQueryOptionsModel).ToNot(BeNil())
				Expect(getResourcesQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(getResourcesQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSchematicsVersionOptions successfully`, func() {
				// Construct an instance of the GetSchematicsVersionOptions model
				getSchematicsVersionOptionsModel := schematicsService.NewGetSchematicsVersionOptions()
				getSchematicsVersionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSchematicsVersionOptionsModel).ToNot(BeNil())
				Expect(getSchematicsVersionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTemplateActivityLogOptions successfully`, func() {
				// Construct an instance of the GetTemplateActivityLogOptions model
				wID := "testString"
				tID := "testString"
				activityID := "testString"
				getTemplateActivityLogOptionsModel := schematicsService.NewGetTemplateActivityLogOptions(wID, tID, activityID)
				getTemplateActivityLogOptionsModel.SetWID("testString")
				getTemplateActivityLogOptionsModel.SetTID("testString")
				getTemplateActivityLogOptionsModel.SetActivityID("testString")
				getTemplateActivityLogOptionsModel.SetLogTfCmd(true)
				getTemplateActivityLogOptionsModel.SetLogTfPrefix(true)
				getTemplateActivityLogOptionsModel.SetLogTfNullResource(true)
				getTemplateActivityLogOptionsModel.SetLogTfAnsible(true)
				getTemplateActivityLogOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTemplateActivityLogOptionsModel).ToNot(BeNil())
				Expect(getTemplateActivityLogOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateActivityLogOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateActivityLogOptionsModel.ActivityID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateActivityLogOptionsModel.LogTfCmd).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateActivityLogOptionsModel.LogTfPrefix).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateActivityLogOptionsModel.LogTfNullResource).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateActivityLogOptionsModel.LogTfAnsible).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateActivityLogOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTemplateLogsOptions successfully`, func() {
				// Construct an instance of the GetTemplateLogsOptions model
				wID := "testString"
				tID := "testString"
				getTemplateLogsOptionsModel := schematicsService.NewGetTemplateLogsOptions(wID, tID)
				getTemplateLogsOptionsModel.SetWID("testString")
				getTemplateLogsOptionsModel.SetTID("testString")
				getTemplateLogsOptionsModel.SetLogTfCmd(true)
				getTemplateLogsOptionsModel.SetLogTfPrefix(true)
				getTemplateLogsOptionsModel.SetLogTfNullResource(true)
				getTemplateLogsOptionsModel.SetLogTfAnsible(true)
				getTemplateLogsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTemplateLogsOptionsModel).ToNot(BeNil())
				Expect(getTemplateLogsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateLogsOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateLogsOptionsModel.LogTfCmd).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateLogsOptionsModel.LogTfPrefix).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateLogsOptionsModel.LogTfNullResource).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateLogsOptionsModel.LogTfAnsible).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateLogsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceActivityLogsOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceActivityLogsOptions model
				wID := "testString"
				activityID := "testString"
				getWorkspaceActivityLogsOptionsModel := schematicsService.NewGetWorkspaceActivityLogsOptions(wID, activityID)
				getWorkspaceActivityLogsOptionsModel.SetWID("testString")
				getWorkspaceActivityLogsOptionsModel.SetActivityID("testString")
				getWorkspaceActivityLogsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceActivityLogsOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceActivityLogsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceActivityLogsOptionsModel.ActivityID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceActivityLogsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceActivityOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceActivityOptions model
				wID := "testString"
				activityID := "testString"
				getWorkspaceActivityOptionsModel := schematicsService.NewGetWorkspaceActivityOptions(wID, activityID)
				getWorkspaceActivityOptionsModel.SetWID("testString")
				getWorkspaceActivityOptionsModel.SetActivityID("testString")
				getWorkspaceActivityOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceActivityOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceActivityOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceActivityOptionsModel.ActivityID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceActivityOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceDeletionJobStatusOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceDeletionJobStatusOptions model
				wjID := "testString"
				getWorkspaceDeletionJobStatusOptionsModel := schematicsService.NewGetWorkspaceDeletionJobStatusOptions(wjID)
				getWorkspaceDeletionJobStatusOptionsModel.SetWjID("testString")
				getWorkspaceDeletionJobStatusOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceDeletionJobStatusOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceDeletionJobStatusOptionsModel.WjID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceDeletionJobStatusOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceInputMetadataOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceInputMetadataOptions model
				wID := "testString"
				tID := "testString"
				getWorkspaceInputMetadataOptionsModel := schematicsService.NewGetWorkspaceInputMetadataOptions(wID, tID)
				getWorkspaceInputMetadataOptionsModel.SetWID("testString")
				getWorkspaceInputMetadataOptionsModel.SetTID("testString")
				getWorkspaceInputMetadataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceInputMetadataOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceInputMetadataOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceInputMetadataOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceInputMetadataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceInputsOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceInputsOptions model
				wID := "testString"
				tID := "testString"
				getWorkspaceInputsOptionsModel := schematicsService.NewGetWorkspaceInputsOptions(wID, tID)
				getWorkspaceInputsOptionsModel.SetWID("testString")
				getWorkspaceInputsOptionsModel.SetTID("testString")
				getWorkspaceInputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceInputsOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceInputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceInputsOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceInputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceLogUrlsOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceLogUrlsOptions model
				wID := "testString"
				getWorkspaceLogUrlsOptionsModel := schematicsService.NewGetWorkspaceLogUrlsOptions(wID)
				getWorkspaceLogUrlsOptionsModel.SetWID("testString")
				getWorkspaceLogUrlsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceLogUrlsOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceLogUrlsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceLogUrlsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceOptions model
				wID := "testString"
				getWorkspaceOptionsModel := schematicsService.NewGetWorkspaceOptions(wID)
				getWorkspaceOptionsModel.SetWID("testString")
				getWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceOutputsOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceOutputsOptions model
				wID := "testString"
				getWorkspaceOutputsOptionsModel := schematicsService.NewGetWorkspaceOutputsOptions(wID)
				getWorkspaceOutputsOptionsModel.SetWID("testString")
				getWorkspaceOutputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceOutputsOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceOutputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceOutputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceReadmeOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceReadmeOptions model
				wID := "testString"
				getWorkspaceReadmeOptionsModel := schematicsService.NewGetWorkspaceReadmeOptions(wID)
				getWorkspaceReadmeOptionsModel.SetWID("testString")
				getWorkspaceReadmeOptionsModel.SetRef("testString")
				getWorkspaceReadmeOptionsModel.SetFormatted("markdown")
				getWorkspaceReadmeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceReadmeOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceReadmeOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceReadmeOptionsModel.Ref).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceReadmeOptionsModel.Formatted).To(Equal(core.StringPtr("markdown")))
				Expect(getWorkspaceReadmeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceResourcesOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceResourcesOptions model
				wID := "testString"
				getWorkspaceResourcesOptionsModel := schematicsService.NewGetWorkspaceResourcesOptions(wID)
				getWorkspaceResourcesOptionsModel.SetWID("testString")
				getWorkspaceResourcesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceResourcesOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceResourcesOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceResourcesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceStateOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceStateOptions model
				wID := "testString"
				getWorkspaceStateOptionsModel := schematicsService.NewGetWorkspaceStateOptions(wID)
				getWorkspaceStateOptionsModel.SetWID("testString")
				getWorkspaceStateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceStateOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceStateOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceStateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceTemplateStateOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceTemplateStateOptions model
				wID := "testString"
				tID := "testString"
				getWorkspaceTemplateStateOptionsModel := schematicsService.NewGetWorkspaceTemplateStateOptions(wID, tID)
				getWorkspaceTemplateStateOptionsModel.SetWID("testString")
				getWorkspaceTemplateStateOptionsModel.SetTID("testString")
				getWorkspaceTemplateStateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceTemplateStateOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceTemplateStateOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateStateOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateStateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewJobData successfully`, func() {
				jobType := "repo_download_job"
				model, err := schematicsService.NewJobData(jobType)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewListActionsOptions successfully`, func() {
				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := schematicsService.NewListActionsOptions()
				listActionsOptionsModel.SetOffset(int64(0))
				listActionsOptionsModel.SetLimit(int64(1))
				listActionsOptionsModel.SetSort("testString")
				listActionsOptionsModel.SetProfile("ids")
				listActionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listActionsOptionsModel).ToNot(BeNil())
				Expect(listActionsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listActionsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listActionsOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listActionsOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listActionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInventoriesOptions successfully`, func() {
				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := schematicsService.NewListInventoriesOptions()
				listInventoriesOptionsModel.SetOffset(int64(0))
				listInventoriesOptionsModel.SetLimit(int64(1))
				listInventoriesOptionsModel.SetSort("testString")
				listInventoriesOptionsModel.SetProfile("ids")
				listInventoriesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInventoriesOptionsModel).ToNot(BeNil())
				Expect(listInventoriesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listInventoriesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listInventoriesOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listInventoriesOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listInventoriesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInventoryValuesOptions successfully`, func() {
				// Construct an instance of the ListInventoryValuesOptions model
				inventoryID := "testString"
				listInventoryValuesOptionsModel := schematicsService.NewListInventoryValuesOptions(inventoryID)
				listInventoryValuesOptionsModel.SetInventoryID("testString")
				listInventoryValuesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInventoryValuesOptionsModel).ToNot(BeNil())
				Expect(listInventoryValuesOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(listInventoryValuesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListJobLogsOptions successfully`, func() {
				// Construct an instance of the ListJobLogsOptions model
				jobID := "testString"
				listJobLogsOptionsModel := schematicsService.NewListJobLogsOptions(jobID)
				listJobLogsOptionsModel.SetJobID("testString")
				listJobLogsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listJobLogsOptionsModel).ToNot(BeNil())
				Expect(listJobLogsOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(listJobLogsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListJobsOptions successfully`, func() {
				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := schematicsService.NewListJobsOptions()
				listJobsOptionsModel.SetOffset(int64(0))
				listJobsOptionsModel.SetLimit(int64(1))
				listJobsOptionsModel.SetSort("testString")
				listJobsOptionsModel.SetProfile("ids")
				listJobsOptionsModel.SetResource("workspace")
				listJobsOptionsModel.SetResourceID("testString")
				listJobsOptionsModel.SetActionID("testString")
				listJobsOptionsModel.SetList("all")
				listJobsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listJobsOptionsModel).ToNot(BeNil())
				Expect(listJobsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listJobsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listJobsOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listJobsOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listJobsOptionsModel.Resource).To(Equal(core.StringPtr("workspace")))
				Expect(listJobsOptionsModel.ResourceID).To(Equal(core.StringPtr("testString")))
				Expect(listJobsOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(listJobsOptionsModel.List).To(Equal(core.StringPtr("all")))
				Expect(listJobsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListKmsOptions successfully`, func() {
				// Construct an instance of the ListKmsOptions model
				encryptionScheme := "testString"
				location := "testString"
				listKmsOptionsModel := schematicsService.NewListKmsOptions(encryptionScheme, location)
				listKmsOptionsModel.SetEncryptionScheme("testString")
				listKmsOptionsModel.SetLocation("testString")
				listKmsOptionsModel.SetResourceGroup("testString")
				listKmsOptionsModel.SetLimit(int64(1))
				listKmsOptionsModel.SetSort("testString")
				listKmsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listKmsOptionsModel).ToNot(BeNil())
				Expect(listKmsOptionsModel.EncryptionScheme).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listKmsOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLocationsOptions successfully`, func() {
				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := schematicsService.NewListLocationsOptions()
				listLocationsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLocationsOptionsModel).ToNot(BeNil())
				Expect(listLocationsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListResourceGroupOptions successfully`, func() {
				// Construct an instance of the ListResourceGroupOptions model
				listResourceGroupOptionsModel := schematicsService.NewListResourceGroupOptions()
				listResourceGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listResourceGroupOptionsModel).ToNot(BeNil())
				Expect(listResourceGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListResourceQueryOptions successfully`, func() {
				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := schematicsService.NewListResourceQueryOptions()
				listResourceQueryOptionsModel.SetOffset(int64(0))
				listResourceQueryOptionsModel.SetLimit(int64(1))
				listResourceQueryOptionsModel.SetSort("testString")
				listResourceQueryOptionsModel.SetProfile("ids")
				listResourceQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listResourceQueryOptionsModel).ToNot(BeNil())
				Expect(listResourceQueryOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listResourceQueryOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listResourceQueryOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listResourceQueryOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listResourceQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSchematicsLocationOptions successfully`, func() {
				// Construct an instance of the ListSchematicsLocationOptions model
				listSchematicsLocationOptionsModel := schematicsService.NewListSchematicsLocationOptions()
				listSchematicsLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSchematicsLocationOptionsModel).ToNot(BeNil())
				Expect(listSchematicsLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListWorkspaceActivitiesOptions successfully`, func() {
				// Construct an instance of the ListWorkspaceActivitiesOptions model
				wID := "testString"
				listWorkspaceActivitiesOptionsModel := schematicsService.NewListWorkspaceActivitiesOptions(wID)
				listWorkspaceActivitiesOptionsModel.SetWID("testString")
				listWorkspaceActivitiesOptionsModel.SetOffset(int64(0))
				listWorkspaceActivitiesOptionsModel.SetLimit(int64(1))
				listWorkspaceActivitiesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listWorkspaceActivitiesOptionsModel).ToNot(BeNil())
				Expect(listWorkspaceActivitiesOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(listWorkspaceActivitiesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listWorkspaceActivitiesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listWorkspaceActivitiesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListWorkspacesOptions successfully`, func() {
				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := schematicsService.NewListWorkspacesOptions()
				listWorkspacesOptionsModel.SetOffset(int64(0))
				listWorkspacesOptionsModel.SetLimit(int64(1))
				listWorkspacesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listWorkspacesOptionsModel).ToNot(BeNil())
				Expect(listWorkspacesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listWorkspacesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listWorkspacesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPlanWorkspaceCommandOptions successfully`, func() {
				// Construct an instance of the PlanWorkspaceCommandOptions model
				wID := "testString"
				refreshToken := "testString"
				planWorkspaceCommandOptionsModel := schematicsService.NewPlanWorkspaceCommandOptions(wID, refreshToken)
				planWorkspaceCommandOptionsModel.SetWID("testString")
				planWorkspaceCommandOptionsModel.SetRefreshToken("testString")
				planWorkspaceCommandOptionsModel.SetDelegatedToken("testString")
				planWorkspaceCommandOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(planWorkspaceCommandOptionsModel).ToNot(BeNil())
				Expect(planWorkspaceCommandOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(planWorkspaceCommandOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(planWorkspaceCommandOptionsModel.DelegatedToken).To(Equal(core.StringPtr("testString")))
				Expect(planWorkspaceCommandOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewProcessTemplateMetaDataOptions successfully`, func() {
				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				Expect(externalSourceCosBucketModel).ToNot(BeNil())
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")
				Expect(externalSourceCosBucketModel.CosBucketURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.CosBucket).To(Equal(externalSourceCosBucketModel))

				// Construct an instance of the ProcessTemplateMetaDataOptions model
				processTemplateMetaDataOptionsTemplateType := "testString"
				var processTemplateMetaDataOptionsSource *schematicsv1.ExternalSource = nil
				processTemplateMetaDataOptionsModel := schematicsService.NewProcessTemplateMetaDataOptions(processTemplateMetaDataOptionsTemplateType, processTemplateMetaDataOptionsSource)
				processTemplateMetaDataOptionsModel.SetTemplateType("testString")
				processTemplateMetaDataOptionsModel.SetSource(externalSourceModel)
				processTemplateMetaDataOptionsModel.SetRegion("testString")
				processTemplateMetaDataOptionsModel.SetSourceType("local")
				processTemplateMetaDataOptionsModel.SetXGithubToken("testString")
				processTemplateMetaDataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(processTemplateMetaDataOptionsModel).ToNot(BeNil())
				Expect(processTemplateMetaDataOptionsModel.TemplateType).To(Equal(core.StringPtr("testString")))
				Expect(processTemplateMetaDataOptionsModel.Source).To(Equal(externalSourceModel))
				Expect(processTemplateMetaDataOptionsModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(processTemplateMetaDataOptionsModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(processTemplateMetaDataOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(processTemplateMetaDataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRefreshWorkspaceCommandOptions successfully`, func() {
				// Construct an instance of the RefreshWorkspaceCommandOptions model
				wID := "testString"
				refreshToken := "testString"
				refreshWorkspaceCommandOptionsModel := schematicsService.NewRefreshWorkspaceCommandOptions(wID, refreshToken)
				refreshWorkspaceCommandOptionsModel.SetWID("testString")
				refreshWorkspaceCommandOptionsModel.SetRefreshToken("testString")
				refreshWorkspaceCommandOptionsModel.SetDelegatedToken("testString")
				refreshWorkspaceCommandOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(refreshWorkspaceCommandOptionsModel).ToNot(BeNil())
				Expect(refreshWorkspaceCommandOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(refreshWorkspaceCommandOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(refreshWorkspaceCommandOptionsModel.DelegatedToken).To(Equal(core.StringPtr("testString")))
				Expect(refreshWorkspaceCommandOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceInventoryOptions successfully`, func() {
				// Construct an instance of the ReplaceInventoryOptions model
				inventoryID := "testString"
				replaceInventoryOptionsModel := schematicsService.NewReplaceInventoryOptions(inventoryID)
				replaceInventoryOptionsModel.SetInventoryID("testString")
				replaceInventoryOptionsModel.SetName("testString")
				replaceInventoryOptionsModel.SetDescription("testString")
				replaceInventoryOptionsModel.SetLocation("us-south")
				replaceInventoryOptionsModel.SetResourceGroup("testString")
				replaceInventoryOptionsModel.SetInventoriesIni("testString")
				replaceInventoryOptionsModel.SetResourceQueries([]string{"testString"})
				replaceInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceInventoryOptionsModel).ToNot(BeNil())
				Expect(replaceInventoryOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(replaceInventoryOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(replaceInventoryOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(replaceInventoryOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(replaceInventoryOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(replaceInventoryOptionsModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(replaceInventoryOptionsModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(replaceInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceResourcesQueryOptions successfully`, func() {
				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				Expect(resourceQueryParamModel).ToNot(BeNil())
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				Expect(resourceQueryParamModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Description).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				Expect(resourceQueryModel).ToNot(BeNil())
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				Expect(resourceQueryModel.QueryType).To(Equal(core.StringPtr("workspaces")))
				Expect(resourceQueryModel.QueryCondition).To(Equal([]schematicsv1.ResourceQueryParam{*resourceQueryParamModel}))
				Expect(resourceQueryModel.QuerySelect).To(Equal([]string{"testString"}))

				// Construct an instance of the ReplaceResourcesQueryOptions model
				queryID := "testString"
				replaceResourcesQueryOptionsModel := schematicsService.NewReplaceResourcesQueryOptions(queryID)
				replaceResourcesQueryOptionsModel.SetQueryID("testString")
				replaceResourcesQueryOptionsModel.SetType("vsi")
				replaceResourcesQueryOptionsModel.SetName("testString")
				replaceResourcesQueryOptionsModel.SetQueries([]schematicsv1.ResourceQuery{*resourceQueryModel})
				replaceResourcesQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceResourcesQueryOptionsModel).ToNot(BeNil())
				Expect(replaceResourcesQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(replaceResourcesQueryOptionsModel.Type).To(Equal(core.StringPtr("vsi")))
				Expect(replaceResourcesQueryOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(replaceResourcesQueryOptionsModel.Queries).To(Equal([]schematicsv1.ResourceQuery{*resourceQueryModel}))
				Expect(replaceResourcesQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceWorkspaceInputsOptions successfully`, func() {
				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				Expect(workspaceVariableRequestModel).ToNot(BeNil())
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")
				Expect(workspaceVariableRequestModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceWorkspaceInputsOptions model
				wID := "testString"
				tID := "testString"
				replaceWorkspaceInputsOptionsModel := schematicsService.NewReplaceWorkspaceInputsOptions(wID, tID)
				replaceWorkspaceInputsOptionsModel.SetWID("testString")
				replaceWorkspaceInputsOptionsModel.SetTID("testString")
				replaceWorkspaceInputsOptionsModel.SetEnvValues([]interface{}{map[string]interface{}{"anyKey": "anyValue"}})
				replaceWorkspaceInputsOptionsModel.SetValues("testString")
				replaceWorkspaceInputsOptionsModel.SetVariablestore([]schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel})
				replaceWorkspaceInputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceWorkspaceInputsOptionsModel).ToNot(BeNil())
				Expect(replaceWorkspaceInputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceInputsOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceInputsOptionsModel.EnvValues).To(Equal([]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(replaceWorkspaceInputsOptionsModel.Values).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceInputsOptionsModel.Variablestore).To(Equal([]schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}))
				Expect(replaceWorkspaceInputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceWorkspaceOptions successfully`, func() {
				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				Expect(catalogRefModel).ToNot(BeNil())
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				Expect(catalogRefModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogRefModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.LaunchURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.OfferingVersion).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				Expect(sharedTargetDataModel).ToNot(BeNil())
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")
				Expect(sharedTargetDataModel.ClusterCreatedOn).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterName).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterType).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.EntitlementKeys).To(Equal([]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(sharedTargetDataModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.WorkerCount).To(Equal(core.Int64Ptr(int64(26))))
				Expect(sharedTargetDataModel.WorkerMachineType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				Expect(workspaceVariableRequestModel).ToNot(BeNil())
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")
				Expect(workspaceVariableRequestModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				Expect(templateSourceDataRequestModel).ToNot(BeNil())
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				Expect(templateSourceDataRequestModel.EnvValues).To(Equal([]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.Folder).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Compact).To(Equal(core.BoolPtr(true)))
				Expect(templateSourceDataRequestModel.InitStateFile).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.UninstallScriptName).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Values).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.ValuesMetadata).To(Equal([]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.Variablestore).To(Equal([]schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}))

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				Expect(templateRepoUpdateRequestModel).ToNot(BeNil())
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")
				Expect(templateRepoUpdateRequestModel.Branch).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.Release).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.RepoShaValue).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.RepoURL).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.URL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				Expect(workspaceStatusUpdateRequestModel).ToNot(BeNil())
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime()
				Expect(workspaceStatusUpdateRequestModel.Frozen).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusUpdateRequestModel.FrozenAt).To(Equal(CreateMockDateTime()))
				Expect(workspaceStatusUpdateRequestModel.FrozenBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusUpdateRequestModel.Locked).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusUpdateRequestModel.LockedBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusUpdateRequestModel.LockedTime).To(Equal(CreateMockDateTime()))

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				Expect(workspaceStatusMessageModel).ToNot(BeNil())
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")
				Expect(workspaceStatusMessageModel.StatusCode).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusMessageModel.StatusMsg).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceWorkspaceOptions model
				wID := "testString"
				replaceWorkspaceOptionsModel := schematicsService.NewReplaceWorkspaceOptions(wID)
				replaceWorkspaceOptionsModel.SetWID("testString")
				replaceWorkspaceOptionsModel.SetCatalogRef(catalogRefModel)
				replaceWorkspaceOptionsModel.SetDescription("testString")
				replaceWorkspaceOptionsModel.SetName("testString")
				replaceWorkspaceOptionsModel.SetSharedData(sharedTargetDataModel)
				replaceWorkspaceOptionsModel.SetTags([]string{"testString"})
				replaceWorkspaceOptionsModel.SetTemplateData([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel})
				replaceWorkspaceOptionsModel.SetTemplateRepo(templateRepoUpdateRequestModel)
				replaceWorkspaceOptionsModel.SetType([]string{"testString"})
				replaceWorkspaceOptionsModel.SetWorkspaceStatus(workspaceStatusUpdateRequestModel)
				replaceWorkspaceOptionsModel.SetWorkspaceStatusMsg(workspaceStatusMessageModel)
				replaceWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceWorkspaceOptionsModel).ToNot(BeNil())
				Expect(replaceWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceOptionsModel.CatalogRef).To(Equal(catalogRefModel))
				Expect(replaceWorkspaceOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceOptionsModel.SharedData).To(Equal(sharedTargetDataModel))
				Expect(replaceWorkspaceOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(replaceWorkspaceOptionsModel.TemplateData).To(Equal([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}))
				Expect(replaceWorkspaceOptionsModel.TemplateRepo).To(Equal(templateRepoUpdateRequestModel))
				Expect(replaceWorkspaceOptionsModel.Type).To(Equal([]string{"testString"}))
				Expect(replaceWorkspaceOptionsModel.WorkspaceStatus).To(Equal(workspaceStatusUpdateRequestModel))
				Expect(replaceWorkspaceOptionsModel.WorkspaceStatusMsg).To(Equal(workspaceStatusMessageModel))
				Expect(replaceWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRunWorkspaceCommandsOptions successfully`, func() {
				// Construct an instance of the TerraformCommand model
				terraformCommandModel := new(schematicsv1.TerraformCommand)
				Expect(terraformCommandModel).ToNot(BeNil())
				terraformCommandModel.Command = core.StringPtr("testString")
				terraformCommandModel.CommandParams = core.StringPtr("testString")
				terraformCommandModel.CommandName = core.StringPtr("testString")
				terraformCommandModel.CommandDesc = core.StringPtr("testString")
				terraformCommandModel.CommandOnError = core.StringPtr("testString")
				terraformCommandModel.CommandDependsOn = core.StringPtr("testString")
				terraformCommandModel.CommandStatus = core.StringPtr("testString")
				Expect(terraformCommandModel.Command).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandParams).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandName).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandDesc).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandOnError).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandDependsOn).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandStatus).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the RunWorkspaceCommandsOptions model
				wID := "testString"
				refreshToken := "testString"
				runWorkspaceCommandsOptionsModel := schematicsService.NewRunWorkspaceCommandsOptions(wID, refreshToken)
				runWorkspaceCommandsOptionsModel.SetWID("testString")
				runWorkspaceCommandsOptionsModel.SetRefreshToken("testString")
				runWorkspaceCommandsOptionsModel.SetCommands([]schematicsv1.TerraformCommand{*terraformCommandModel})
				runWorkspaceCommandsOptionsModel.SetOperationName("testString")
				runWorkspaceCommandsOptionsModel.SetDescription("testString")
				runWorkspaceCommandsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(runWorkspaceCommandsOptionsModel).ToNot(BeNil())
				Expect(runWorkspaceCommandsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(runWorkspaceCommandsOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(runWorkspaceCommandsOptionsModel.Commands).To(Equal([]schematicsv1.TerraformCommand{*terraformCommandModel}))
				Expect(runWorkspaceCommandsOptionsModel.OperationName).To(Equal(core.StringPtr("testString")))
				Expect(runWorkspaceCommandsOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(runWorkspaceCommandsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewTemplateRepoUploadOptions successfully`, func() {
				// Construct an instance of the TemplateRepoUploadOptions model
				wID := "testString"
				tID := "testString"
				templateRepoUploadOptionsModel := schematicsService.NewTemplateRepoUploadOptions(wID, tID)
				templateRepoUploadOptionsModel.SetWID("testString")
				templateRepoUploadOptionsModel.SetTID("testString")
				templateRepoUploadOptionsModel.SetFile(CreateMockReader("This is a mock file."))
				templateRepoUploadOptionsModel.SetFileContentType("testString")
				templateRepoUploadOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(templateRepoUploadOptionsModel).ToNot(BeNil())
				Expect(templateRepoUploadOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUploadOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUploadOptionsModel.File).To(Equal(CreateMockReader("This is a mock file.")))
				Expect(templateRepoUploadOptionsModel.FileContentType).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUploadOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateActionOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				Expect(externalSourceCosBucketModel).ToNot(BeNil())
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")
				Expect(externalSourceCosBucketModel.CosBucketURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.CosBucket).To(Equal(externalSourceCosBucketModel))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematicsv1.ActionState)
				Expect(actionStateModel).ToNot(BeNil())
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				Expect(actionStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(actionStateModel.StatusJobID).To(Equal(core.StringPtr("testString")))
				Expect(actionStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematicsv1.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the UpdateActionOptions model
				actionID := "testString"
				updateActionOptionsModel := schematicsService.NewUpdateActionOptions(actionID)
				updateActionOptionsModel.SetActionID("testString")
				updateActionOptionsModel.SetName("Stop Action")
				updateActionOptionsModel.SetDescription("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				updateActionOptionsModel.SetLocation("us-south")
				updateActionOptionsModel.SetResourceGroup("testString")
				updateActionOptionsModel.SetTags([]string{"testString"})
				updateActionOptionsModel.SetUserState(userStateModel)
				updateActionOptionsModel.SetSourceReadmeURL("testString")
				updateActionOptionsModel.SetSource(externalSourceModel)
				updateActionOptionsModel.SetSourceType("local")
				updateActionOptionsModel.SetCommandParameter("testString")
				updateActionOptionsModel.SetInventory("testString")
				updateActionOptionsModel.SetCredentials([]schematicsv1.VariableData{*variableDataModel})
				updateActionOptionsModel.SetBastion(bastionResourceDefinitionModel)
				updateActionOptionsModel.SetBastionCredential(variableDataModel)
				updateActionOptionsModel.SetTargetsIni("testString")
				updateActionOptionsModel.SetInputs([]schematicsv1.VariableData{*variableDataModel})
				updateActionOptionsModel.SetOutputs([]schematicsv1.VariableData{*variableDataModel})
				updateActionOptionsModel.SetSettings([]schematicsv1.VariableData{*variableDataModel})
				updateActionOptionsModel.SetState(actionStateModel)
				updateActionOptionsModel.SetSysLock(systemLockModel)
				updateActionOptionsModel.SetXGithubToken("testString")
				updateActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateActionOptionsModel).ToNot(BeNil())
				Expect(updateActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Name).To(Equal(core.StringPtr("Stop Action")))
				Expect(updateActionOptionsModel.Description).To(Equal(core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")))
				Expect(updateActionOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(updateActionOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(updateActionOptionsModel.UserState).To(Equal(userStateModel))
				Expect(updateActionOptionsModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Source).To(Equal(externalSourceModel))
				Expect(updateActionOptionsModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(updateActionOptionsModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Credentials).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateActionOptionsModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(updateActionOptionsModel.BastionCredential).To(Equal(variableDataModel))
				Expect(updateActionOptionsModel.TargetsIni).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateActionOptionsModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateActionOptionsModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateActionOptionsModel.State).To(Equal(actionStateModel))
				Expect(updateActionOptionsModel.SysLock).To(Equal(systemLockModel))
				Expect(updateActionOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInventoryOptions successfully`, func() {
				// Construct an instance of the UpdateInventoryOptions model
				inventoryID := "testString"
				updateInventoryOptionsModel := schematicsService.NewUpdateInventoryOptions(inventoryID)
				updateInventoryOptionsModel.SetInventoryID("testString")
				updateInventoryOptionsModel.SetName("testString")
				updateInventoryOptionsModel.SetDescription("testString")
				updateInventoryOptionsModel.SetLocation("us-south")
				updateInventoryOptionsModel.SetResourceGroup("testString")
				updateInventoryOptionsModel.SetInventoriesIni("testString")
				updateInventoryOptionsModel.SetResourceQueries([]string{"testString"})
				updateInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInventoryOptionsModel).ToNot(BeNil())
				Expect(updateInventoryOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(updateInventoryOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(updateInventoryOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(updateInventoryOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(updateInventoryOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateInventoryOptionsModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(updateInventoryOptionsModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(updateInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateJobOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematicsv1.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematicsv1.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematicsv1.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCosBucket model
				externalSourceCosBucketModel := new(schematicsv1.ExternalSourceCosBucket)
				Expect(externalSourceCosBucketModel).ToNot(BeNil())
				externalSourceCosBucketModel.CosBucketURL = core.StringPtr("testString")
				Expect(externalSourceCosBucketModel.CosBucketURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.CosBucket = externalSourceCosBucketModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.CosBucket).To(Equal(externalSourceCosBucketModel))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))

				// Construct an instance of the UpdateJobOptions model
				jobID := "testString"
				refreshToken := "testString"
				updateJobOptionsModel := schematicsService.NewUpdateJobOptions(jobID, refreshToken)
				updateJobOptionsModel.SetJobID("testString")
				updateJobOptionsModel.SetRefreshToken("testString")
				updateJobOptionsModel.SetCommandObject("workspace")
				updateJobOptionsModel.SetCommandObjectID("testString")
				updateJobOptionsModel.SetCommandName("workspace_plan")
				updateJobOptionsModel.SetCommandParameter("testString")
				updateJobOptionsModel.SetCommandOptions([]string{"testString"})
				updateJobOptionsModel.SetInputs([]schematicsv1.VariableData{*variableDataModel})
				updateJobOptionsModel.SetSettings([]schematicsv1.VariableData{*variableDataModel})
				updateJobOptionsModel.SetTags([]string{"testString"})
				updateJobOptionsModel.SetLocation("us-south")
				updateJobOptionsModel.SetStatus(jobStatusModel)
				updateJobOptionsModel.SetData(jobDataModel)
				updateJobOptionsModel.SetBastion(bastionResourceDefinitionModel)
				updateJobOptionsModel.SetLogSummary(jobLogSummaryModel)
				updateJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateJobOptionsModel).ToNot(BeNil())
				Expect(updateJobOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(updateJobOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(updateJobOptionsModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(updateJobOptionsModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(updateJobOptionsModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(updateJobOptionsModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(updateJobOptionsModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(updateJobOptionsModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateJobOptionsModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateJobOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(updateJobOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(updateJobOptionsModel.Status).To(Equal(jobStatusModel))
				Expect(updateJobOptionsModel.Data).To(Equal(jobDataModel))
				Expect(updateJobOptionsModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(updateJobOptionsModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(updateJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateKmsSettingsOptions successfully`, func() {
				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematicsv1.KMSSettingsPrimaryCrk)
				Expect(kmsSettingsPrimaryCrkModel).ToNot(BeNil())
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")
				Expect(kmsSettingsPrimaryCrkModel.KmsName).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsPrimaryCrkModel.KeyCrn).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematicsv1.KMSSettingsSecondaryCrk)
				Expect(kmsSettingsSecondaryCrkModel).ToNot(BeNil())
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")
				Expect(kmsSettingsSecondaryCrkModel.KmsName).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsSecondaryCrkModel.KeyCrn).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := schematicsService.NewUpdateKmsSettingsOptions()
				updateKmsSettingsOptionsModel.SetLocation("testString")
				updateKmsSettingsOptionsModel.SetEncryptionScheme("testString")
				updateKmsSettingsOptionsModel.SetResourceGroup("testString")
				updateKmsSettingsOptionsModel.SetPrimaryCrk(kmsSettingsPrimaryCrkModel)
				updateKmsSettingsOptionsModel.SetSecondaryCrk(kmsSettingsSecondaryCrkModel)
				updateKmsSettingsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateKmsSettingsOptionsModel).ToNot(BeNil())
				Expect(updateKmsSettingsOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(updateKmsSettingsOptionsModel.EncryptionScheme).To(Equal(core.StringPtr("testString")))
				Expect(updateKmsSettingsOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateKmsSettingsOptionsModel.PrimaryCrk).To(Equal(kmsSettingsPrimaryCrkModel))
				Expect(updateKmsSettingsOptionsModel.SecondaryCrk).To(Equal(kmsSettingsSecondaryCrkModel))
				Expect(updateKmsSettingsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateWorkspaceOptions successfully`, func() {
				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				Expect(catalogRefModel).ToNot(BeNil())
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				Expect(catalogRefModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogRefModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.LaunchURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.OfferingVersion).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				Expect(sharedTargetDataModel).ToNot(BeNil())
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")
				Expect(sharedTargetDataModel.ClusterCreatedOn).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterName).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterType).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.EntitlementKeys).To(Equal([]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(sharedTargetDataModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.WorkerCount).To(Equal(core.Int64Ptr(int64(26))))
				Expect(sharedTargetDataModel.WorkerMachineType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				Expect(workspaceVariableRequestModel).ToNot(BeNil())
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")
				Expect(workspaceVariableRequestModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				Expect(templateSourceDataRequestModel).ToNot(BeNil())
				templateSourceDataRequestModel.EnvValues = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				Expect(templateSourceDataRequestModel.EnvValues).To(Equal([]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.Folder).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Compact).To(Equal(core.BoolPtr(true)))
				Expect(templateSourceDataRequestModel.InitStateFile).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.UninstallScriptName).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Values).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.ValuesMetadata).To(Equal([]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.Variablestore).To(Equal([]schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}))

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				Expect(templateRepoUpdateRequestModel).ToNot(BeNil())
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")
				Expect(templateRepoUpdateRequestModel.Branch).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.Release).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.RepoShaValue).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.RepoURL).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.URL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				Expect(workspaceStatusUpdateRequestModel).ToNot(BeNil())
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime()
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime()
				Expect(workspaceStatusUpdateRequestModel.Frozen).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusUpdateRequestModel.FrozenAt).To(Equal(CreateMockDateTime()))
				Expect(workspaceStatusUpdateRequestModel.FrozenBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusUpdateRequestModel.Locked).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusUpdateRequestModel.LockedBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusUpdateRequestModel.LockedTime).To(Equal(CreateMockDateTime()))

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				Expect(workspaceStatusMessageModel).ToNot(BeNil())
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")
				Expect(workspaceStatusMessageModel.StatusCode).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusMessageModel.StatusMsg).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateWorkspaceOptions model
				wID := "testString"
				updateWorkspaceOptionsModel := schematicsService.NewUpdateWorkspaceOptions(wID)
				updateWorkspaceOptionsModel.SetWID("testString")
				updateWorkspaceOptionsModel.SetCatalogRef(catalogRefModel)
				updateWorkspaceOptionsModel.SetDescription("testString")
				updateWorkspaceOptionsModel.SetName("testString")
				updateWorkspaceOptionsModel.SetSharedData(sharedTargetDataModel)
				updateWorkspaceOptionsModel.SetTags([]string{"testString"})
				updateWorkspaceOptionsModel.SetTemplateData([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel})
				updateWorkspaceOptionsModel.SetTemplateRepo(templateRepoUpdateRequestModel)
				updateWorkspaceOptionsModel.SetType([]string{"testString"})
				updateWorkspaceOptionsModel.SetWorkspaceStatus(workspaceStatusUpdateRequestModel)
				updateWorkspaceOptionsModel.SetWorkspaceStatusMsg(workspaceStatusMessageModel)
				updateWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateWorkspaceOptionsModel).ToNot(BeNil())
				Expect(updateWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(updateWorkspaceOptionsModel.CatalogRef).To(Equal(catalogRefModel))
				Expect(updateWorkspaceOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(updateWorkspaceOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(updateWorkspaceOptionsModel.SharedData).To(Equal(sharedTargetDataModel))
				Expect(updateWorkspaceOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(updateWorkspaceOptionsModel.TemplateData).To(Equal([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}))
				Expect(updateWorkspaceOptionsModel.TemplateRepo).To(Equal(templateRepoUpdateRequestModel))
				Expect(updateWorkspaceOptionsModel.Type).To(Equal([]string{"testString"}))
				Expect(updateWorkspaceOptionsModel.WorkspaceStatus).To(Equal(workspaceStatusUpdateRequestModel))
				Expect(updateWorkspaceOptionsModel.WorkspaceStatusMsg).To(Equal(workspaceStatusMessageModel))
				Expect(updateWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUploadTemplateTarActionOptions successfully`, func() {
				// Construct an instance of the UploadTemplateTarActionOptions model
				actionID := "testString"
				uploadTemplateTarActionOptionsModel := schematicsService.NewUploadTemplateTarActionOptions(actionID)
				uploadTemplateTarActionOptionsModel.SetActionID("testString")
				uploadTemplateTarActionOptionsModel.SetFile(CreateMockReader("This is a mock file."))
				uploadTemplateTarActionOptionsModel.SetFileContentType("testString")
				uploadTemplateTarActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(uploadTemplateTarActionOptionsModel).ToNot(BeNil())
				Expect(uploadTemplateTarActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarActionOptionsModel.File).To(Equal(CreateMockReader("This is a mock file.")))
				Expect(uploadTemplateTarActionOptionsModel.FileContentType).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate()
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime()
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := make([]byte, 0)
	ba = append(ba, mockData...)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return ioutil.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate() *strfmt.Date {
	d := strfmt.Date(time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
	return &d
}

func CreateMockDateTime() *strfmt.DateTime {
	d := strfmt.DateTime(time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
