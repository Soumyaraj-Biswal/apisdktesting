/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import { BaseService, UserOptions } from 'ibm-cloud-sdk-core';
/**
 * Manage serverless Spark instances and run applications.
 *
 * API Version: 3.0.0
 */
declare class IbmAnalyticsEngineApiV3 extends BaseService {
    static DEFAULT_SERVICE_URL: string;
    static DEFAULT_SERVICE_NAME: string;
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of IbmAnalyticsEngineApiV3 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {IbmAnalyticsEngineApiV3}
     */
    static newInstance(options: UserOptions): IbmAnalyticsEngineApiV3;
    /**
     * Construct a IbmAnalyticsEngineApiV3 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {IbmAnalyticsEngineApiV3}
     */
    constructor(options: UserOptions);
    /*************************
     * analyticsEnginesV3
     ************************/
    /**
     * Find Analytics Engine by id.
     *
     * Retrieve the details of a single Analytics Engine instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - GUID of the Analytics Engine service instance to retrieve.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.Instance>>}
     */
    getInstance(params: IbmAnalyticsEngineApiV3.GetInstanceParams): Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.Instance>>;
    /**
     * Deploy a Spark application.
     *
     * Deploys a Spark application on a given serverless Spark instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - The identifier of the instance where the Spark application is submitted.
     * @param {ApplicationRequestApplicationDetails} [params.applicationDetails] - Application details.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationResponse>>}
     */
    createApplication(params: IbmAnalyticsEngineApiV3.CreateApplicationParams): Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationResponse>>;
    /**
     * Retrieve all Spark applications.
     *
     * Gets all applications submitted in an instance with a specified inst_id.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - Identifier of the instance where the applications run.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationCollection>>}
     */
    listApplications(params: IbmAnalyticsEngineApiV3.ListApplicationsParams): Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationCollection>>;
    /**
     * Retrieve the details of a given Spark application.
     *
     * Gets the details of the given Spark application.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - Identifier of the instance to which the application belongs.
     * @param {string} params.applicationId - Identifier of the application for which details are requested.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationGetResponse>>}
     */
    getApplication(params: IbmAnalyticsEngineApiV3.GetApplicationParams): Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationGetResponse>>;
    /**
     * Stop application.
     *
     * Stops a running application identified by the app_id identifier. This is an idempotent operation. Performs no
     * action if the requested application is already stopped or completed.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - Identifier of the instance to which the application belongs.
     * @param {string} params.applicationId - Identifier of the application that needs to be stopped.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.Empty>>}
     */
    deleteApplication(params: IbmAnalyticsEngineApiV3.DeleteApplicationParams): Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.Empty>>;
    /**
     * Get the status of the application.
     *
     * Returns the status of the given Spark application.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceId - Identifier of the instance to which the applications belongs.
     * @param {string} params.applicationId - Identifier of the application for which details are requested.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationGetStateResponse>>}
     */
    getApplicationState(params: IbmAnalyticsEngineApiV3.GetApplicationStateParams): Promise<IbmAnalyticsEngineApiV3.Response<IbmAnalyticsEngineApiV3.ApplicationGetStateResponse>>;
}
/*************************
 * interfaces
 ************************/
declare namespace IbmAnalyticsEngineApiV3 {
    /** An operation response. */
    interface Response<T = any> {
        result: T;
        status: number;
        statusText: string;
        headers: IncomingHttpHeaders;
    }
    /** The callback for a service request. */
    type Callback<T> = (error: any, response?: Response<T>) => void;
    /** The body of a service request that returns no response data. */
    interface Empty {
    }
    /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
    interface JsonObject {
        [key: string]: any;
    }
    /*************************
     * request interfaces
     ************************/
    /** Parameters for the `getInstance` operation. */
    interface GetInstanceParams {
        /** GUID of the Analytics Engine service instance to retrieve. */
        instanceId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `createApplication` operation. */
    interface CreateApplicationParams {
        /** The identifier of the instance where the Spark application is submitted. */
        instanceId: string;
        /** Application details. */
        applicationDetails?: ApplicationRequestApplicationDetails;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listApplications` operation. */
    interface ListApplicationsParams {
        /** Identifier of the instance where the applications run. */
        instanceId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getApplication` operation. */
    interface GetApplicationParams {
        /** Identifier of the instance to which the application belongs. */
        instanceId: string;
        /** Identifier of the application for which details are requested. */
        applicationId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteApplication` operation. */
    interface DeleteApplicationParams {
        /** Identifier of the instance to which the application belongs. */
        instanceId: string;
        /** Identifier of the application that needs to be stopped. */
        applicationId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getApplicationState` operation. */
    interface GetApplicationStateParams {
        /** Identifier of the instance to which the applications belongs. */
        instanceId: string;
        /** Identifier of the application for which details are requested. */
        applicationId: string;
        headers?: OutgoingHttpHeaders;
    }
    /*************************
     * model interfaces
     ************************/
    /** Details of a Spark application. */
    interface Application {
        /** Identifier provided by Analytics Engine service for the Spark application. */
        id?: string;
        /** Full URL of the resource. */
        href?: string;
        /** Identifier provided by Apache Spark for the application. */
        spark_application_id?: string;
        /** Status of the application. */
        state?: string;
        /** Time when the application was started. */
        start_time?: string;
        /** Time when the application was completed. */
        finish_time?: string;
    }
    /** An array of application details. */
    interface ApplicationCollection {
        /** List of applications. */
        applications?: Application[];
    }
    /** Response of the Application Get API. */
    interface ApplicationGetResponse {
        /** Application request details. */
        application_details?: ApplicationRequest;
        /** Application ID. */
        id?: string;
        /** Application state. */
        state?: string;
        /** Application start time in the format YYYY-MM-DDTHH:mm:ssZ. */
        start_time?: string;
        /** Application end time in the format YYYY-MM-DDTHH:mm:ssZ. */
        finish_time?: string;
    }
    /** State of a given application. */
    interface ApplicationGetStateResponse {
        /** Identifier of the application. */
        id?: string;
        /** Status of the application. */
        state?: string;
        /** Time when the application was started. */
        start_time?: string;
        /** Time when the application was completed. */
        finish_time?: string;
    }
    /** Application request details. */
    interface ApplicationRequest {
        /** Application details. */
        application_details?: ApplicationRequestApplicationDetails;
    }
    /** Application details. */
    interface ApplicationRequestApplicationDetails {
        /** Path of the application to run. */
        application?: string;
        /** Entry point for a Spark application bundled as a '.jar' file. This is applicable only for Java or Scala
         *  applications.
         */
        class?: string;
        /** An array of arguments to be passed to the application. */
        arguments?: string[];
        /** Application configurations to override the value specified at instance level. See [Spark environment
         *  variables]( https://spark.apache.org/docs/latest/configuration.html#available-properties) for a list of the
         *  supported variables.
         */
        conf?: JsonObject;
        /** Application environment configurations to use. See [Spark environment
         *  variables](https://spark.apache.org/docs/latest/configuration.html#environment-variables) for a list of the
         *  supported variables.
         */
        env?: JsonObject;
    }
    /** Application response details. */
    interface ApplicationResponse {
        /** Identifier of the application that was submitted. */
        id?: string;
        /** State of the submitted application. */
        state?: string;
    }
    /** Details of Analytics Engine instance. */
    interface Instance {
        /** GUID of the Analytics Engine instance. */
        id?: string;
        /** Full URL of the resource. */
        href?: string;
        /** Instance state. */
        state?: string;
        /** Timestamp when the state of the instance was changed, in the format YYYY-MM-DDTHH:mm:ssZ. */
        state_change_time?: string;
        /** Specifies the default runtime to use for all workloads that run in this instance. */
        default_runtime?: InstanceDefaultRuntime;
        /** Object storage instance that acts as the home for custom libraries and Spark events. */
        instance_home?: InstanceHome;
        /** Instance level default configuration for Spark workloads. */
        default_config?: InstanceDefaultConfig;
    }
    /** Instance level default configuration for Spark workloads. */
    interface InstanceDefaultConfig {
        /** Value of the Spark configuration key. */
        key?: string;
    }
    /** Specifies the default runtime to use for all workloads that run in this instance. */
    interface InstanceDefaultRuntime {
        /** Version of Spark runtime to use. Currently, only 3.1 is supported. */
        spark_version?: string;
    }
    /** Object storage instance that acts as the home for custom libraries and Spark events. */
    interface InstanceHome {
        /** UUID of the instance home storage instance. */
        id?: string;
        /** Currently only ibm-cos (IBM Cloud Object Storage) is supported. */
        provider?: string;
        /** Type of the instance home storage. Currently, only objectstore (Cloud Object Storage) is supported. */
        type?: string;
        /** Region of the Cloud Object Storage instance. */
        region?: string;
        /** Endpoint to access the Cloud Object Storage instance. */
        endpoint?: string;
        /** Cloud Object Storage bucket used as instance home. */
        bucket?: string;
        /** Cloud Object Storage access key. Masked for security reasons. */
        hmac_access_key?: string;
        /** Cloud Object Storage secret key. Masked for security reasons. */
        hmac_secret_key?: string;
    }
}
export = IbmAnalyticsEngineApiV3;
