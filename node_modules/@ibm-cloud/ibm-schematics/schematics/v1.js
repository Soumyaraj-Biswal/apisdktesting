"use strict";
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 3.37.0-a85661cd-20210802-190136
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * IBM Cloud Schematics service is to provide the capability to manage resources  of cloud provider infrastructure by
 * using file based configurations.  With the IBM Cloud Schematics service you can specify the  required set of
 * resources and the configuration in `config files`,  and then pass the config files to the service to fulfill it by
 * calling the necessary actions on the infrastructure.  This principle is known as Infrastructure as Code.  For more
 * information, refer to [Getting started with IBM Cloud Schematics]
 * (https://cloud.ibm.com/docs/schematics?topic=schematics-getting-started).
 */
var SchematicsV1 = /** @class */ (function (_super) {
    __extends(SchematicsV1, _super);
    /**
     * Construct a SchematicsV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {SchematicsV1}
     */
    function SchematicsV1(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(SchematicsV1.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of SchematicsV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {SchematicsV1}
     */
    SchematicsV1.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        var service = new SchematicsV1(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * util
     ************************/
    /**
     * List supported schematics locations.
     *
     * Retrieve a list of IBM Cloud locations where you can create Schematics workspaces.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.SchematicsLocations[]>>}
     */
    SchematicsV1.prototype.listSchematicsLocation = function (params) {
        var _params = __assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'listSchematicsLocation');
        var parameters = {
            options: {
                url: '/v1/locations',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List supported schematics locations.
     *
     * Retrieve a list of IBM Cloud locations where you can work with Schematics objects.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.SchematicsLocationsList>>}
     */
    SchematicsV1.prototype.listLocations = function (params) {
        var _params = __assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'listLocations');
        var parameters = {
            options: {
                url: '/v2/locations',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List resource groups.
     *
     * Retrieve a list of IBM Cloud resource groups that your account has access to.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.ResourceGroupResponse[]>>}
     */
    SchematicsV1.prototype.listResourceGroup = function (params) {
        var _params = __assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'listResourceGroup');
        var parameters = {
            options: {
                url: '/v1/resource_groups',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get Schematics API information.
     *
     * Retrieve detailed information about the IBM Cloud Schematics API version and the version of the provider plug-ins
     * that the API uses.
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to the
     * workspace ID and the resource group. For more information, about Schematics access and permissions, see [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.VersionResponse>>}
     */
    SchematicsV1.prototype.getSchematicsVersion = function (params) {
        var _params = __assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getSchematicsVersion');
        var parameters = {
            options: {
                url: '/v1/version',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create metadata by  processing the template.
     *
     * Create a Template metadata definition.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateType - Template type (terraform, ansible, helm, cloudpak, bash script).
     * @param {ExternalSource} params.source - Source of templates, playbooks, or controls.
     * @param {string} [params.region] - Region to which request should go. Applicable only on global endpoint.
     * @param {string} [params.sourceType] - Type of source for the Template.
     * @param {string} [params.xGithubToken] - The personal access token to authenticate with your private GitHub or
     * GitLab repository and access your Terraform template.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.TemplateMetaDataResponse>>}
     */
    SchematicsV1.prototype.processTemplateMetaData = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['templateType', 'source'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'template_type': _params.templateType,
            'source': _params.source,
            'region': _params.region,
            'source_type': _params.sourceType,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'processTemplateMetaData');
        var parameters = {
            options: {
                url: '/v2/template_metadata_processor',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Github-token': _params.xGithubToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * workspaces
     ************************/
    /**
     * List workspaces.
     *
     * Retrieve a list of Schematics workspaces from your IBM Cloud account that you have access to. The list of
     * workspaces that is returned depends on the API endpoint that you use. For example, if you use an API endpoint for a
     * geography, such as North America, only workspaces that are created in `us-south` or `us-east` are returned. For
     * more information about supported API endpoints, see [API endpoints](/apidocs/schematics#api-endpoints).
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to the
     * workspace ID and the resource group. For more information, about Schematics access and permissions, see [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.offset] - The starting position of the item in the list of items. For example, if you have
     * three workspaces in your account, the first workspace is assigned position number 0, the second workspace is
     * assigned position number 1, and so forth. If you have 6 workspaces and you want to list the details for workspaces
     * 2-6, enter 1. To limit the number of workspaces that is returned, use the `limit` option in addition to the
     * `offset` option. Negative numbers are not supported and are ignored.
     * @param {number} [params.limit] - The maximum number of items that you want to list. The number must be a positive
     * integer between 1 and 2000. If no value is provided, 100 is used by default.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceResponseList>>}
     */
    SchematicsV1.prototype.listWorkspaces = function (params) {
        var _params = __assign({}, params);
        var query = {
            'offset': _params.offset,
            'limit': _params.limit,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'listWorkspaces');
        var parameters = {
            options: {
                url: '/v1/workspaces',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a workspace.
     *
     * Create an IBM Cloud Schematics workspace that points to the source repository where your Terraform template or the
     * IBM Cloud software template is stored. You can decide to create your workspace without connecting it to a GitHub or
     * GitLab repository. Your workspace is then created with a **Draft** state. To later connect your workspace to a
     * GitHub or GitLab repository, you must use the `PUT /v1/workspaces/{id}` API to update the workspace or use the
     * `/v1/workspaces/{id}/templates/{template_id}/template_repo_upload` API to upload a TAR file instead.
     *
     *  **Getting API endpoint**:-
     *
     *  * The Schematics API endpoint that you use to create the workspace determines where your Schematics actions run
     * and your data is stored. See [API endpoints](/apidocs/schematics#api-endpoints) for more information.
     *  * If you use the API endpoint for a geography and not a specific location, such as North America, you can specify
     * the location in your API request body.
     *  * If you do not specify the location in the request body, Schematics determines your workspace location based on
     * availability.
     *  * If you use an API endpoint for a specific location, such as Frankfurt, the location that you enter in your API
     * request body must match your API endpoint.
     *  * You also have the option to not specify a location in your API request body if you use a location-specific API
     * endpoint.
     *
     *  **Getting IAM access token** :-
     *  * Before you create Schematics workspace, you need to create the IAM access token for your IBM Cloud Account.
     *  * To create IAM access token, use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>` and execute `curl -X POST
     * "https://iam.cloud.ibm.com/identity/token" -H "Content-Type= application/x-www-form-urlencoded" -d
     * "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`. For more information, about
     * creating IAM access token and API Docs, see [IAM access token](/apidocs/iam-identity-token-api#gettoken-password)
     * and [Create API key](/apidocs/iam-identity-token-api#create-api-key).
     *  * You can set the environment values  `export ACCESS_TOKEN=<access_token>` and `export
     * REFRESH_TOKEN=<refresh_token>`.
     *  * You can use the obtained IAM access token in create workspace `curl` command.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform access
     *  to the workspace ID and the resource group.
     *  For more information, about Schematics access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string[]} [params.appliedShareddataIds] - List of applied shared dataset ID.
     * @param {CatalogRef} [params.catalogRef] - Information about the software template that you chose from the IBM Cloud
     * catalog. This information is returned for IBM Cloud catalog offerings only.
     * @param {string} [params.description] - The description of the workspace.
     * @param {string} [params.location] - The location where you want to create your Schematics workspace and run the
     * Schematics jobs. The location that you enter must match the API endpoint that you use. For example, if you use the
     * Frankfurt API endpoint, you must specify `eu-de` as your location. If you use an API endpoint for a geography and
     * you do not specify a location, Schematics determines the location based on availability.
     * @param {string} [params.name] - The name of your workspace. The name can be up to 128 characters long and can
     * include alphanumeric characters, spaces, dashes, and underscores. When you create a workspace for your own
     * Terraform template, consider including the microservice component that you set up with your Terraform template and
     * the IBM Cloud environment where you want to deploy your resources in your name.
     * @param {string} [params.resourceGroup] - The ID of the resource group where you want to provision the workspace.
     * @param {SharedTargetData} [params.sharedData] - Information about the Target used by the templates originating from
     * the  IBM Cloud catalog offerings. This information is not relevant for workspace created using your own Terraform
     * template.
     * @param {string[]} [params.tags] - A list of tags that are associated with the workspace.
     * @param {TemplateSourceDataRequest[]} [params.templateData] - Input data for the Template.
     * @param {string} [params.templateRef] - Workspace template ref.
     * @param {TemplateRepoRequest} [params.templateRepo] - Input variables for the Template repoository, while creating a
     * workspace.
     * @param {string[]} [params.type] - List of Workspace type.
     * @param {WorkspaceStatusRequest} [params.workspaceStatus] - WorkspaceStatusRequest -.
     * @param {string} [params.xGithubToken] - The personal access token to authenticate with your private GitHub or
     * GitLab repository and access your Terraform template.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceResponse>>}
     */
    SchematicsV1.prototype.createWorkspace = function (params) {
        var _params = __assign({}, params);
        var body = {
            'applied_shareddata_ids': _params.appliedShareddataIds,
            'catalog_ref': _params.catalogRef,
            'description': _params.description,
            'location': _params.location,
            'name': _params.name,
            'resource_group': _params.resourceGroup,
            'shared_data': _params.sharedData,
            'tags': _params.tags,
            'template_data': _params.templateData,
            'template_ref': _params.templateRef,
            'template_repo': _params.templateRepo,
            'type': _params.type,
            'workspace_status': _params.workspaceStatus,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'createWorkspace');
        var parameters = {
            options: {
                url: '/v1/workspaces',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Github-token': _params.xGithubToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get workspace details.
     *
     * Retrieve detailed information for a workspace in your IBM Cloud account.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform
     *  access to the workspace ID and the resource group. For more information,
     *  about Schematics access and permissions, see [Schematics service access
     *  roles and required permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceResponse>>}
     */
    SchematicsV1.prototype.getWorkspace = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspace');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update workspace.
     *
     * Use this API to update or replace the entire workspace, including the Terraform template (`template_repo`) or IBM
     * Cloud catalog software template (`catalog_ref`) that your workspace points to.
     *
     *  **Tip**:- If you want to update workspace metadata, use the `PATCH /v1/workspaces/{id}` API.
     *  To update workspace variables, use the `PUT /v1/workspaces/{id}/template_data/{template_id}/values` API.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or
     *  platform access to the workspace ID and the resource group.
     *  For more information, about Schematics access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {CatalogRef} [params.catalogRef] - Information about the software template that you chose from the IBM Cloud
     * catalog. This information is returned for IBM Cloud catalog offerings only.
     * @param {string} [params.description] - The description of the workspace.
     * @param {string} [params.name] - The name of the workspace.
     * @param {SharedTargetData} [params.sharedData] - Information about the Target used by the templates originating from
     * the  IBM Cloud catalog offerings. This information is not relevant for workspace created using your own Terraform
     * template.
     * @param {string[]} [params.tags] - A list of tags that you want to associate with your workspace.
     * @param {TemplateSourceDataRequest[]} [params.templateData] - Input data for the Template.
     * @param {TemplateRepoUpdateRequest} [params.templateRepo] - Input to update the template repository data.
     * @param {string[]} [params.type] - List of Workspace type.
     * @param {WorkspaceStatusUpdateRequest} [params.workspaceStatus] - Input to update the workspace status.
     * @param {WorkspaceStatusMessage} [params.workspaceStatusMsg] - Information about the last job that ran against the
     * workspace. -.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceResponse>>}
     */
    SchematicsV1.prototype.replaceWorkspace = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'catalog_ref': _params.catalogRef,
            'description': _params.description,
            'name': _params.name,
            'shared_data': _params.sharedData,
            'tags': _params.tags,
            'template_data': _params.templateData,
            'template_repo': _params.templateRepo,
            'type': _params.type,
            'workspace_status': _params.workspaceStatus,
            'workspace_status_msg': _params.workspaceStatusMsg,
        };
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceWorkspace');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a workspace.
     *
     * Deletes a workspace from IBM Cloud Schematics. Deleting a workspace does not automatically remove the IBM Cloud
     * resources that the workspace manages. To remove all resources that are associated with the workspace, use the
     * `DELETE /v1/workspaces/{id}?destroy_resources=true` API.
     *
     *  **Note**: If you delete a workspace without deleting the resources,
     *  you must manage your resources with the resource dashboard or CLI afterwards.
     *  You cannot use IBM Cloud Schematics anymore to manage your resources.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform access
     *  to the workspace ID and the resource group.
     *  For more information, about Schematics access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.refreshToken - The IAM refresh token for the user or service identity. The IAM refresh token
     * is required only if you want to destroy the Terraform resources before deleting the Schematics workspace. If you
     * want to delete the workspace only and keep all your Terraform resources, refresh token is not required.
     *
     *   **Retrieving refresh token**:
     *   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
     * "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
     * "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
     *   * For more information, about creating IAM access token and API Docs, refer, [IAM access
     * token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
     * key](/apidocs/iam-identity-token-api#create-api-key).
     *
     *   **Limitation**:
     *   * If the token is expired, you can use `refresh token` to get a new IAM access token.
     *   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
     *   * When the IAM access token is about to expire, use the API key to create a new access token.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} [params.destroyResources] - If set to `true`, refresh_token header configuration is required to
     * delete all the Terraform resources, and the Schematics workspace. If set to `false`, you can remove only the
     * workspace. Your Terraform resources are still available and must be managed with the resource dashboard or CLI.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<string>>}
     */
    SchematicsV1.prototype.deleteWorkspace = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['refreshToken', 'wId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'destroy_resources': _params.destroyResources,
        };
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteWorkspace');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'refresh_token': _params.refreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update workspace metadata.
     *
     * Use this API to update the following workspace metadata:
     *
     *  * Workspace name (`name`) - **Note**: Updating the workspace name does not update the ID of the workspace.
     *  * Workspace description (`description`)
     *  * Tags (`tags[]`)
     *  * Resource group (`resource_group`)
     *  * Workspace status (`workspace_status.frozen`)
     *
     *
     *  **Tip**: If you want to update information about the Terraform template
     *  or IBM Cloud catalog software template that your workspace points to,
     *  use the `PUT /v1/workspaces/{id}` API. To update workspace variables,
     *  use the `PUT /v1/workspaces/{id}/template_data/{template_id}/values` API.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or
     *  platform access to the workspace ID and the resource group.
     *  For more information, about Schematics access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {CatalogRef} [params.catalogRef] - Information about the software template that you chose from the IBM Cloud
     * catalog. This information is returned for IBM Cloud catalog offerings only.
     * @param {string} [params.description] - The description of the workspace.
     * @param {string} [params.name] - The name of the workspace.
     * @param {SharedTargetData} [params.sharedData] - Information about the Target used by the templates originating from
     * the  IBM Cloud catalog offerings. This information is not relevant for workspace created using your own Terraform
     * template.
     * @param {string[]} [params.tags] - A list of tags that you want to associate with your workspace.
     * @param {TemplateSourceDataRequest[]} [params.templateData] - Input data for the Template.
     * @param {TemplateRepoUpdateRequest} [params.templateRepo] - Input to update the template repository data.
     * @param {string[]} [params.type] - List of Workspace type.
     * @param {WorkspaceStatusUpdateRequest} [params.workspaceStatus] - Input to update the workspace status.
     * @param {WorkspaceStatusMessage} [params.workspaceStatusMsg] - Information about the last job that ran against the
     * workspace. -.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceResponse>>}
     */
    SchematicsV1.prototype.updateWorkspace = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'catalog_ref': _params.catalogRef,
            'description': _params.description,
            'name': _params.name,
            'shared_data': _params.sharedData,
            'tags': _params.tags,
            'template_data': _params.templateData,
            'template_repo': _params.templateRepo,
            'type': _params.type,
            'workspace_status': _params.workspaceStatus,
            'workspace_status_msg': _params.workspaceStatusMsg,
        };
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'updateWorkspace');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Show workspace template readme.
     *
     * Retrieve the `README.md` file of the Terraform of IBM Cloud catalog template that your workspace points to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} [params.ref] - The GitHub or GitLab branch where the `README.md` file is stored,  or the commit ID
     * or tag that references the `README.md` file that you want to retrieve.  If you do not specify this option, the
     * `README.md` file is retrieved from the master branch by default.
     * @param {string} [params.formatted] - The format of the readme file.  Value ''markdown'' will give markdown,
     * otherwise html.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.TemplateReadme>>}
     */
    SchematicsV1.prototype.getWorkspaceReadme = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'ref': _params.ref,
            'formatted': _params.formatted,
        };
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspaceReadme');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/templates/readme',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Upload a TAR file to your workspace.
     *
     * Provide your Terraform template by uploading a TAR file from your local machine. Before you use this API, you must
     * create a workspace without a link to a GitHub or GitLab repository with the `POST /v1/workspaces` API.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform access to the workspace ID and the
     * resource group. For more information, about Schematics access and permissions, see [Schematics service access roles
     * and required permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace where you want to upload your `.tar` file. To find the
     * workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} params.tId - The ID of the Terraform template in your workspace. When you create a workspace, a
     * unique ID is assigned to your Terraform template, even if no template was provided during workspace creation. To
     * find this ID, use the `GET /v1/workspaces` API and review the `template_data.id` value.
     * @param {NodeJS.ReadableStream | Buffer} [params.file] - Template tar file.
     * @param {string} [params.fileContentType] - The content type of file.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.TemplateRepoTarUploadResponse>>}
     */
    SchematicsV1.prototype.templateRepoUpload = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'tId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'file': {
                data: _params.file,
                contentType: _params.fileContentType,
            },
        };
        var path = {
            'w_id': _params.wId,
            't_id': _params.tId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'templateRepoUpload');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/template_data/{t_id}/template_repo_upload',
                method: 'PUT',
                path: path,
                formData: formData,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List workspace input variables.
     *
     * Retrieve a list of input variables that are declared in your Terraform or IBM Cloud catalog template.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or
     *  platform access to the workspace ID and the resource group.
     *  For more information, about Schematics access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} params.tId - The ID of the Terraform template in your workspace.  When you create a workspace, the
     * Terraform template that  your workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up
     * the workspace IDs  and template IDs or `template_data.id` in your IBM Cloud account.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.TemplateValues>>}
     */
    SchematicsV1.prototype.getWorkspaceInputs = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'tId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
            't_id': _params.tId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspaceInputs');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/template_data/{t_id}/values',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Replace workspace input variables.
     *
     * Replace or Update the input variables for the template that your workspace points to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} params.tId - The ID of the Terraform template in your workspace.  When you create a workspace, the
     * Terraform template that  your workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up
     * the workspace IDs  and template IDs or `template_data.id` in your IBM Cloud account.
     * @param {JsonObject[]} [params.envValues] - A list of environment variables that you want to apply during the
     * execution of a bash script or Terraform job. This field must be provided as a list of key-value pairs, for example,
     * **TF_LOG=debug**. Each entry will be a map with one entry where `key is the environment variable name and value is
     * value`. You can define environment variables for IBM Cloud catalog offerings that are provisioned by using a bash
     * script. See [example to use special environment
     * variable](https://cloud.ibm.com/docs/schematics?topic=schematics-set-parallelism#parallelism-example)  that are
     * supported by Schematics.
     * @param {string} [params.values] - User values.
     * @param {WorkspaceVariableRequest[]} [params.variablestore] - VariablesRequest -.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.UserValues>>}
     */
    SchematicsV1.prototype.replaceWorkspaceInputs = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'tId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'env_values': _params.envValues,
            'values': _params.values,
            'variablestore': _params.variablestore,
        };
        var path = {
            'w_id': _params.wId,
            't_id': _params.tId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceWorkspaceInputs');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/template_data/{t_id}/values',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get workspace template details.
     *
     * Retrieve detailed information about the Terraform template that your workspace points to.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform
     *  access to the workspace ID and the resource group.
     *  For more information, about Schematics access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace for which you want to retrieve input parameters and  values.
     * To find the workspace ID, use the `GET /workspaces` API.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceTemplateValuesResponse>>}
     */
    SchematicsV1.prototype.getAllWorkspaceInputs = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getAllWorkspaceInputs');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/templates/values',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List workspace variable metadata.
     *
     * Retrieve the metadata for all the workspace input variables that are declared in the template that your workspace
     * points to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace for which you want to retrieve the metadata of the input
     * variables that are declared in the template. To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} params.tId - The ID of the Terraform template for which you want to retrieve the metadata of your
     * input variables. When you create a workspace, the Terraform template that your workspace points to is assigned a
     * unique ID. To find this ID, use the `GET /v1/workspaces` API and review the `template_data.id` value.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.JsonObject[]>>}
     */
    SchematicsV1.prototype.getWorkspaceInputMetadata = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'tId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
            't_id': _params.tId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspaceInputMetadata');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/template_data/{t_id}/values_metadata',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List workspace output values.
     *
     * Retrieve a list of Terraform output variables. You define output values in your Terraform template to include
     * information that you want to make accessible for other Terraform templates.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace for which you want to retrieve output parameters and  values.
     * To find the workspace ID, use the `GET /workspaces` API.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.OutputValuesInner[]>>}
     */
    SchematicsV1.prototype.getWorkspaceOutputs = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspaceOutputs');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/output_values',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List workspace resources.
     *
     * Retrieve a list of IBM Cloud resources that you created with your workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.TemplateResources[]>>}
     */
    SchematicsV1.prototype.getWorkspaceResources = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspaceResources');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/resources',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get Terraform statefile URL.
     *
     * Retrieve the URL to the Terraform statefile (`terraform.tfstate`). You use the URL to access the Terraform
     * statefile. The Terraform statefile includes detailed information about the IBM Cloud resources that you provisioned
     * with IBM Cloud Schematics and Schematics uses the file to determine future create, modify, or delete actions for
     * your resources. To show the content of the Terraform statefile, use the `GET
     * /v1/workspaces/{id}/runtime_data/{template_id}/state_store` API.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform access
     *  to the workspace ID and the resource group.
     *  For more information, about Schematics access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace for which you want to retrieve the Terraform statefile.  To
     * find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.StateStoreResponseList>>}
     */
    SchematicsV1.prototype.getWorkspaceState = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspaceState');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/state_stores',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Show Terraform statefile content.
     *
     * Show the content of the Terraform statefile (`terraform.tfstate`) that was created when your Terraform template was
     * applied in IBM Cloud. The statefile holds detailed information about the IBM Cloud resources that were created by
     * IBM Cloud Schematics and Schematics uses the file to determine future create, modify, or delete actions for your
     * resources.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace for which you want to retrieve the Terraform statefile.  To
     * find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} params.tId - The ID of the Terraform template for which you want to retrieve the Terraform
     * statefile.  When you create a workspace, the Terraform template that your workspace points to is assigned a unique
     * ID.  To find this ID, use the `GET /v1/workspaces` API and review the template_data.id value.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.JsonObject[]>>}
     */
    SchematicsV1.prototype.getWorkspaceTemplateState = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'tId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
            't_id': _params.tId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspaceTemplateState');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/runtime_data/{t_id}/state_store',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get workspace job log URL.
     *
     * Get the Terraform log file URL for a workspace job. You can retrieve the log URL for jobs that were created with
     * the `PUT /v1/workspaces/{id}/apply`, `POST /v1/workspaces/{id}/plan`, or `DELETE /v1/workspaces/{id}/destroy` API.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform access
     *  to the workspace ID and the resource group.
     *  For more information, about Schematics access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace for which you want to retrieve the Terraform statefile.  To
     * find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} params.activityId - The ID of the activity or job, for which you want to retrieve details.  To find
     * the job ID, use the `GET /v1/workspaces/{id}/actions` API.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceActivityLogs>>}
     */
    SchematicsV1.prototype.getWorkspaceActivityLogs = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'activityId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
            'activity_id': _params.activityId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspaceActivityLogs');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/actions/{activity_id}/logs',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get latest workspace job log URL for all workspace templates.
     *
     * Retrieve the log file URL for the latest job of a template that ran against your workspace. You use this URL to
     * retrieve detailed logs for the latest job.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.LogStoreResponseList>>}
     */
    SchematicsV1.prototype.getWorkspaceLogUrls = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspaceLogUrls');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/log_stores',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Show logs for the latest action for a workspace template.
     *
     * Show the Terraform logs for the most recent job of a template that ran against your workspace.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform access to the workspace ID and the
     * resource group. For more information, about Schematics access and permissions, see [Schematics service access roles
     * and required permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} params.tId - The ID of the Terraform template or IBM Cloud catalog software template in the
     * workspace.  Use the `GET /v1/workspaces` to look up the workspace IDs and template IDs or `template_data.id`.
     * @param {boolean} [params.logTfCmd] - Enter false to replace the first line in each Terraform command section, such
     * as Terraform INIT or Terraform PLAN, with Schematics INIT (Schematics PLAN) in your log output.  In addition, the
     * log lines Starting command: terraform init -input=false -no-color and Starting command: terraform apply
     * -state=terraform.tfstate -var-file=schematics.tfvars -auto-approve -no-color are suppressed.  All subsequent
     * command lines still use the Terraform command prefix. To remove this prefix, use the log_tf_prefix option.
     * @param {boolean} [params.logTfPrefix] - `false` will hide all the terraform command prefix in the log statements.
     * @param {boolean} [params.logTfNullResource] - `false` will hide all the null resource prefix in the log statements.
     * @param {boolean} [params.logTfAnsible] - `true` will format all logs to withhold the original format  of ansible
     * output in the log statements.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<string>>}
     */
    SchematicsV1.prototype.getTemplateLogs = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'tId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'log_tf_cmd': _params.logTfCmd,
            'log_tf_prefix': _params.logTfPrefix,
            'log_tf_null_resource': _params.logTfNullResource,
            'log_tf_ansible': _params.logTfAnsible,
        };
        var path = {
            'w_id': _params.wId,
            't_id': _params.tId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getTemplateLogs');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/runtime_data/{t_id}/log_store',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Show logs for a workspace job.
     *
     * Show the Terraform logs for an job that ran against your workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} params.tId - The ID of the Terraform template or IBM Cloud catalog software template in the
     * workspace.  Use the `GET /v1/workspaces` to look up the workspace IDs and template IDs or `template_data.id`.
     * @param {string} params.activityId - The ID of the activity or job, for which you want to retrieve details.  To find
     * the job ID, use the `GET /v1/workspaces/{id}/actions` API.
     * @param {boolean} [params.logTfCmd] - Enter false to replace the first line in each Terraform command section, such
     * as Terraform INIT or Terraform PLAN, with Schematics INIT (Schematics PLAN) in your log output.  In addition, the
     * log lines Starting command: terraform init -input=false -no-color and Starting command: terraform apply
     * -state=terraform.tfstate -var-file=schematics.tfvars -auto-approve -no-color are suppressed.  All subsequent
     * command lines still use the Terraform command prefix. To remove this prefix, use the log_tf_prefix option.
     * @param {boolean} [params.logTfPrefix] - `false` will hide all the terraform command prefix in the log statements.
     * @param {boolean} [params.logTfNullResource] - `false` will hide all the null resource prefix in the log statements.
     * @param {boolean} [params.logTfAnsible] - `true` will format all logs to withhold the original format  of ansible
     * output in the log statements.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<string>>}
     */
    SchematicsV1.prototype.getTemplateActivityLog = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'tId', 'activityId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'log_tf_cmd': _params.logTfCmd,
            'log_tf_prefix': _params.logTfPrefix,
            'log_tf_null_resource': _params.logTfNullResource,
            'log_tf_ansible': _params.logTfAnsible,
        };
        var path = {
            'w_id': _params.wId,
            't_id': _params.tId,
            'activity_id': _params.activityId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getTemplateActivityLog');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/runtime_data/{t_id}/log_store/actions/{activity_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * actions
     ************************/
    /**
     * List actions.
     *
     * Retrieve a list of all Schematics actions that depends on the API endpoint that you have access. For example, if
     * you use an API endpoint for a geography, such as North America, only actions that are created in `us-south` or
     * `us-east` are retrieved.
     *
     *  For more information, about supported API endpoints, see
     * [API endpoints](/apidocs/schematics#api-endpoints).
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or
     *  platform access to an action ID and the resource group.
     *  For more information, about Schematics access and permissions, see
     *  [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.offset] - The starting position of the item in the list of items. For example, if you have
     * three workspaces in your account, the first workspace is assigned position number 0, the second workspace is
     * assigned position number 1, and so forth. If you have 6 workspaces and you want to list the details for workspaces
     * 2-6, enter 1. To limit the number of workspaces that is returned, use the `limit` option in addition to the
     * `offset` option. Negative numbers are not supported and are ignored.
     * @param {number} [params.limit] - The maximum number of items that you want to list. The number must be a positive
     * integer between 1 and 2000. If no value is provided, 100 is used by default.
     * @param {string} [params.sort] - Name of the field to sort-by;  Use the '.' character to delineate sub-resources and
     * sub-fields (eg. owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending'
     * (default is ascending)   Ignore unrecognized or unsupported sort field.
     * @param {string} [params.profile] - Level of details returned by the get method.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.ActionList>>}
     */
    SchematicsV1.prototype.listActions = function (params) {
        var _params = __assign({}, params);
        var query = {
            'offset': _params.offset,
            'limit': _params.limit,
            'sort': _params.sort,
            'profile': _params.profile,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'listActions');
        var parameters = {
            options: {
                url: '/v2/actions',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create an action.
     *
     * Create an IBM Cloud Schematics action to run on a single target or groups of target hosts, roles, policies, or
     * steps to deploy your resources in the target hosts. You can run the IBM Cloud resources the order in which you want
     * to execute them. **Note** If your Git repository already contains a host file. Schematics does not overwrite the
     * host file already present in your Git repository. For sample templates, see IBM Cloud Automation
     * [templates](https://github.com/Cloud-Schematics).
     *
     *  For more information, about the Schematics create action,
     *  see [ibmcloud schematics action
     * create](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-create-action).
     *  **Note** you cannot update the location and region once an action is created.
     *  Also, make sure your IP addresses are in the
     * [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or
     *  platform access to an action ID and the resource group.
     *  For more information, about Schematics access and permissions, see
     *  [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.name] - The unique name of your action. The name can be up to 128 characters long and can
     * include alphanumeric characters, spaces, dashes, and underscores. **Example** you can use the name to stop action.
     * @param {string} [params.description] - Action description.
     * @param {string} [params.location] - List of locations supported by IBM Cloud Schematics service.  While creating
     * your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the
     * location of the IBM Cloud resources, provisioned using Schematics.
     * @param {string} [params.resourceGroup] - Resource-group name for an action.  By default, action is created in
     * default resource group.
     * @param {string[]} [params.tags] - Action tags.
     * @param {UserState} [params.userState] - User defined status of the Schematics object.
     * @param {string} [params.sourceReadmeUrl] - URL of the `README` file, for the source URL.
     * @param {ExternalSource} [params.source] - Source of templates, playbooks, or controls.
     * @param {string} [params.sourceType] - Type of source for the Template.
     * @param {string} [params.commandParameter] - Schematics job command parameter (playbook-name).
     * @param {string} [params.inventory] - Target inventory record ID, used by the action or ansible playbook.
     * @param {VariableData[]} [params.credentials] - credentials of the Action.
     * @param {BastionResourceDefinition} [params.bastion] - Describes a bastion resource.
     * @param {VariableData} [params.bastionCredential] - User editable variable data & system generated reference to
     * value.
     * @param {string} [params.targetsIni] - Inventory of host and host group for the playbook in `INI` file format. For
     * example, `"targets_ini": "[webserverhost]
     *  172.22.192.6
     *  [dbhost]
     *  172.22.192.5"`. For more information, about an inventory host group syntax, see [Inventory host
     * groups](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-inventory-host-grps).
     * @param {VariableData[]} [params.inputs] - Input variables for the Action.
     * @param {VariableData[]} [params.outputs] - Output variables for the Action.
     * @param {VariableData[]} [params.settings] - Environment variables for the Action.
     * @param {ActionState} [params.state] - Computed state of the Action.
     * @param {SystemLock} [params.sysLock] - System lock status.
     * @param {string} [params.xGithubToken] - The personal access token to authenticate with your private GitHub or
     * GitLab repository and access your Terraform template.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.Action>>}
     */
    SchematicsV1.prototype.createAction = function (params) {
        var _params = __assign({}, params);
        var body = {
            'name': _params.name,
            'description': _params.description,
            'location': _params.location,
            'resource_group': _params.resourceGroup,
            'tags': _params.tags,
            'user_state': _params.userState,
            'source_readme_url': _params.sourceReadmeUrl,
            'source': _params.source,
            'source_type': _params.sourceType,
            'command_parameter': _params.commandParameter,
            'inventory': _params.inventory,
            'credentials': _params.credentials,
            'bastion': _params.bastion,
            'bastion_credential': _params.bastionCredential,
            'targets_ini': _params.targetsIni,
            'inputs': _params.inputs,
            'outputs': _params.outputs,
            'settings': _params.settings,
            'state': _params.state,
            'sys_lock': _params.sysLock,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'createAction');
        var parameters = {
            options: {
                url: '/v2/actions',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Github-token': _params.xGithubToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get action details.
     *
     * Retrieve the detailed information of an actions from your IBM Cloud account.  This API returns a URL to the log
     * file that you can retrieve by using  the `GET /v2/actions/{action_id}/logs` API.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or
     *  platform access to an action ID and the resource group.
     *  For more information, about Schematics access and permissions, see
     *  [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.actionId - Action Id.  Use GET /actions API to look up the Action Ids in your IBM Cloud
     * account.
     * @param {string} [params.profile] - Level of details returned by the get method.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.Action>>}
     */
    SchematicsV1.prototype.getAction = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['actionId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'profile': _params.profile,
        };
        var path = {
            'action_id': _params.actionId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getAction');
        var parameters = {
            options: {
                url: '/v2/actions/{action_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete an action.
     *
     * Delete a Schematics action and specify the Ansible playbook that you want to run against your IBM Cloud resources.
     * **Note** you cannot delete or stop the job activity from an ongoing execution of an action defined in the playbook.
     * You can repeat the execution of same job, whenever you patch the actions. For more information, about the
     * Schematics action state, see  [Schematics action state
     * diagram](https://cloud.ibm.com/docs/schematics?topic=schematics-action-setup#action-state-diagram).
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or
     *  platform access to an action ID and the resource group.
     *  For more information, about Schematics access and permissions, see
     *  [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.actionId - Action Id.  Use GET /actions API to look up the Action Ids in your IBM Cloud
     * account.
     * @param {boolean} [params.force] - Equivalent to -force options in the command line.
     * @param {boolean} [params.propagate] - Auto propagate the chaange or deletion to the dependent resources.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.Empty>>}
     */
    SchematicsV1.prototype.deleteAction = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['actionId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'action_id': _params.actionId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteAction');
        var parameters = {
            options: {
                url: '/v2/actions/{action_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'force': _params.force,
                    'propagate': _params.propagate,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update an action.
     *
     * Update or replace an action to change the action state from the critical state to normal state, or pending state to
     * the normal state for a successful execution.  For more information, about the Schematics action state, see
     * [Schematics action state
     * diagram](https://cloud.ibm.com/docs/schematics?topic=schematics-action-setup#action-state-diagram).
     *
     *  **Note** you cannot update the location and region once an action is created.
     *  Also, make sure your IP addresses are in the
     * [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses].
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or
     *  platform access to an action ID and the resource group.
     *  For more information, about Schematics access and permissions, see
     *  [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.actionId - Action Id.  Use GET /actions API to look up the Action Ids in your IBM Cloud
     * account.
     * @param {string} [params.name] - The unique name of your action. The name can be up to 128 characters long and can
     * include alphanumeric characters, spaces, dashes, and underscores. **Example** you can use the name to stop action.
     * @param {string} [params.description] - Action description.
     * @param {string} [params.location] - List of locations supported by IBM Cloud Schematics service.  While creating
     * your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the
     * location of the IBM Cloud resources, provisioned using Schematics.
     * @param {string} [params.resourceGroup] - Resource-group name for an action.  By default, action is created in
     * default resource group.
     * @param {string[]} [params.tags] - Action tags.
     * @param {UserState} [params.userState] - User defined status of the Schematics object.
     * @param {string} [params.sourceReadmeUrl] - URL of the `README` file, for the source URL.
     * @param {ExternalSource} [params.source] - Source of templates, playbooks, or controls.
     * @param {string} [params.sourceType] - Type of source for the Template.
     * @param {string} [params.commandParameter] - Schematics job command parameter (playbook-name).
     * @param {string} [params.inventory] - Target inventory record ID, used by the action or ansible playbook.
     * @param {VariableData[]} [params.credentials] - credentials of the Action.
     * @param {BastionResourceDefinition} [params.bastion] - Describes a bastion resource.
     * @param {VariableData} [params.bastionCredential] - User editable variable data & system generated reference to
     * value.
     * @param {string} [params.targetsIni] - Inventory of host and host group for the playbook in `INI` file format. For
     * example, `"targets_ini": "[webserverhost]
     *  172.22.192.6
     *  [dbhost]
     *  172.22.192.5"`. For more information, about an inventory host group syntax, see [Inventory host
     * groups](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-inventory-host-grps).
     * @param {VariableData[]} [params.inputs] - Input variables for the Action.
     * @param {VariableData[]} [params.outputs] - Output variables for the Action.
     * @param {VariableData[]} [params.settings] - Environment variables for the Action.
     * @param {ActionState} [params.state] - Computed state of the Action.
     * @param {SystemLock} [params.sysLock] - System lock status.
     * @param {string} [params.xGithubToken] - The personal access token to authenticate with your private GitHub or
     * GitLab repository and access your Terraform template.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.Action>>}
     */
    SchematicsV1.prototype.updateAction = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['actionId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
            'description': _params.description,
            'location': _params.location,
            'resource_group': _params.resourceGroup,
            'tags': _params.tags,
            'user_state': _params.userState,
            'source_readme_url': _params.sourceReadmeUrl,
            'source': _params.source,
            'source_type': _params.sourceType,
            'command_parameter': _params.commandParameter,
            'inventory': _params.inventory,
            'credentials': _params.credentials,
            'bastion': _params.bastion,
            'bastion_credential': _params.bastionCredential,
            'targets_ini': _params.targetsIni,
            'inputs': _params.inputs,
            'outputs': _params.outputs,
            'settings': _params.settings,
            'state': _params.state,
            'sys_lock': _params.sysLock,
        };
        var path = {
            'action_id': _params.actionId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'updateAction');
        var parameters = {
            options: {
                url: '/v2/actions/{action_id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Github-token': _params.xGithubToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Upload a TAR file to an action.
     *
     * Update your template by uploading tape archive file (.tar) file from  your local machine. Before you use this API,
     * you must create an action  without a link to a GitHub or GitLab repository with the `POST /v2/actions` API.
     *
     * <h3>Authorization</h3>
     *   Schematics support generic authorization such as service access or  platform access to an action ID and the
     * resource group.  For more information, about Schematics access and permissions, see  [Schematics service access
     * roles and required permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.actionId - Action Id.  Use GET /actions API to look up the Action Ids in your IBM Cloud
     * account.
     * @param {NodeJS.ReadableStream | Buffer} [params.file] - Template tar file.
     * @param {string} [params.fileContentType] - The content type of file.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.TemplateRepoTarUploadResponse>>}
     */
    SchematicsV1.prototype.uploadTemplateTarAction = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['actionId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'file': {
                data: _params.file,
                contentType: _params.fileContentType,
            },
        };
        var path = {
            'action_id': _params.actionId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'uploadTemplateTarAction');
        var parameters = {
            options: {
                url: '/v2/actions/{action_id}/template_repo_upload',
                method: 'PUT',
                path: path,
                formData: formData,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * jobs
     ************************/
    /**
     * List all workspace jobs.
     *
     * Retrieve a list of all jobs that ran against a workspace. Jobs are generated when you use the `apply`, `plan`,
     * `destroy`, and `refresh`,   command API.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {number} [params.offset] - The starting position of the item in the list of items. For example, if you have
     * three workspaces in your account, the first workspace is assigned position number 0, the second workspace is
     * assigned position number 1, and so forth. If you have 6 workspaces and you want to list the details for workspaces
     * 2-6, enter 1. To limit the number of workspaces that is returned, use the `limit` option in addition to the
     * `offset` option. Negative numbers are not supported and are ignored.
     * @param {number} [params.limit] - The maximum number of items that you want to list. The number must be a positive
     * integer between 1 and 2000. If no value is provided, 100 is used by default.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceActivities>>}
     */
    SchematicsV1.prototype.listWorkspaceActivities = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'offset': _params.offset,
            'limit': _params.limit,
        };
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'listWorkspaceActivities');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/actions',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get workspace job details.
     *
     * Get the details for a workspace job that ran against the workspace. This API returns the job status and a URL to
     * the log file that you can  retrieve by using the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} params.activityId - The ID of the activity or job, for which you want to retrieve details.  To find
     * the job ID, use the `GET /v1/workspaces/{id}/actions` API.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceActivity>>}
     */
    SchematicsV1.prototype.getWorkspaceActivity = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'activityId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
            'activity_id': _params.activityId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspaceActivity');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/actions/{activity_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Stop the workspace job.
     *
     * Stop an ongoing schematics job that runs against your workspace.
     * **Note**: If you remove the Schematics apply job that runs against your workspace,  any changes to your IBM Cloud
     * resources that are already applied are not reverted.  If a creation, update, or deletion is currently in progress,
     * Schematics waits for  the job to be completed first. Then, any other resource creations, updates, or  deletions
     * that are included in your Terraform template file are ignored.
     * <h3>Authorization</h3>  Schematics supports generic authorization such as service access or platform access  to the
     * workspace ID and the resource group. For more information, about Schematics  access and permissions, see
     * [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} params.activityId - The ID of the activity or job, for which you want to retrieve details.  To find
     * the job ID, use the `GET /v1/workspaces/{id}/actions` API.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceActivityApplyResult>>}
     */
    SchematicsV1.prototype.deleteWorkspaceActivity = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'activityId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
            'activity_id': _params.activityId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteWorkspaceActivity');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/actions/{activity_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Run Terraform Commands.
     *
     * Run Terraform state commands to modify the workspace state file, by using the IBM Cloud Schematics API.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform access
     *  to the workspace ID and the resource group. For more information, about Schematics
     *  access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
     * @param {string} params.refreshToken - The IAM refresh token for the user or service identity.
     *
     *   **Retrieving refresh token**:
     *   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
     * "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
     * "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
     *   * For more information, about creating IAM access token and API Docs, refer, [IAM access
     * token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
     * key](/apidocs/iam-identity-token-api#create-api-key).
     *
     *   **Limitation**:
     *   * If the token is expired, you can use `refresh token` to get a new IAM access token.
     *   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
     *   * When the IAM access token is about to expire, use the API key to create a new access token.
     * @param {TerraformCommand[]} [params.commands] - List of commands.  You can execute single set of commands or
     * multiple commands.  For more information, about the payload of the multiple commands,  refer to
     * [Commands](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#commands).
     * @param {string} [params.operationName] - Command name.
     * @param {string} [params.description] - Command description.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceActivityCommandResult>>}
     */
    SchematicsV1.prototype.runWorkspaceCommands = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'refreshToken'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'commands': _params.commands,
            'operation_name': _params.operationName,
            'description': _params.description,
        };
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'runWorkspaceCommands');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/commands',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'refresh_token': _params.refreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Perform a Schematics `apply` job.
     *
     * Run a Schematics `apply` job against your workspace. An `apply` job provisions, modifies, or removes the IBM Cloud
     * resources that you described in the Terraform template that your workspace points to. Depending on the type and
     * number of resources that you want to provision or modify, this process might take a few minutes, or even up to
     * hours to complete. During this time, you cannot make changes to your workspace. After all updates are applied, the
     * state of the files is [persisted](https://cloud.ibm.com/docs/schematics?topic=schematics-persist-files) to
     * determine what resources exist in your IBM Cloud account.
     *
     *
     *  **Important**: Your workspace must be in an `Inactive`, `Active`, `Failed`, or
     *  `Stopped` state to perform a Schematics `apply` job. After all updates are applied,
     *  the state of the files is [persisted](https://cloud.ibm.com/docs/schematics?topic=schematics-persist-files)
     *  to determine what resources exist in your IBM Cloud account.
     *
     *
     *  **Note**: This API returns an activity or job ID that you use to retrieve the
     *  log URL with the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
     *
     *
     *  **Important:** Applying a template might incur costs. Make sure to review
     *  the pricing information for the resources that you specified in your
     *  templates before you apply the template in IBM Cloud.
     *  To find a summary of job that Schematics is about to perform,
     *  create a Terraform execution plan with the `POST /v1/workspaces/{id}/plan` API.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or
     *  platform access to the workspace ID and the resource group.
     *  For more information, about Schematics access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace for which you want to run a Schematics `apply` job.  To find
     * the workspace ID, use the `GET /workspaces` API.
     * @param {string} params.refreshToken - The IAM refresh token for the user or service identity.
     *
     *   **Retrieving refresh token**:
     *   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
     * "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
     * "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
     *   * For more information, about creating IAM access token and API Docs, refer, [IAM access
     * token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
     * key](/apidocs/iam-identity-token-api#create-api-key).
     *
     *   **Limitation**:
     *   * If the token is expired, you can use `refresh token` to get a new IAM access token.
     *   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
     *   * When the IAM access token is about to expire, use the API key to create a new access token.
     * @param {WorkspaceActivityOptionsTemplate} [params.actionOptions] - Workspace job options template.
     * @param {string} [params.delegatedToken] - The IAM delegated token for your IBM Cloud account.  This token is
     * required for requests that are sent via the UI only.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceActivityApplyResult>>}
     */
    SchematicsV1.prototype.applyWorkspaceCommand = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'refreshToken'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'action_options': _params.actionOptions,
        };
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'applyWorkspaceCommand');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/apply',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'refresh_token': _params.refreshToken,
                    'delegated_token': _params.delegatedToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Perform a Schematics `destroy` job.
     *
     * Run a Schematics `destroy` job against your workspace. A `destroy` job removes all IBM Cloud resources that are
     * associated with your workspace. Removing your resources does not delete the Schematics workspace. To delete the
     * workspace, use the `DELETE /v1/workspaces/{id}` API. This API returns an activity or job ID that you use to
     * retrieve the URL to the log file with the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
     *
     *
     *  **Important**: Your workspace must be in an `Active`, `Failed`, or `Stopped` state to perform a Schematics
     * `destroy` job.
     *
     *
     *  **Note**: Deleting IBM Cloud resources cannot be undone. Make sure that you back up any required data before you
     * remove your resources.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform access
     *   to the workspace ID and the resource group.
     *   For more information, about Schematics access and permissions,
     *   see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace for which you want to perform a Schematics `destroy` job.  To
     * find the workspace ID, use the `GET /workspaces` API.
     * @param {string} params.refreshToken - The IAM refresh token for the user or service identity.
     *
     *   **Retrieving refresh token**:
     *   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
     * "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
     * "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
     *   * For more information, about creating IAM access token and API Docs, refer, [IAM access
     * token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
     * key](/apidocs/iam-identity-token-api#create-api-key).
     *
     *   **Limitation**:
     *   * If the token is expired, you can use `refresh token` to get a new IAM access token.
     *   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
     *   * When the IAM access token is about to expire, use the API key to create a new access token.
     * @param {WorkspaceActivityOptionsTemplate} [params.actionOptions] - Workspace job options template.
     * @param {string} [params.delegatedToken] - The IAM delegated token for your IBM Cloud account.  This token is
     * required for requests that are sent via the UI only.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceActivityDestroyResult>>}
     */
    SchematicsV1.prototype.destroyWorkspaceCommand = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'refreshToken'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'action_options': _params.actionOptions,
        };
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'destroyWorkspaceCommand');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/destroy',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'refresh_token': _params.refreshToken,
                    'delegated_token': _params.delegatedToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Perform a Schematics `plan` job.
     *
     * Run a Schematics `plan` job against your workspace. The `plan` job creates a summary of IBM Cloud resources that
     * must be created, modified, or deleted to achieve the state that is described in the Terraform or IBM Cloud catalog
     * template that your workspace points to. During this time, you cannot make changes to your workspace. You can use
     * the summary to verify your changes before you apply the template in IBM Cloud.
     *
     *
     *  **Important**: Your workspace must be in an `Inactive`, `Active`, `Failed`, or `Stopped` state to perform a
     * Schematics `plan` job.
     *
     *
     *  **Note**: This API returns an activity or job ID that you use to retrieve the URL to the log file with the `GET
     * /v1/workspaces/{id}/actions/{action_id}/logs` API.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform access
     *  to the workspace ID and the resource group.
     *  For more information, about Schematics access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace, for which you want to run a Schematics `plan` job.  To find
     * the ID of your workspace, use the `GET /v1/workspaces` API.
     * @param {string} params.refreshToken - The IAM refresh token for the user or service identity.
     *
     *   **Retrieving refresh token**:
     *   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
     * "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
     * "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
     *   * For more information, about creating IAM access token and API Docs, refer, [IAM access
     * token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
     * key](/apidocs/iam-identity-token-api#create-api-key).
     *
     *   **Limitation**:
     *   * If the token is expired, you can use `refresh token` to get a new IAM access token.
     *   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
     *   * When the IAM access token is about to expire, use the API key to create a new access token.
     * @param {string} [params.delegatedToken] - The IAM delegated token for your IBM Cloud account.  This token is
     * required for requests that are sent via the UI only.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceActivityPlanResult>>}
     */
    SchematicsV1.prototype.planWorkspaceCommand = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'refreshToken'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'planWorkspaceCommand');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/plan',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'refresh_token': _params.refreshToken,
                    'delegated_token': _params.delegatedToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Perform a Schematics `refresh` job.
     *
     * Run a Schematics `refresh` job against your workspace. A `refresh` job validates the IBM Cloud resources in your
     * account against the state that is stored in the Terraform statefile of your workspace. If differences are found,
     * the Terraform statefile is updated accordingly. This API returns an activity or job ID that you use to retrieve the
     * URL to the log file with the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
     *
     *  <h3>Authorization</h3>
     *
     *  Schematics support generic authorization such as service access or platform access
     *  to the workspace ID and the resource group.
     *  For more information, about Schematics access and permissions,
     *  see [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wId - The ID of the workspace, for which you want to run a Schematics `refresh` job.  To
     * find the ID of your workspace, use the `GET /v1/workspaces` API.
     * @param {string} params.refreshToken - The IAM refresh token for the user or service identity.
     *
     *   **Retrieving refresh token**:
     *   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
     * "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
     * "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
     *   * For more information, about creating IAM access token and API Docs, refer, [IAM access
     * token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
     * key](/apidocs/iam-identity-token-api#create-api-key).
     *
     *   **Limitation**:
     *   * If the token is expired, you can use `refresh token` to get a new IAM access token.
     *   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
     *   * When the IAM access token is about to expire, use the API key to create a new access token.
     * @param {string} [params.delegatedToken] - The IAM delegated token for your IBM Cloud account.  This token is
     * required for requests that are sent via the UI only.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceActivityRefreshResult>>}
     */
    SchematicsV1.prototype.refreshWorkspaceCommand = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wId', 'refreshToken'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'w_id': _params.wId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'refreshWorkspaceCommand');
        var parameters = {
            options: {
                url: '/v1/workspaces/{w_id}/refresh',
                method: 'PUT',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'refresh_token': _params.refreshToken,
                    'delegated_token': _params.delegatedToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List jobs.
     *
     * Retrieve a list of all Schematics jobs.  The job displays a list of jobs with the status as `pending`,
     * `in_progess`,  `success`, or `failed`. Jobs are generated when you use the  `POST /v2/jobs`, `PUT
     * /v2/jobs/{job_id}`, or `DELETE /v2/jobs/{job_id}`.
     *
     *  <h3>Authorization</h3>
     *  Schematics support generic authorization such as service access or
     *  platform access to the job ID and the resource group.
     *  For more information, about Schematics access and permissions, see
     *  [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.offset] - The starting position of the item in the list of items. For example, if you have
     * three workspaces in your account, the first workspace is assigned position number 0, the second workspace is
     * assigned position number 1, and so forth. If you have 6 workspaces and you want to list the details for workspaces
     * 2-6, enter 1. To limit the number of workspaces that is returned, use the `limit` option in addition to the
     * `offset` option. Negative numbers are not supported and are ignored.
     * @param {number} [params.limit] - The maximum number of items that you want to list. The number must be a positive
     * integer between 1 and 2000. If no value is provided, 100 is used by default.
     * @param {string} [params.sort] - Name of the field to sort-by;  Use the '.' character to delineate sub-resources and
     * sub-fields (eg. owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending'
     * (default is ascending)   Ignore unrecognized or unsupported sort field.
     * @param {string} [params.profile] - Level of details returned by the get method.
     * @param {string} [params.resource] - Name of the resource (workspace, actions or controls).
     * @param {string} [params.resourceId] - The Resource Id. It could be an Action-id or Workspace-id.
     * @param {string} [params.actionId] - Action Id.
     * @param {string} [params.list] - list jobs.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.JobList>>}
     */
    SchematicsV1.prototype.listJobs = function (params) {
        var _params = __assign({}, params);
        var query = {
            'offset': _params.offset,
            'limit': _params.limit,
            'sort': _params.sort,
            'profile': _params.profile,
            'resource': _params.resource,
            'resource_id': _params.resourceId,
            'action_id': _params.actionId,
            'list': _params.list,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'listJobs');
        var parameters = {
            options: {
                url: '/v2/jobs',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a job.
     *
     * Create & launch the Schematics job. It can be used to launch an Ansible playbook against a target hosts.  The job
     * displays a list of jobs with the status as `pending`, `in_progess`, `success`, or `failed`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.refreshToken - The IAM refresh token for the user or service identity.
     *
     *   **Retrieving refresh token**:
     *   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
     * "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
     * "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
     *   * For more information, about creating IAM access token and API Docs, refer, [IAM access
     * token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
     * key](/apidocs/iam-identity-token-api#create-api-key).
     *
     *   **Limitation**:
     *   * If the token is expired, you can use `refresh token` to get a new IAM access token.
     *   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
     *   * When the IAM access token is about to expire, use the API key to create a new access token.
     * @param {string} [params.commandObject] - Name of the Schematics automation resource.
     * @param {string} [params.commandObjectId] - Job command object id (workspace-id, action-id).
     * @param {string} [params.commandName] - Schematics job command name.
     * @param {string} [params.commandParameter] - Schematics job command parameter (playbook-name).
     * @param {string[]} [params.commandOptions] - Command line options for the command.
     * @param {VariableData[]} [params.inputs] - Job inputs used by Action or Workspace.
     * @param {VariableData[]} [params.settings] - Environment variables used by the Job while performing Action or
     * Workspace.
     * @param {string[]} [params.tags] - User defined tags, while running the job.
     * @param {string} [params.location] - List of locations supported by IBM Cloud Schematics service.  While creating
     * your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the
     * location of the IBM Cloud resources, provisioned using Schematics.
     * @param {JobStatus} [params.status] - Job Status.
     * @param {JobData} [params.data] - Job data.
     * @param {BastionResourceDefinition} [params.bastion] - Describes a bastion resource.
     * @param {JobLogSummary} [params.logSummary] - Job log summary record.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.Job>>}
     */
    SchematicsV1.prototype.createJob = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['refreshToken'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'command_object': _params.commandObject,
            'command_object_id': _params.commandObjectId,
            'command_name': _params.commandName,
            'command_parameter': _params.commandParameter,
            'command_options': _params.commandOptions,
            'inputs': _params.inputs,
            'settings': _params.settings,
            'tags': _params.tags,
            'location': _params.location,
            'status': _params.status,
            'data': _params.data,
            'bastion': _params.bastion,
            'log_summary': _params.logSummary,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'createJob');
        var parameters = {
            options: {
                url: '/v2/jobs',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'refresh_token': _params.refreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a job.
     *
     * Retrieve the detailed information of Job
     *
     *  <h3>Authorization</h3>
     *  Schematics support generic authorization such as service access or
     *  platform access to the job ID and the resource group.
     *  For more information, about Schematics access and permissions, see
     *  [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.jobId - Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
     * @param {string} [params.profile] - Level of details returned by the get method.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.Job>>}
     */
    SchematicsV1.prototype.getJob = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['jobId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'profile': _params.profile,
        };
        var path = {
            'job_id': _params.jobId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getJob');
        var parameters = {
            options: {
                url: '/v2/jobs/{job_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a job.
     *
     * Creates a copy of the Schematics job and relaunches an existing job  by updating the information of an existing
     * Schematics job.
     *
     *  <h3>Authorization</h3>
     *  Schematics support generic authorization such as service access or
     *  platform access to the job ID and the resource group.
     *  For more information, about Schematics access and permissions, see
     *  [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.jobId - Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
     * @param {string} params.refreshToken - The IAM refresh token for the user or service identity.
     *
     *   **Retrieving refresh token**:
     *   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
     * "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
     * "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
     *   * For more information, about creating IAM access token and API Docs, refer, [IAM access
     * token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
     * key](/apidocs/iam-identity-token-api#create-api-key).
     *
     *   **Limitation**:
     *   * If the token is expired, you can use `refresh token` to get a new IAM access token.
     *   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
     *   * When the IAM access token is about to expire, use the API key to create a new access token.
     * @param {string} [params.commandObject] - Name of the Schematics automation resource.
     * @param {string} [params.commandObjectId] - Job command object id (workspace-id, action-id).
     * @param {string} [params.commandName] - Schematics job command name.
     * @param {string} [params.commandParameter] - Schematics job command parameter (playbook-name).
     * @param {string[]} [params.commandOptions] - Command line options for the command.
     * @param {VariableData[]} [params.inputs] - Job inputs used by Action or Workspace.
     * @param {VariableData[]} [params.settings] - Environment variables used by the Job while performing Action or
     * Workspace.
     * @param {string[]} [params.tags] - User defined tags, while running the job.
     * @param {string} [params.location] - List of locations supported by IBM Cloud Schematics service.  While creating
     * your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the
     * location of the IBM Cloud resources, provisioned using Schematics.
     * @param {JobStatus} [params.status] - Job Status.
     * @param {JobData} [params.data] - Job data.
     * @param {BastionResourceDefinition} [params.bastion] - Describes a bastion resource.
     * @param {JobLogSummary} [params.logSummary] - Job log summary record.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.Job>>}
     */
    SchematicsV1.prototype.updateJob = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['jobId', 'refreshToken'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'command_object': _params.commandObject,
            'command_object_id': _params.commandObjectId,
            'command_name': _params.commandName,
            'command_parameter': _params.commandParameter,
            'command_options': _params.commandOptions,
            'inputs': _params.inputs,
            'settings': _params.settings,
            'tags': _params.tags,
            'location': _params.location,
            'status': _params.status,
            'data': _params.data,
            'bastion': _params.bastion,
            'log_summary': _params.logSummary,
        };
        var path = {
            'job_id': _params.jobId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'updateJob');
        var parameters = {
            options: {
                url: '/v2/jobs/{job_id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'refresh_token': _params.refreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Stop the running Job, and delete the Job.
     *
     * Stop the running Job, and delete the Job.  **Note** You cannot delete or stop the job activity from an ongoing
     * execution of an action defined in the playbook.  You can repeat the execution of same job, whenever you patch or
     * update the action or workspace.
     *
     *  <h3>Authorization</h3>
     *  Schematics support generic authorization such as service access or
     *  platform access to the job ID and the resource group.
     *  For more information, about Schematics access and permissions, see
     *  [Schematics service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.jobId - Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
     * @param {string} params.refreshToken - The IAM refresh token for the user or service identity.
     *
     *   **Retrieving refresh token**:
     *   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
     * "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
     * "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
     *   * For more information, about creating IAM access token and API Docs, refer, [IAM access
     * token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
     * key](/apidocs/iam-identity-token-api#create-api-key).
     *
     *   **Limitation**:
     *   * If the token is expired, you can use `refresh token` to get a new IAM access token.
     *   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
     *   * When the IAM access token is about to expire, use the API key to create a new access token.
     * @param {boolean} [params.force] - Equivalent to -force options in the command line.
     * @param {boolean} [params.propagate] - Auto propagate the chaange or deletion to the dependent resources.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.Empty>>}
     */
    SchematicsV1.prototype.deleteJob = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['jobId', 'refreshToken'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'job_id': _params.jobId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteJob');
        var parameters = {
            options: {
                url: '/v2/jobs/{job_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'refresh_token': _params.refreshToken,
                    'force': _params.force,
                    'propagate': _params.propagate,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get job logs.
     *
     * Retrieve the job logs
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or  platform access to the
     * action ID and the resource group.  For more information, about Schematics access and permissions, see  [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.jobId - Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.JobLog>>}
     */
    SchematicsV1.prototype.listJobLogs = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['jobId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'job_id': _params.jobId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'listJobLogs');
        var parameters = {
            options: {
                url: '/v2/jobs/{job_id}/logs',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * bulkJobs
     ************************/
    /**
     * Delete multiple workspaces.
     *
     * Delete multiple workspaces.  Use ?destroy_resource="true" to destroy the related cloud resources,  otherwise the
     * resources must be managed outside of Schematics.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.refreshToken - The IAM refresh token for the user or service identity.
     *
     *   **Retrieving refresh token**:
     *   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
     * "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
     * "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
     *   * For more information, about creating IAM access token and API Docs, refer, [IAM access
     * token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
     * key](/apidocs/iam-identity-token-api#create-api-key).
     *
     *   **Limitation**:
     *   * If the token is expired, you can use `refresh token` to get a new IAM access token.
     *   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
     *   * When the IAM access token is about to expire, use the API key to create a new access token.
     * @param {boolean} [params.newDeleteWorkspaces] - True to delete workspace.
     * @param {boolean} [params.newDestroyResources] - True to destroy the resources managed by this workspace.
     * @param {string} [params.newJob] - Workspace deletion job name.
     * @param {string} [params.newVersion] - Version of the terraform template.
     * @param {string[]} [params.newWorkspaces] - List of workspaces to be deleted.
     * @param {string} [params.destroyResources] - If set to `true`, refresh_token header configuration is required to
     * delete all the Terraform resources, and the Schematics workspace. If set to `false`, you can remove only the
     * workspace. Your Terraform resources are still available and must be managed with the resource dashboard or CLI.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceBulkDeleteResponse>>}
     */
    SchematicsV1.prototype.createWorkspaceDeletionJob = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['refreshToken'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'delete_workspaces': _params.newDeleteWorkspaces,
            'destroy_resources': _params.newDestroyResources,
            'job': _params.newJob,
            'version': _params.newVersion,
            'workspaces': _params.newWorkspaces,
        };
        var query = {
            'destroy_resources': _params.destroyResources,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'createWorkspaceDeletionJob');
        var parameters = {
            options: {
                url: '/v1/workspace_jobs',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'refresh_token': _params.refreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get the workspace deletion job status.
     *
     * Get the workspace deletion job status.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.wjId - The workspace job ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.WorkspaceJobResponse>>}
     */
    SchematicsV1.prototype.getWorkspaceDeletionJobStatus = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['wjId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'wj_id': _params.wjId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspaceDeletionJobStatus');
        var parameters = {
            options: {
                url: '/v1/workspace_jobs/{wj_id}/status',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * inventory
     ************************/
    /**
     * List all inventory definitions.
     *
     * Retrieve a list of all Schematics inventories that depends on the API endpoint that you have access. For example,
     * if you use an API endpoint for a geography, such as North America, only inventories that are created in `us-south`
     * or `us-east` are retrieved. For more information, about supported API endpoints, see
     * [APIendpoints](/apidocs/schematics#api-endpoints).
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to an
     * action ID and the resource group. For more information, about Schematics access and permissions, see  [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.offset] - The starting position of the item in the list of items. For example, if you have
     * three workspaces in your account, the first workspace is assigned position number 0, the second workspace is
     * assigned position number 1, and so forth. If you have 6 workspaces and you want to list the details for workspaces
     * 2-6, enter 1. To limit the number of workspaces that is returned, use the `limit` option in addition to the
     * `offset` option. Negative numbers are not supported and are ignored.
     * @param {number} [params.limit] - The maximum number of items that you want to list. The number must be a positive
     * integer between 1 and 2000. If no value is provided, 100 is used by default.
     * @param {string} [params.sort] - Name of the field to sort-by;  Use the '.' character to delineate sub-resources and
     * sub-fields (eg. owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending'
     * (default is ascending)   Ignore unrecognized or unsupported sort field.
     * @param {string} [params.profile] - Level of details returned by the get method.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.InventoryResourceRecordList>>}
     */
    SchematicsV1.prototype.listInventories = function (params) {
        var _params = __assign({}, params);
        var query = {
            'offset': _params.offset,
            'limit': _params.limit,
            'sort': _params.sort,
            'profile': _params.profile,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'listInventories');
        var parameters = {
            options: {
                url: '/v2/inventories',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create an inventory definition.
     *
     * Create an IBM Cloud Schematics inventory as a single IBM Cloud resource where you want to run Ansible playbook by
     * using Schematics actions. For more information, about inventory host groups, refer to [creating static and dynamic
     * inventory for Schematics actions](https://cloud.ibm.com/docs/schematics?topic=schematics-inventories-setup).
     * **Note** you cannot update the location and region, resource group once an action is created.  Also, make sure your
     * IP addresses are in the [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
     * If your Git repository already contains a host file. Schematics does not  overwrite the host file already present
     * in your Git repository.
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to an
     * action ID and the resource group. For more information, about Schematics access and permissions, see  [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.name] - The unique name of your Inventory definition. The name can be up to 128 characters
     * long and can include alphanumeric characters, spaces, dashes, and underscores.
     * @param {string} [params.description] - The description of your Inventory definition. The description can be up to
     * 2048 characters long in size.
     * @param {string} [params.location] - List of locations supported by IBM Cloud Schematics service.  While creating
     * your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the
     * location of the IBM Cloud resources, provisioned using Schematics.
     * @param {string} [params.resourceGroup] - Resource-group name for the Inventory definition.   By default, Inventory
     * definition will be created in Default Resource Group.
     * @param {string} [params.inventoriesIni] - Input inventory of host and host group for the playbook, in the `.ini`
     * file format.
     * @param {string[]} [params.resourceQueries] - Input resource query definitions that is used to dynamically generate
     * the inventory of host and host group for the playbook.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.InventoryResourceRecord>>}
     */
    SchematicsV1.prototype.createInventory = function (params) {
        var _params = __assign({}, params);
        var body = {
            'name': _params.name,
            'description': _params.description,
            'location': _params.location,
            'resource_group': _params.resourceGroup,
            'inventories_ini': _params.inventoriesIni,
            'resource_queries': _params.resourceQueries,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'createInventory');
        var parameters = {
            options: {
                url: '/v2/inventories',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get the inventory definition.
     *
     * Use this API to retrieve the detailed information for a resource inventory definition used to target an action in
     * your IBM Cloud account. For more information, about inventory get, refer to [ibmcloud schematics inventory
     * get](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-get-inv).
     *  **Note** you can fetch only the location and region, resource group from where your inventory is created.
     *  Also, make sure your IP addresses are in the
     * [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
     *
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to an
     * action ID and the resource group. For more information, about Schematics access and permissions, see [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.inventoryId - Resource Inventory Id.  Use `GET /v2/inventories` API to look up the Resource
     * Inventory definition Ids  in your IBM Cloud account.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.InventoryResourceRecord>>}
     */
    SchematicsV1.prototype.getInventory = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['inventoryId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'inventory_id': _params.inventoryId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getInventory');
        var parameters = {
            options: {
                url: '/v2/inventories/{inventory_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Replace an inventory definition.
     *
     * Use this API to update the inventory definition resource used to target an action. For more information, about
     * inventory update, refer to [ibmcloud schematics inventory
     * update](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-update-inv).
     *  **Note** you cannot update the location and region, resource group once an action is created.
     *  Also, make sure your IP addresses are in the
     * [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
     *
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to an
     * action ID and the resource group. For more information, about Schematics access and permissions, see  [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.inventoryId - Resource Inventory Id.  Use `GET /v2/inventories` API to look up the Resource
     * Inventory definition Ids  in your IBM Cloud account.
     * @param {string} [params.name] - The unique name of your Inventory definition. The name can be up to 128 characters
     * long and can include alphanumeric characters, spaces, dashes, and underscores.
     * @param {string} [params.description] - The description of your Inventory definition. The description can be up to
     * 2048 characters long in size.
     * @param {string} [params.location] - List of locations supported by IBM Cloud Schematics service.  While creating
     * your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the
     * location of the IBM Cloud resources, provisioned using Schematics.
     * @param {string} [params.resourceGroup] - Resource-group name for the Inventory definition.   By default, Inventory
     * definition will be created in Default Resource Group.
     * @param {string} [params.inventoriesIni] - Input inventory of host and host group for the playbook, in the `.ini`
     * file format.
     * @param {string[]} [params.resourceQueries] - Input resource query definitions that is used to dynamically generate
     * the inventory of host and host group for the playbook.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.InventoryResourceRecord>>}
     */
    SchematicsV1.prototype.replaceInventory = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['inventoryId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
            'description': _params.description,
            'location': _params.location,
            'resource_group': _params.resourceGroup,
            'inventories_ini': _params.inventoriesIni,
            'resource_queries': _params.resourceQueries,
        };
        var path = {
            'inventory_id': _params.inventoryId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceInventory');
        var parameters = {
            options: {
                url: '/v2/inventories/{inventory_id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete inventory definition.
     *
     * Use this API to delete the resource inventory definition by using the inventory ID that you want to run against.
     * For more information, about inventory delete, refer to [ibmcloud schematics inventory
     * delete](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-delete-inventory).
     *  **Note** you cannot delete the location and region, resource group from where your inventory is created.
     *  Also, make sure your IP addresses are in the
     * [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
     *
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to an
     * action ID and the resource group. For more information, about Schematics access and permissions, see  [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.inventoryId - Resource Inventory Id.  Use `GET /v2/inventories` API to look up the Resource
     * Inventory definition Ids  in your IBM Cloud account.
     * @param {boolean} [params.force] - Equivalent to -force options in the command line.
     * @param {boolean} [params.propagate] - Auto propagate the chaange or deletion to the dependent resources.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.Empty>>}
     */
    SchematicsV1.prototype.deleteInventory = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['inventoryId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'inventory_id': _params.inventoryId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteInventory');
        var parameters = {
            options: {
                url: '/v2/inventories/{inventory_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'force': _params.force,
                    'propagate': _params.propagate,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update the inventory definition.
     *
     * Update the resource inventory definition.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.inventoryId - Resource Inventory Id.  Use `GET /v2/inventories` API to look up the Resource
     * Inventory definition Ids  in your IBM Cloud account.
     * @param {string} [params.name] - The unique name of your Inventory definition. The name can be up to 128 characters
     * long and can include alphanumeric characters, spaces, dashes, and underscores.
     * @param {string} [params.description] - The description of your Inventory definition. The description can be up to
     * 2048 characters long in size.
     * @param {string} [params.location] - List of locations supported by IBM Cloud Schematics service.  While creating
     * your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the
     * location of the IBM Cloud resources, provisioned using Schematics.
     * @param {string} [params.resourceGroup] - Resource-group name for the Inventory definition.   By default, Inventory
     * definition will be created in Default Resource Group.
     * @param {string} [params.inventoriesIni] - Input inventory of host and host group for the playbook, in the `.ini`
     * file format.
     * @param {string[]} [params.resourceQueries] - Input resource query definitions that is used to dynamically generate
     * the inventory of host and host group for the playbook.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.InventoryResourceRecord>>}
     */
    SchematicsV1.prototype.updateInventory = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['inventoryId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
            'description': _params.description,
            'location': _params.location,
            'resource_group': _params.resourceGroup,
            'inventories_ini': _params.inventoriesIni,
            'resource_queries': _params.resourceQueries,
        };
        var path = {
            'inventory_id': _params.inventoryId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'updateInventory');
        var parameters = {
            options: {
                url: '/v2/inventories/{inventory_id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * resourceQuery
     ************************/
    /**
     * List resource queries.
     *
     * Retrieve the list of resource query definitions that you have access to.  The list of resource queries that is
     * returned depends on the API  endpoint that you use. For example, if you use an API endpoint for a geography, such
     * as North America, only resource query definitions that are created in `us-south` or `us-east` are retrieved. For
     * more information, about supported API endpoints, see [API endpoints](/apidocs/schematics#api-endpoints).
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to an
     * action ID and the resource group. For more information, about Schematics access and permissions,  see [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.offset] - The starting position of the item in the list of items. For example, if you have
     * three workspaces in your account, the first workspace is assigned position number 0, the second workspace is
     * assigned position number 1, and so forth. If you have 6 workspaces and you want to list the details for workspaces
     * 2-6, enter 1. To limit the number of workspaces that is returned, use the `limit` option in addition to the
     * `offset` option. Negative numbers are not supported and are ignored.
     * @param {number} [params.limit] - The maximum number of items that you want to list. The number must be a positive
     * integer between 1 and 2000. If no value is provided, 100 is used by default.
     * @param {string} [params.sort] - Name of the field to sort-by;  Use the '.' character to delineate sub-resources and
     * sub-fields (eg. owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending'
     * (default is ascending)   Ignore unrecognized or unsupported sort field.
     * @param {string} [params.profile] - Level of details returned by the get method.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.ResourceQueryRecordList>>}
     */
    SchematicsV1.prototype.listResourceQuery = function (params) {
        var _params = __assign({}, params);
        var query = {
            'offset': _params.offset,
            'limit': _params.limit,
            'sort': _params.sort,
            'profile': _params.profile,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'listResourceQuery');
        var parameters = {
            options: {
                url: '/v2/resources_query',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create resource query.
     *
     * Use this API to create a resource query definition that will be used to select an IBM Cloud resource or a group of
     * resources as the dynamic inventory for the Schematics Actions.  For more information, about resource query
     * commands, refer to  [ibmcloud schematics resource query
     * create](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-create-rq).
     * **Note** you cannot update the location and region, resource group  once an action is created. Also, make sure your
     * IP addresses are  in the [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
     * If your Git repository already contains a host file.  Schematics does not overwrite the host file already present
     * in your Git repository.
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to an
     * action ID and the resource group. For more information, about Schematics access and permissions,  see [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.type] - Resource type (cluster, vsi, icd, vpc).
     * @param {string} [params.name] - Resource query name.
     * @param {ResourceQuery[]} [params.queries] -
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.ResourceQueryRecord>>}
     */
    SchematicsV1.prototype.createResourceQuery = function (params) {
        var _params = __assign({}, params);
        var body = {
            'type': _params.type,
            'name': _params.name,
            'queries': _params.queries,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'createResourceQuery');
        var parameters = {
            options: {
                url: '/v2/resources_query',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get resources query.
     *
     * Use this API to retrieve the information resource query by Id.  For more information, about resource query
     * commands, refer to  [ibmcloud schematics resource query
     * get](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-get-rq).
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to an
     * action ID and the resource group. For more information, about Schematics access and permissions,  see [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.queryId - Resource query Id.  Use `GET /v2/resource_query` API to look up the Resource query
     * definition Ids  in your IBM Cloud account.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.ResourceQueryRecord>>}
     */
    SchematicsV1.prototype.getResourcesQuery = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['queryId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'query_id': _params.queryId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getResourcesQuery');
        var parameters = {
            options: {
                url: '/v2/resources_query/{query_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Replace resources query definition.
     *
     * Use this API to replace the resource query definition used to build  the dynamic inventory for the Schematics
     * Action.  For more information, about resource query commands, refer to [ibmcloud schematics resource query
     * update](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-update-rq).
     * **Note** you cannot update the location and region, resource group  once a resource query is created. Also, make
     * sure your IP addresses  are in the
     * [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to an
     * action ID and the resource group. For more information, about Schematics access and permissions,  see [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.queryId - Resource query Id.  Use `GET /v2/resource_query` API to look up the Resource query
     * definition Ids  in your IBM Cloud account.
     * @param {string} [params.type] - Resource type (cluster, vsi, icd, vpc).
     * @param {string} [params.name] - Resource query name.
     * @param {ResourceQuery[]} [params.queries] -
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.ResourceQueryRecord>>}
     */
    SchematicsV1.prototype.replaceResourcesQuery = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['queryId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'type': _params.type,
            'name': _params.name,
            'queries': _params.queries,
        };
        var path = {
            'query_id': _params.queryId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceResourcesQuery');
        var parameters = {
            options: {
                url: '/v2/resources_query/{query_id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Run the resource query.
     *
     * Run the resource query.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.queryId - Resource query Id.  Use `GET /v2/resource_query` API to look up the Resource query
     * definition Ids  in your IBM Cloud account.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.ResourceQueryResponseRecord>>}
     */
    SchematicsV1.prototype.executeResourceQuery = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['queryId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'query_id': _params.queryId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'executeResourceQuery');
        var parameters = {
            options: {
                url: '/v2/resources_query/{query_id}',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete resources query.
     *
     * Use this API to delete the resource query definition by Id.  For more information, about resource query commands,
     * refer to  [ibmcloud schematics resource query
     * delete](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-delete-resource-query).
     *
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to an
     * action ID and the resource group. For more information, about Schematics access and permissions,  see [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.queryId - Resource query Id.  Use `GET /v2/resource_query` API to look up the Resource query
     * definition Ids  in your IBM Cloud account.
     * @param {boolean} [params.force] - Equivalent to -force options in the command line.
     * @param {boolean} [params.propagate] - Auto propagate the chaange or deletion to the dependent resources.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.Empty>>}
     */
    SchematicsV1.prototype.deleteResourcesQuery = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['queryId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'query_id': _params.queryId,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteResourcesQuery');
        var parameters = {
            options: {
                url: '/v2/resources_query/{query_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'force': _params.force,
                    'propagate': _params.propagate,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * settingsKms
     ************************/
    /**
     * Get KMS settings.
     *
     * Retrieve the KMS on the API endpoint that you have access. For example, if you use an API endpoint for a geography,
     * such as North America, only Schematics resource that are created in `us-south` or `us-east` are retrieved.
     * <h3>Authorization</h3>
     *
     *
     *  Schematics support generic authorization such as service access or platform access to the action ID and the
     * resource group. For more information, about Schematics access and permissions, see [Schematics service access roles
     * and required permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.location - The location of the Resource.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.KMSSettings>>}
     */
    SchematicsV1.prototype.getKmsSettings = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['location'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'location': _params.location,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'getKmsSettings');
        var parameters = {
            options: {
                url: '/v2/settings/kms',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Replace KMS settings.
     *
     * Replace or Update the KMS setting for your location, by using your private endpoint, `CRN`, primary `CRK`, and
     * secondary `CRK`. **Note** you can update the KMS settings only once. For example, if you use an API endpoint for a
     * geography, such as North America, only Schematics resource that are created in `us-south` or `us-east` are
     * retrieved.
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to the
     * action ID and the resource group. For more information, about Schematics access and permissions, see  [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.location] - Location.
     * @param {string} [params.encryptionScheme] - Encryption scheme.
     * @param {string} [params.resourceGroup] - Resource group.
     * @param {KMSSettingsPrimaryCrk} [params.primaryCrk] - Primary CRK details.
     * @param {KMSSettingsSecondaryCrk} [params.secondaryCrk] - Secondary CRK details.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.KMSSettings>>}
     */
    SchematicsV1.prototype.updateKmsSettings = function (params) {
        var _params = __assign({}, params);
        var body = {
            'location': _params.location,
            'encryption_scheme': _params.encryptionScheme,
            'resource_group': _params.resourceGroup,
            'primary_crk': _params.primaryCrk,
            'secondary_crk': _params.secondaryCrk,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'updateKmsSettings');
        var parameters = {
            options: {
                url: '/v2/settings/kms',
                method: 'PUT',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List KMS instances.
     *
     * Lists the KMS instances of your IBM Cloud account to find your Key Protect or Hyper Protect Crypto Services by
     * using the location and encrypted scheme such as KYOK or BYOK.
     * <h3>Authorization</h3> Schematics support generic authorization such as service access or platform access to the
     * action ID and the resource group. For more information, about Schematics access and permissions, see  [Schematics
     * service access roles and required
     * permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.encryptionScheme - The encryption scheme to be used.
     * @param {string} params.location - The location of the Resource.
     * @param {string} [params.resourceGroup] - The resource group (by default, fetch from all resource groups).
     * @param {number} [params.limit] - The maximum number of items that you want to list. The number must be a positive
     * integer between 1 and 2000. If no value is provided, 100 is used by default.
     * @param {string} [params.sort] - Name of the field to sort-by;  Use the '.' character to delineate sub-resources and
     * sub-fields (eg. owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending'
     * (default is ascending)   Ignore unrecognized or unsupported sort field.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<SchematicsV1.Response<SchematicsV1.KMSDiscovery>>}
     */
    SchematicsV1.prototype.listKms = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['encryptionScheme', 'location'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'encryption_scheme': _params.encryptionScheme,
            'location': _params.location,
            'resource_group': _params.resourceGroup,
            'limit': _params.limit,
            'sort': _params.sort,
        };
        var sdkHeaders = common_1.getSdkHeaders(SchematicsV1.DEFAULT_SERVICE_NAME, 'v1', 'listKms');
        var parameters = {
            options: {
                url: '/v2/settings/kms_instances',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    SchematicsV1.DEFAULT_SERVICE_URL = 'https://schematics-dev.containers.appdomain.cloud';
    SchematicsV1.DEFAULT_SERVICE_NAME = 'schematics';
    return SchematicsV1;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (SchematicsV1) {
    /** Constants for the `processTemplateMetaData` operation. */
    var ProcessTemplateMetaDataConstants;
    (function (ProcessTemplateMetaDataConstants) {
        /** Type of source for the Template. */
        var SourceType;
        (function (SourceType) {
            SourceType["LOCAL"] = "local";
            SourceType["GIT_HUB"] = "git_hub";
            SourceType["GIT_HUB_ENTERPRISE"] = "git_hub_enterprise";
            SourceType["GIT_LAB"] = "git_lab";
            SourceType["IBM_GIT_LAB"] = "ibm_git_lab";
            SourceType["IBM_CLOUD_CATALOG"] = "ibm_cloud_catalog";
            SourceType["EXTERNAL_SCM"] = "external_scm";
            SourceType["COS_BUCKET"] = "cos_bucket";
        })(SourceType = ProcessTemplateMetaDataConstants.SourceType || (ProcessTemplateMetaDataConstants.SourceType = {}));
    })(ProcessTemplateMetaDataConstants = SchematicsV1.ProcessTemplateMetaDataConstants || (SchematicsV1.ProcessTemplateMetaDataConstants = {}));
    /** Constants for the `getWorkspaceReadme` operation. */
    var GetWorkspaceReadmeConstants;
    (function (GetWorkspaceReadmeConstants) {
        /** The format of the readme file.  Value ''markdown'' will give markdown, otherwise html. */
        var Formatted;
        (function (Formatted) {
            Formatted["MARKDOWN"] = "markdown";
            Formatted["HTML"] = "html";
        })(Formatted = GetWorkspaceReadmeConstants.Formatted || (GetWorkspaceReadmeConstants.Formatted = {}));
    })(GetWorkspaceReadmeConstants = SchematicsV1.GetWorkspaceReadmeConstants || (SchematicsV1.GetWorkspaceReadmeConstants = {}));
    /** Constants for the `listActions` operation. */
    var ListActionsConstants;
    (function (ListActionsConstants) {
        /** Level of details returned by the get method. */
        var Profile;
        (function (Profile) {
            Profile["IDS"] = "ids";
            Profile["SUMMARY"] = "summary";
        })(Profile = ListActionsConstants.Profile || (ListActionsConstants.Profile = {}));
    })(ListActionsConstants = SchematicsV1.ListActionsConstants || (SchematicsV1.ListActionsConstants = {}));
    /** Constants for the `createAction` operation. */
    var CreateActionConstants;
    (function (CreateActionConstants) {
        /** List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources, provisioned using Schematics. */
        var Location;
        (function (Location) {
            Location["US_SOUTH"] = "us-south";
            Location["US_EAST"] = "us-east";
            Location["EU_GB"] = "eu-gb";
            Location["EU_DE"] = "eu-de";
        })(Location = CreateActionConstants.Location || (CreateActionConstants.Location = {}));
        /** Type of source for the Template. */
        var SourceType;
        (function (SourceType) {
            SourceType["LOCAL"] = "local";
            SourceType["GIT_HUB"] = "git_hub";
            SourceType["GIT_HUB_ENTERPRISE"] = "git_hub_enterprise";
            SourceType["GIT_LAB"] = "git_lab";
            SourceType["IBM_GIT_LAB"] = "ibm_git_lab";
            SourceType["IBM_CLOUD_CATALOG"] = "ibm_cloud_catalog";
            SourceType["EXTERNAL_SCM"] = "external_scm";
            SourceType["COS_BUCKET"] = "cos_bucket";
        })(SourceType = CreateActionConstants.SourceType || (CreateActionConstants.SourceType = {}));
    })(CreateActionConstants = SchematicsV1.CreateActionConstants || (SchematicsV1.CreateActionConstants = {}));
    /** Constants for the `getAction` operation. */
    var GetActionConstants;
    (function (GetActionConstants) {
        /** Level of details returned by the get method. */
        var Profile;
        (function (Profile) {
            Profile["SUMMARY"] = "summary";
            Profile["DETAILED"] = "detailed";
        })(Profile = GetActionConstants.Profile || (GetActionConstants.Profile = {}));
    })(GetActionConstants = SchematicsV1.GetActionConstants || (SchematicsV1.GetActionConstants = {}));
    /** Constants for the `updateAction` operation. */
    var UpdateActionConstants;
    (function (UpdateActionConstants) {
        /** List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources, provisioned using Schematics. */
        var Location;
        (function (Location) {
            Location["US_SOUTH"] = "us-south";
            Location["US_EAST"] = "us-east";
            Location["EU_GB"] = "eu-gb";
            Location["EU_DE"] = "eu-de";
        })(Location = UpdateActionConstants.Location || (UpdateActionConstants.Location = {}));
        /** Type of source for the Template. */
        var SourceType;
        (function (SourceType) {
            SourceType["LOCAL"] = "local";
            SourceType["GIT_HUB"] = "git_hub";
            SourceType["GIT_HUB_ENTERPRISE"] = "git_hub_enterprise";
            SourceType["GIT_LAB"] = "git_lab";
            SourceType["IBM_GIT_LAB"] = "ibm_git_lab";
            SourceType["IBM_CLOUD_CATALOG"] = "ibm_cloud_catalog";
            SourceType["EXTERNAL_SCM"] = "external_scm";
            SourceType["COS_BUCKET"] = "cos_bucket";
        })(SourceType = UpdateActionConstants.SourceType || (UpdateActionConstants.SourceType = {}));
    })(UpdateActionConstants = SchematicsV1.UpdateActionConstants || (SchematicsV1.UpdateActionConstants = {}));
    /** Constants for the `listJobs` operation. */
    var ListJobsConstants;
    (function (ListJobsConstants) {
        /** Level of details returned by the get method. */
        var Profile;
        (function (Profile) {
            Profile["IDS"] = "ids";
            Profile["SUMMARY"] = "summary";
        })(Profile = ListJobsConstants.Profile || (ListJobsConstants.Profile = {}));
        /** Name of the resource (workspace, actions or controls). */
        var Resource;
        (function (Resource) {
            Resource["WORKSPACE"] = "workspace";
            Resource["ACTION"] = "action";
        })(Resource = ListJobsConstants.Resource || (ListJobsConstants.Resource = {}));
        /** list jobs. */
        var List;
        (function (List) {
            List["ALL"] = "all";
        })(List = ListJobsConstants.List || (ListJobsConstants.List = {}));
    })(ListJobsConstants = SchematicsV1.ListJobsConstants || (SchematicsV1.ListJobsConstants = {}));
    /** Constants for the `createJob` operation. */
    var CreateJobConstants;
    (function (CreateJobConstants) {
        /** Name of the Schematics automation resource. */
        var CommandObject;
        (function (CommandObject) {
            CommandObject["WORKSPACE"] = "workspace";
            CommandObject["ACTION"] = "action";
            CommandObject["SYSTEM"] = "system";
            CommandObject["ENVIRONMENT"] = "environment";
        })(CommandObject = CreateJobConstants.CommandObject || (CreateJobConstants.CommandObject = {}));
        /** Schematics job command name. */
        var CommandName;
        (function (CommandName) {
            CommandName["WORKSPACE_PLAN"] = "workspace_plan";
            CommandName["WORKSPACE_APPLY"] = "workspace_apply";
            CommandName["WORKSPACE_DESTROY"] = "workspace_destroy";
            CommandName["WORKSPACE_REFRESH"] = "workspace_refresh";
            CommandName["ANSIBLE_PLAYBOOK_RUN"] = "ansible_playbook_run";
            CommandName["ANSIBLE_PLAYBOOK_CHECK"] = "ansible_playbook_check";
            CommandName["CREATE_ACTION"] = "create_action";
            CommandName["PUT_ACTION"] = "put_action";
            CommandName["PATCH_ACTION"] = "patch_action";
            CommandName["DELETE_ACTION"] = "delete_action";
            CommandName["SYSTEM_KEY_ENABLE"] = "system_key_enable";
            CommandName["SYSTEM_KEY_DELETE"] = "system_key_delete";
            CommandName["SYSTEM_KEY_DISABLE"] = "system_key_disable";
            CommandName["SYSTEM_KEY_ROTATE"] = "system_key_rotate";
            CommandName["SYSTEM_KEY_RESTORE"] = "system_key_restore";
            CommandName["CREATE_WORKSPACE"] = "create_workspace";
            CommandName["PUT_WORKSPACE"] = "put_workspace";
            CommandName["PATCH_WORKSPACE"] = "patch_workspace";
            CommandName["DELETE_WORKSPACE"] = "delete_workspace";
            CommandName["CREATE_CART"] = "create_cart";
            CommandName["CREATE_ENVIRONMENT"] = "create_environment";
            CommandName["PUT_ENVIRONMENT"] = "put_environment";
            CommandName["DELETE_ENVIRONMENT"] = "delete_environment";
            CommandName["ENVIRONMENT_INIT"] = "environment_init";
            CommandName["ENVIRONMENT_INSTALL"] = "environment_install";
            CommandName["ENVIRONMENT_UNINSTALL"] = "environment_uninstall";
            CommandName["REPOSITORY_PROCESS"] = "repository_process";
        })(CommandName = CreateJobConstants.CommandName || (CreateJobConstants.CommandName = {}));
        /** List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources, provisioned using Schematics. */
        var Location;
        (function (Location) {
            Location["US_SOUTH"] = "us-south";
            Location["US_EAST"] = "us-east";
            Location["EU_GB"] = "eu-gb";
            Location["EU_DE"] = "eu-de";
        })(Location = CreateJobConstants.Location || (CreateJobConstants.Location = {}));
    })(CreateJobConstants = SchematicsV1.CreateJobConstants || (SchematicsV1.CreateJobConstants = {}));
    /** Constants for the `getJob` operation. */
    var GetJobConstants;
    (function (GetJobConstants) {
        /** Level of details returned by the get method. */
        var Profile;
        (function (Profile) {
            Profile["SUMMARY"] = "summary";
            Profile["DETAILED"] = "detailed";
        })(Profile = GetJobConstants.Profile || (GetJobConstants.Profile = {}));
    })(GetJobConstants = SchematicsV1.GetJobConstants || (SchematicsV1.GetJobConstants = {}));
    /** Constants for the `updateJob` operation. */
    var UpdateJobConstants;
    (function (UpdateJobConstants) {
        /** Name of the Schematics automation resource. */
        var CommandObject;
        (function (CommandObject) {
            CommandObject["WORKSPACE"] = "workspace";
            CommandObject["ACTION"] = "action";
            CommandObject["SYSTEM"] = "system";
            CommandObject["ENVIRONMENT"] = "environment";
        })(CommandObject = UpdateJobConstants.CommandObject || (UpdateJobConstants.CommandObject = {}));
        /** Schematics job command name. */
        var CommandName;
        (function (CommandName) {
            CommandName["WORKSPACE_PLAN"] = "workspace_plan";
            CommandName["WORKSPACE_APPLY"] = "workspace_apply";
            CommandName["WORKSPACE_DESTROY"] = "workspace_destroy";
            CommandName["WORKSPACE_REFRESH"] = "workspace_refresh";
            CommandName["ANSIBLE_PLAYBOOK_RUN"] = "ansible_playbook_run";
            CommandName["ANSIBLE_PLAYBOOK_CHECK"] = "ansible_playbook_check";
            CommandName["CREATE_ACTION"] = "create_action";
            CommandName["PUT_ACTION"] = "put_action";
            CommandName["PATCH_ACTION"] = "patch_action";
            CommandName["DELETE_ACTION"] = "delete_action";
            CommandName["SYSTEM_KEY_ENABLE"] = "system_key_enable";
            CommandName["SYSTEM_KEY_DELETE"] = "system_key_delete";
            CommandName["SYSTEM_KEY_DISABLE"] = "system_key_disable";
            CommandName["SYSTEM_KEY_ROTATE"] = "system_key_rotate";
            CommandName["SYSTEM_KEY_RESTORE"] = "system_key_restore";
            CommandName["CREATE_WORKSPACE"] = "create_workspace";
            CommandName["PUT_WORKSPACE"] = "put_workspace";
            CommandName["PATCH_WORKSPACE"] = "patch_workspace";
            CommandName["DELETE_WORKSPACE"] = "delete_workspace";
            CommandName["CREATE_CART"] = "create_cart";
            CommandName["CREATE_ENVIRONMENT"] = "create_environment";
            CommandName["PUT_ENVIRONMENT"] = "put_environment";
            CommandName["DELETE_ENVIRONMENT"] = "delete_environment";
            CommandName["ENVIRONMENT_INIT"] = "environment_init";
            CommandName["ENVIRONMENT_INSTALL"] = "environment_install";
            CommandName["ENVIRONMENT_UNINSTALL"] = "environment_uninstall";
            CommandName["REPOSITORY_PROCESS"] = "repository_process";
        })(CommandName = UpdateJobConstants.CommandName || (UpdateJobConstants.CommandName = {}));
        /** List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources, provisioned using Schematics. */
        var Location;
        (function (Location) {
            Location["US_SOUTH"] = "us-south";
            Location["US_EAST"] = "us-east";
            Location["EU_GB"] = "eu-gb";
            Location["EU_DE"] = "eu-de";
        })(Location = UpdateJobConstants.Location || (UpdateJobConstants.Location = {}));
    })(UpdateJobConstants = SchematicsV1.UpdateJobConstants || (SchematicsV1.UpdateJobConstants = {}));
    /** Constants for the `listInventories` operation. */
    var ListInventoriesConstants;
    (function (ListInventoriesConstants) {
        /** Level of details returned by the get method. */
        var Profile;
        (function (Profile) {
            Profile["IDS"] = "ids";
            Profile["SUMMARY"] = "summary";
        })(Profile = ListInventoriesConstants.Profile || (ListInventoriesConstants.Profile = {}));
    })(ListInventoriesConstants = SchematicsV1.ListInventoriesConstants || (SchematicsV1.ListInventoriesConstants = {}));
    /** Constants for the `createInventory` operation. */
    var CreateInventoryConstants;
    (function (CreateInventoryConstants) {
        /** List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources, provisioned using Schematics. */
        var Location;
        (function (Location) {
            Location["US_SOUTH"] = "us-south";
            Location["US_EAST"] = "us-east";
            Location["EU_GB"] = "eu-gb";
            Location["EU_DE"] = "eu-de";
        })(Location = CreateInventoryConstants.Location || (CreateInventoryConstants.Location = {}));
    })(CreateInventoryConstants = SchematicsV1.CreateInventoryConstants || (SchematicsV1.CreateInventoryConstants = {}));
    /** Constants for the `replaceInventory` operation. */
    var ReplaceInventoryConstants;
    (function (ReplaceInventoryConstants) {
        /** List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources, provisioned using Schematics. */
        var Location;
        (function (Location) {
            Location["US_SOUTH"] = "us-south";
            Location["US_EAST"] = "us-east";
            Location["EU_GB"] = "eu-gb";
            Location["EU_DE"] = "eu-de";
        })(Location = ReplaceInventoryConstants.Location || (ReplaceInventoryConstants.Location = {}));
    })(ReplaceInventoryConstants = SchematicsV1.ReplaceInventoryConstants || (SchematicsV1.ReplaceInventoryConstants = {}));
    /** Constants for the `updateInventory` operation. */
    var UpdateInventoryConstants;
    (function (UpdateInventoryConstants) {
        /** List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources, provisioned using Schematics. */
        var Location;
        (function (Location) {
            Location["US_SOUTH"] = "us-south";
            Location["US_EAST"] = "us-east";
            Location["EU_GB"] = "eu-gb";
            Location["EU_DE"] = "eu-de";
        })(Location = UpdateInventoryConstants.Location || (UpdateInventoryConstants.Location = {}));
    })(UpdateInventoryConstants = SchematicsV1.UpdateInventoryConstants || (SchematicsV1.UpdateInventoryConstants = {}));
    /** Constants for the `listResourceQuery` operation. */
    var ListResourceQueryConstants;
    (function (ListResourceQueryConstants) {
        /** Level of details returned by the get method. */
        var Profile;
        (function (Profile) {
            Profile["IDS"] = "ids";
            Profile["SUMMARY"] = "summary";
        })(Profile = ListResourceQueryConstants.Profile || (ListResourceQueryConstants.Profile = {}));
    })(ListResourceQueryConstants = SchematicsV1.ListResourceQueryConstants || (SchematicsV1.ListResourceQueryConstants = {}));
    /** Constants for the `createResourceQuery` operation. */
    var CreateResourceQueryConstants;
    (function (CreateResourceQueryConstants) {
        /** Resource type (cluster, vsi, icd, vpc). */
        var Type;
        (function (Type) {
            Type["VSI"] = "vsi";
        })(Type = CreateResourceQueryConstants.Type || (CreateResourceQueryConstants.Type = {}));
    })(CreateResourceQueryConstants = SchematicsV1.CreateResourceQueryConstants || (SchematicsV1.CreateResourceQueryConstants = {}));
    /** Constants for the `replaceResourcesQuery` operation. */
    var ReplaceResourcesQueryConstants;
    (function (ReplaceResourcesQueryConstants) {
        /** Resource type (cluster, vsi, icd, vpc). */
        var Type;
        (function (Type) {
            Type["VSI"] = "vsi";
        })(Type = ReplaceResourcesQueryConstants.Type || (ReplaceResourcesQueryConstants.Type = {}));
    })(ReplaceResourcesQueryConstants = SchematicsV1.ReplaceResourcesQueryConstants || (SchematicsV1.ReplaceResourcesQueryConstants = {}));
})(SchematicsV1 || (SchematicsV1 = {}));
module.exports = SchematicsV1;
//# sourceMappingURL=v1.js.map